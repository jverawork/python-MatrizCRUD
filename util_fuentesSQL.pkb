CREATE OR REPLACE PACKAGE BODY PQ_OWNER.CRE_DEBITOAUTOMATICOPQ_PKG IS
--<BR><B>VERSION:</B> 1.0.0
--<B>DESCRIPCION:</B> PROCESOS DE RECAUDACION
--<BR><B>AUTOR:</B> SANDRA GUAITA
--<BR><B>FECHA:</B> 01/08/2023
    
    G_FECHACARGA             DATE;
    G_FECHADEBITO             DATE;
    G_FECHADESBLOQUEO         DATE;
    
    G_REMITENTE             IESS_OWNER.CRE_DETCATALOGOPQ_TBL.DP_VALCARDETCATALOGO%TYPE;
    G_DESTINATARIOS         IESS_OWNER.CRE_DETCATALOGOPQ_TBL.DP_VALCARDETCATALOGO%TYPE;
    G_RUTADIRECTORIO        IESS_OWNER.CRE_DETCATALOGOPQ_TBL.DP_VALCARDETCATALOGO%TYPE;
    G_DIRECTORIO            IESS_OWNER.CRE_DETCATALOGOPQ_TBL.DP_VALCARDETCATALOGO%TYPE;
    
    G_BANDERAPLANILLAS         PQ_OWNER.CRE_DETCATALOGOPQ_TBL.DP_VALNUMDETCATALOGO%TYPE;
    G_DIAACTUALIZACESA         PQ_OWNER.CRE_DETCATALOGOPQ_TBL.DP_VALNUMDETCATALOGO%TYPE;            
    G_DIAEJECUTADEBITO         PQ_OWNER.CRE_DETCATALOGOPQ_TBL.DP_VALNUMDETCATALOGO%TYPE;
    G_DIAEJECUTADESBLOQUEO    PQ_OWNER.CRE_DETCATALOGOPQ_TBL.DP_VALNUMDETCATALOGO%TYPE;
    
    G_CODPROCESOBIT            IESS_OWNER.HLPROTNOMPACKAGE.CODPROC%TYPE;
    G_ID                    IESS_OWNER.HLPROTBITOPE.ID%TYPE;        
        
    G_DIASENMORA               PLS_INTEGER := 0;
    G_NIDERROR_GENDEBAUT    PLS_INTEGER := 0;
    G_NIDERROR_GENDEBCES    PLS_INTEGER := 0;
    G_NIDERROR_GENDEBFRS    PLS_INTEGER := 0;
    G_NIDCARGOS_FRS            PLS_INTEGER := 0;
    G_NIDBLOQUEOS_FRS        PLS_INTEGER := 0;
    G_NIDSOLICITUD_FRS        PLS_INTEGER := 0;
    G_NIDTRAMITES_FRS        PLS_INTEGER := 0;
    G_NIDNODISPONIBLE_FRS    PLS_INTEGER := 0;
    G_NIDDEBITO_EXITOSO        PLS_INTEGER := 0;
    
    K_VIG                 CONSTANT VARCHAR2(3)                                                 := 'VIG';
    K_VALCA             CONSTANT PQ_OWNER.CRE_CATALOGOPQ_TBL.CP_ESTADOCATALOGO%TYPE         := 'A';
    K_VALDA             CONSTANT PQ_OWNER.CRE_DETCATALOGOPQ_TBL.DP_ESTADODETCATALOGO%TYPE   := 'A';
    K_VALDV             CONSTANT PQ_OWNER.CRE_DETCATALOGOPQ_TBL.DP_TIPVALDETCATALOGO%TYPE   := 'V';
    K_ACT                  CONSTANT PQ_OWNER.CRE_ACTUALIZACESANTIAS_TBL.AC_ESTADO%TYPE           := 'ACT';
    K_NAC                  CONSTANT PQ_OWNER.CRE_ACTUALIZACESANTIAS_TBL.AC_ESTADO%TYPE         := 'NAC';
    K_ESTPROSI            CONSTANT PQ_OWNER.CRE_CREDITOSDEBITOSAC_T.CD_ESTADOPROCESO%TYPE     := 'SDE';
    K_ESTPRONO            CONSTANT PQ_OWNER.CRE_CREDITOSDEBITOSAC_T.CD_ESTADOPROCESO%TYPE     := 'NDE';
    K_CODPRO            CONSTANT IESS_OWNER.KSCRETBITPRO.CODPRO%TYPE                        := 'DAPQ-DEBAUT';
    
    K_LIMITEBULKCOLLECT CONSTANT PLS_INTEGER:= 3000;
    K_ENTER                CONSTANT VARCHAR2 (50) := CHR (13) || CHR (10);
    


    
----------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------


    
    PROCEDURE CRE_CONSULTACATALOGO_P (
        AI_CODCATALOGO             IN  PQ_OWNER.CRE_CATALOGOPQ_TBL.CP_CODCATALOGO%TYPE,        
        AI_CODDETCATALOGO         IN  PQ_OWNER.CRE_DETCATALOGOPQ_TBL.DP_CODDETCATALOGO%TYPE, 
        AO_VALNUMDETCATALOGO    IN OUT PQ_OWNER.CRE_DETCATALOGOPQ_TBL.DP_VALNUMDETCATALOGO%TYPE, 
        AO_VALCARDETCATALOGO    IN OUT PQ_OWNER.CRE_DETCATALOGOPQ_TBL.DP_VALCARDETCATALOGO%TYPE, 
        AO_VALFECDETCATALOGO    IN OUT PQ_OWNER.CRE_DETCATALOGOPQ_TBL.DP_VALFECDETCATALOGO%TYPE, 
        AO_ERROR                  IN OUT VARCHAR2,
        AO_MENSAJEERROR            IN OUT VARCHAR2)
    IS
    BEGIN

        SYS.DBMS_APPLICATION_INFO.SET_MODULE (
        MODULE_NAME   => 'CRE_CONSULTACATALOGO_P',
        ACTION_NAME   => 'OBTIENE DATOS PARAMETRIZADOS QUE SE USAN EN EL PROCESO');

        
        <<BUSCACATALOGO>>
        BEGIN
            SELECT D.DP_VALNUMDETCATALOGO, D.DP_VALCARDETCATALOGO, D.DP_VALFECDETCATALOGO
            INTO AO_VALNUMDETCATALOGO, AO_VALCARDETCATALOGO, AO_VALFECDETCATALOGO
            FROM PQ_OWNER.CRE_CATALOGOPQ_TBL C
            INNER JOIN PQ_OWNER.CRE_DETCATALOGOPQ_TBL D
            ON (C.CP_ID_CATALOGO = D.CP_ID_CATALOGO)
            WHERE     
            C.CP_CODCATALOGO = AI_CODCATALOGO
            AND D.DP_CODDETCATALOGO = AI_CODDETCATALOGO
            AND C.CP_ESTADOCATALOGO = K_VALCA
            AND D.DP_ESTADODETCATALOGO = K_VALDA
            AND D.DP_TIPVALDETCATALOGO = K_VALDV;
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            AO_VALNUMDETCATALOGO := NULL;
            AO_VALCARDETCATALOGO := NULL; 
            AO_VALFECDETCATALOGO := NULL;
        WHEN TOO_MANY_ROWS THEN
            AO_VALNUMDETCATALOGO := NULL;
            AO_VALCARDETCATALOGO := NULL; 
            AO_VALFECDETCATALOGO := NULL;
        WHEN OTHERS THEN
            AO_VALNUMDETCATALOGO := NULL;
            AO_VALCARDETCATALOGO := NULL;
            AO_VALFECDETCATALOGO := NULL;            
        END BUSCACATALOGO;

        
        AO_ERROR := '1';
        AO_MENSAJEERROR := 'INFORMACION OBTENIDA CORRECTAMMENTE.';
        SYS.DBMS_APPLICATION_INFO.SET_MODULE (NULL, NULL);
        
    EXCEPTION
    WHEN OTHERS
    THEN
         AO_VALNUMDETCATALOGO := NULL;
        AO_VALCARDETCATALOGO := NULL; 
        AO_VALFECDETCATALOGO := NULL;        
        
        AO_ERROR := '0';
        AO_MENSAJEERROR := 'ERROR CRE_CONSULTACATALOGO_P: ' || SQLERRM;
        SYS.DBMS_APPLICATION_INFO.SET_MODULE (NULL, NULL);
         
    END CRE_CONSULTACATALOGO_P;
    
    
    PROCEDURE CRE_ACTUALIZACATALOGO_P (
        AI_VALNUMDETCATALOGO IN  PQ_OWNER.CRE_DETCATALOGOPQ_TBL.DP_VALNUMDETCATALOGO%TYPE,
        AI_VALCARDETCATALOGO IN  PQ_OWNER.CRE_DETCATALOGOPQ_TBL.DP_VALCARDETCATALOGO%TYPE,
        AI_VALFECDETCATALOGO IN  PQ_OWNER.CRE_DETCATALOGOPQ_TBL.DP_VALFECDETCATALOGO%TYPE,
        AI_CODDETCATALOGO      IN  PQ_OWNER.CRE_DETCATALOGOPQ_TBL.DP_CODDETCATALOGO%TYPE, 
        AO_ERROR          IN OUT VARCHAR2,
        AO_MENSAJEERROR    IN OUT VARCHAR2)
    IS
        PRAGMA AUTONOMOUS_TRANSACTION;
    BEGIN

        SYS.DBMS_APPLICATION_INFO.SET_MODULE (
        MODULE_NAME   => 'CRE_ACTUALIZACATALOGO_P',
        ACTION_NAME   => 'PARAMERIZACION DE BANDERAS QUE SE USAN EN EL PROCESO');

        --BANDERA EJECUCION PLANILLAS - GENERACION DE COMPROBANTES
        UPDATE PQ_OWNER.CRE_DETCATALOGOPQ_TBL
        SET DP_VALNUMDETCATALOGO = AI_VALNUMDETCATALOGO, 
        DP_VALCARDETCATALOGO = AI_VALCARDETCATALOGO, 
        DP_VALFECDETCATALOGO = AI_VALFECDETCATALOGO
        WHERE DP_CODDETCATALOGO = AI_CODDETCATALOGO
        AND DP_ESTADODETCATALOGO = 'A'
        AND DP_TIPVALDETCATALOGO = 'V';
    
        COMMIT;
        
        AO_ERROR := '1';
        AO_MENSAJEERROR := 'BANDERAS ACTUALIZADAS CORRECTAMMENTE.';
        SYS.DBMS_APPLICATION_INFO.SET_MODULE (NULL, NULL);
        
    EXCEPTION
    WHEN OTHERS
    THEN
         
         AO_ERROR := '0';
         AO_MENSAJEERROR := 'ERROR CRE_ACTUALIZACATALOGO_P: ' || SQLERRM;
         SYS.DBMS_APPLICATION_INFO.SET_MODULE (NULL, NULL);
         
    END CRE_ACTUALIZACATALOGO_P;
    

    PROCEDURE CRE_ACTUALIZADEBIOSSAC_P (
        AI_CRE_CREDITOSDEBITOSAC_T  IN T_CRE_CREDITOSDEBITOSAC_T,
        AO_ERROR          IN OUT VARCHAR2,
        AO_MENSAJEERROR    IN OUT VARCHAR2)
    IS
        L_IDX            PLS_INTEGER;
        R_KSCRETBITPRO    IESS_OWNER.KSCRETBITPRO%ROWTYPE;
    BEGIN

        SYS.DBMS_APPLICATION_INFO.SET_MODULE (
        MODULE_NAME   => 'CRE_ACTUALIZADEBIOSSAC_P',
        ACTION_NAME   => 'PARAMERIZACION DE BANDERAS QUE SE USAN EN EL PROCESO');

        R_KSCRETBITPRO.FECPRO         := SYSDATE;
        R_KSCRETBITPRO.CODPRO         := K_CODPRO;
        
        <<FOR_LOOP_ACTUALIZA>>
        BEGIN
        
            FORALL L_I IN 1 .. AI_CRE_CREDITOSDEBITOSAC_T.COUNT SAVE EXCEPTIONS
                UPDATE PQ_OWNER.CRE_CREDITOSDEBITOSAC_T
                SET CD_VALORFONRESDISPONIBLE= NVL(AI_CRE_CREDITOSDEBITOSAC_T(L_I).CD_VALORFONRESDISPONIBLE, CD_VALORFONRESDISPONIBLE),
                CD_VALORCESDISPONIBLE          = NVL(AI_CRE_CREDITOSDEBITOSAC_T(L_I).CD_VALORCESDISPONIBLE, CD_VALORCESDISPONIBLE),
                CD_VALORCESCOMPROMETIDO        = NVL(AI_CRE_CREDITOSDEBITOSAC_T(L_I).CD_VALORCESCOMPROMETIDO, CD_VALORCESCOMPROMETIDO),
                CD_VALORFONRESCOMPROMETIDO     = NVL(AI_CRE_CREDITOSDEBITOSAC_T(L_I).CD_VALORFONRESCOMPROMETIDO, CD_VALORFONRESCOMPROMETIDO),
                CD_OBSERVACION                 = AI_CRE_CREDITOSDEBITOSAC_T(L_I).CD_OBSERVACION,
                CD_ESTADOAFECOPE               = NVL(AI_CRE_CREDITOSDEBITOSAC_T(L_I).CD_ESTADOAFECOPE, CD_ESTADOAFECOPE),
                CD_ESTADOPROCESO               = NVL(AI_CRE_CREDITOSDEBITOSAC_T(L_I).CD_ESTADOPROCESO, CD_ESTADOPROCESO),
                CD_FECHAFALLECIMIENTO          = NVL(AI_CRE_CREDITOSDEBITOSAC_T(L_I).CD_FECHAFALLECIMIENTO, CD_FECHAFALLECIMIENTO)
                WHERE CD_IDREGISTRO         = AI_CRE_CREDITOSDEBITOSAC_T(L_I).CD_IDREGISTRO;
            COMMIT;
            
        EXCEPTION
        WHEN OTHERS THEN
            <<FOR_LOOP_ERROR>>
            FOR L_J IN 1 .. SQL%BULK_EXCEPTIONS.COUNT LOOP
                L_IDX := SQL%BULK_EXCEPTIONS(L_J).ERROR_INDEX;
                
                R_KSCRETBITPRO.OBSERV := SUBSTR(AI_CRE_CREDITOSDEBITOSAC_T(L_IDX).CD_IDREGISTRO || SQLERRM(-SQL%BULK_EXCEPTIONS(L_J).ERROR_CODE), 1, 1024);
                IESS_OWNER.HLCREKPROGEN.PROREGBITPRO (AICCODPRO => R_KSCRETBITPRO.CODPRO, AICOBSERV => R_KSCRETBITPRO.OBSERV);
                
            END LOOP FOR_LOOP_ERROR;

            ROLLBACK;
            
        END FOR_LOOP_ACTUALIZA;
    
        AO_ERROR := '1';
        AO_MENSAJEERROR := 'BLOQUE ACTUALIZADO CORRECTAMMENTE.';
        SYS.DBMS_APPLICATION_INFO.SET_MODULE (NULL, NULL);
        
    EXCEPTION
    WHEN OTHERS
    THEN
         AO_ERROR := '0';
         AO_MENSAJEERROR := 'ERROR CRE_ACTUALIZADEBIOSSAC_P: ' || SQLERRM;
         SYS.DBMS_APPLICATION_INFO.SET_MODULE (NULL, NULL);
         
    END CRE_ACTUALIZADEBIOSSAC_P;


    PROCEDURE CRE_EXCLUSIONESDEB_P(
        AI_FECHACARGA      IN DATE,
        AO_ERROR          OUT VARCHAR2,
        AO_MENSAJEERROR OUT VARCHAR2) 
    IS
    
        L_ESTADOAFECOPE         PQ_OWNER.CRE_CREDITOSDEBITOSAC_T.CD_ESTADOAFECOPE%TYPE;
        L_OBSERVACION           PQ_OWNER.CRE_CREDITOSDEBITOSAC_T.CD_OBSERVACION%TYPE;
        L_ESTADOPROCESO         PQ_OWNER.CRE_CREDITOSDEBITOSAC_T.CD_ESTADOPROCESO%TYPE;
        L_ESFALLECIDO              PQ_OWNER.CRE_CREDITOSDEBITOSAC_T.CD_FECHAFALLECIMIENTO%TYPE;
        L_TIENEIDTRANSACCION    IESS_OWNER.REC_TRANSACCION_TBL.TR_IDTIPOTRANSACCION%TYPE;
        L_TIENETRANSACCION      IESS_OWNER.REC_TRANSACCION_TBL.TR_IDTRANSACCION%TYPE;
        L_IDX                    PLS_INTEGER;
        L_PROCESADOS            PLS_INTEGER := 0;
        
        
        CURSOR C_CREDITOSDEBITOSAC IS
            SELECT SAC.CD_NUMAFI, SAC.CD_OPERACIONSAC, SAC.CD_DIASMORASAC, SAC.CD_ESTADOPROCESO, SAC.CD_IDREGISTRO, SAC.CD_FECHAFALLECIMIENTO,
            CRE.NUMAFI, CRE.CODESTPRE
            FROM PQ_OWNER.CRE_CREDITOSDEBITOSAC_T SAC
            LEFT JOIN IESS_OWNER.KSCRETCREDITOS CRE
            ON SAC.CD_OPERACIONSAC = CRE.CR_OPERACIONSAC
            WHERE SAC.CD_ESTADOAFECOPE = 'ENV'
            AND   SAC.CD_ESTADOPROCESO = 'SDE'
            AND   SAC.CD_FECHACARGA = AI_FECHACARGA;    
        
        
        CURSOR C_TOTALAPROCESAR IS
            SELECT COUNT(1) APROCESAR
            FROM PQ_OWNER.CRE_CREDITOSDEBITOSAC_T SAC
            WHERE SAC.CD_ESTADOAFECOPE = 'ENV'
            AND   SAC.CD_ESTADOPROCESO = 'SDE'
            AND   SAC.CD_FECHACARGA = AI_FECHACARGA;
        
        
        TYPE T_CRE_CREDITOSDEBITO IS TABLE OF C_CREDITOSDEBITOSAC%ROWTYPE INDEX BY PLS_INTEGER;
        L_CREDITOSDEBITO              T_CRE_CREDITOSDEBITO;

        TYPE T_TOTALAPROCESAR     IS TABLE OF C_TOTALAPROCESAR%ROWTYPE INDEX BY PLS_INTEGER;
        L_TOTALAPROCESAR          T_TOTALAPROCESAR;
        
        L_CRE_CREDITOSDEBITOSAC_T      T_CRE_CREDITOSDEBITOSAC_T;
        R_KSCRETBITPRO                IESS_OWNER.KSCRETBITPRO%ROWTYPE;
        X_SALIREJECUCION               EXCEPTION;
    BEGIN

        SYS.DBMS_APPLICATION_INFO.SET_MODULE (
        MODULE_NAME   => 'CRE_EXCLUSIONESDEB_P',
        ACTION_NAME   => 'EXCLUYE LAS OPERACIONES QUE NO SE DEBEN CONSIDERAR EN EL PROCESO');
        
        R_KSCRETBITPRO.CODPRO         := K_CODPRO;
        R_KSCRETBITPRO.FECPRO         := SYSDATE;
        R_KSCRETBITPRO.OBSERV         := '4.1 INICIO PROCEDIMIENTO CRE_EXCLUSIONESDEB_P';
        IESS_OWNER.HLCREKPROGEN.PROREGBITPRO (AICCODPRO => R_KSCRETBITPRO.CODPRO, AICOBSERV => R_KSCRETBITPRO.OBSERV);    

        --BITACORA REGISTROS A PROCESAR
        OPEN C_TOTALAPROCESAR;
            FETCH C_TOTALAPROCESAR BULK COLLECT INTO L_TOTALAPROCESAR; 
            
            IF L_TOTALAPROCESAR(1).APROCESAR = 0 THEN
                R_KSCRETBITPRO.OBSERV := '4.1 NO EXISTEN REGISTROS PARA PROCESAR';
                IESS_OWNER.HLCREKPROGEN.PROREGBITPRO (AICCODPRO => R_KSCRETBITPRO.CODPRO, AICOBSERV => R_KSCRETBITPRO.OBSERV);
                RAISE X_SALIREJECUCION;
            END IF;
        CLOSE C_TOTALAPROCESAR;


        R_KSCRETBITPRO.OBSERV := '4.1 NUMERO TOTAL DE REGISTROS A PROCESAR: ' || L_TOTALAPROCESAR(1).APROCESAR;
        IESS_OWNER.HLCREKPROGEN.PROREGBITPRO (AICCODPRO => R_KSCRETBITPRO.CODPRO, AICOBSERV => R_KSCRETBITPRO.OBSERV);
        
        --VALIDA TODA OBTIENE INFORMACION
        OPEN C_CREDITOSDEBITOSAC;
        
        <<FOR_LOOP_CREDITOS>>
        LOOP
        
            FETCH C_CREDITOSDEBITOSAC BULK COLLECT INTO L_CREDITOSDEBITO LIMIT K_LIMITEBULKCOLLECT; 
            
            --VALIDA Y OBTIENE INFORMACION POR BLOQUES
            L_IDX := L_CREDITOSDEBITO.FIRST();
            
            <<FOR_LOOP_VALIDA>>
            WHILE L_IDX IS NOT NULL LOOP
        
                L_TIENEIDTRANSACCION:= NULL;
                L_TIENETRANSACCION  := NULL;
                L_ESFALLECIDO       := NULL;
                L_ESTADOAFECOPE     := NULL;
                L_ESTADOPROCESO        := NULL;
                L_OBSERVACION       := NULL;


                IF L_OBSERVACION IS NULL AND NVL(L_CREDITOSDEBITO(L_IDX).NUMAFI, '-') <> L_CREDITOSDEBITO(L_IDX).CD_NUMAFI THEN
                    L_OBSERVACION := 'DA-14 LA CEDULA DE LA OPERACION NO CORRESPONDE CON LA CEDULA DEL CREDITO';
                END IF;                

                
                IF L_OBSERVACION IS NULL AND NVL(L_CREDITOSDEBITO(L_IDX).CODESTPRE, '-') <> K_VIG THEN 
                    L_OBSERVACION := 'DA-09 LA OPERACION NO SE ENCUENTRA EN ESTADO VIGENTE.';
                END IF;    
                
                
                --LOS MUERTITOS
                IF L_OBSERVACION IS NULL AND L_CREDITOSDEBITO(L_IDX).CD_FECHAFALLECIMIENTO IS NULL THEN    
                    <<ESFALLECIDO>>
                    BEGIN
                        SELECT FECDEFPER
                        INTO L_ESFALLECIDO
                        FROM IESS_OWNER.KSPCOTREGCIV
                        WHERE CEDIDEUSU = L_CREDITOSDEBITO(L_IDX).CD_NUMAFI;
                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                        L_ESFALLECIDO := NULL;    
                    WHEN TOO_MANY_ROWS THEN
                        L_ESFALLECIDO := NULL;                      
                    WHEN OTHERS THEN
                        L_ESFALLECIDO := NULL;
                    END ESFALLECIDO;
                    
                    --ESTOS REGISTROS VIENEN DE SEGURO DE SALDOS. ESTAN FALLECIDOS.
                    --L_CREDITOSDEBITO(I).CD_ESTADOPROCESO = 'SSP' 
                    IF L_ESFALLECIDO IS NOT NULL THEN
                        L_OBSERVACION := 'DA-06 EL AFILIADO SE ENCUENTRA FALLECIDO';
                    END IF;
                END IF;
                
                
                --TRANSACCIONES EN TRANSITO QUE POSEE LA OPERACION
                IF L_OBSERVACION IS NULL THEN
                    <<TIENETRANSITO>>
                    BEGIN
                        SELECT R.TR_IDTIPOTRANSACCION, R.TR_IDTRANSACCION
                        INTO L_TIENEIDTRANSACCION, L_TIENETRANSACCION
                        FROM IESS_OWNER.REC_TRANSACCION_TBL R
                        WHERE R.TR_IDGAF = L_CREDITOSDEBITO(L_IDX).CD_OPERACIONSAC
                        AND   R.TR_ESTADO IN ('EMI','REC','DUP','SRV')  
                        AND   R.TR_IDTIPOTRANSACCION IN (14, 15, 16, 17, 18, 19, 21, 26, 28, 29, 30, 32, 33, 34)
                        AND   ROWNUM = 1;
                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                        L_TIENEIDTRANSACCION := NULL;
                        L_TIENETRANSACCION   := NULL; 
                    WHEN TOO_MANY_ROWS THEN
                        L_TIENEIDTRANSACCION := NULL;
                        L_TIENETRANSACCION   := NULL;                   
                    WHEN OTHERS THEN
                        L_TIENEIDTRANSACCION := NULL;
                        L_TIENETRANSACCION   := NULL;
                    END TIENETRANSITO;
                
                    IF L_TIENEIDTRANSACCION IS NOT NULL THEN
                        L_OBSERVACION := 'DA-05 POSEE UNA TRANSACCION EN TRANSITO. TIPO: '|| L_TIENEIDTRANSACCION||' NUM: '||L_TIENETRANSACCION;
                    END IF;        
                END IF;    
      

                --TRANSACCIONES EN TRANSITO QUE POSEE LA OPERACION EN LOS ULTIMOS 2 DIAS
                IF L_OBSERVACION IS NULL THEN
                    <<TIENETRANSITO>>
                    BEGIN
                        SELECT R.TR_IDTIPOTRANSACCION, R.TR_IDTRANSACCION
                        INTO L_TIENEIDTRANSACCION, L_TIENETRANSACCION
                        FROM IESS_OWNER.REC_TRANSACCION_TBL R
                        WHERE R.TR_IDGAF = L_CREDITOSDEBITO(L_IDX).CD_OPERACIONSAC
                        AND R.TR_IDTIPOTRANSACCION IN (14, 15, 16, 17, 18, 19, 21, 26, 28, 29, 30, 32, 33, 34)
                        AND R.TR_ESTADO IN ('SRV', 'REC', 'DUP', 'EMI', 'AFE', 'REV')  
                        AND TRUNC (R.TR_FECHAPROCESO) > TRUNC (SYSDATE - 3)
                        AND TRUNC (R.TR_FECHAPROCESO) < TRUNC (SYSDATE + 1)                        
                        AND   ROWNUM = 1;
                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                        L_TIENEIDTRANSACCION := NULL;
                        L_TIENETRANSACCION   := NULL;
                    WHEN TOO_MANY_ROWS THEN
                        L_TIENEIDTRANSACCION := NULL;
                        L_TIENETRANSACCION   := NULL;                   
                    WHEN OTHERS THEN
                        L_TIENEIDTRANSACCION := NULL;
                        L_TIENETRANSACCION   := NULL;
                    END TIENETRANSITO;
                
                    IF L_TIENEIDTRANSACCION IS NOT NULL THEN
                        L_OBSERVACION := 'DA-05 POSEE UNA TRANSACCION EN TRANSITO. TIPO: '|| L_TIENEIDTRANSACCION||' NUM: '||L_TIENETRANSACCION;
                    END IF;        
                END IF;    
                
      
                --SI LA OPERACION POSEE DEBITOS EN ESTADO AFECTADO
                IF L_OBSERVACION IS NULL THEN
                    <<TIENEDEBITO>>
                    BEGIN
                        SELECT R.TR_IDTIPOTRANSACCION, R.TR_IDTRANSACCION
                        INTO L_TIENEIDTRANSACCION, L_TIENETRANSACCION
                        FROM IESS_OWNER.REC_TRANSACCION_TBL R
                        WHERE R.TR_IDGAF = L_CREDITOSDEBITO(L_IDX).CD_OPERACIONSAC
                        AND   R.TR_ESTADO = 'AFE'  
                        AND   R.TR_IDTIPOTRANSACCION IN (19,28,32,33)
                        AND   ROWNUM = 1;
                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN    
                        L_TIENEIDTRANSACCION := NULL;
                        L_TIENETRANSACCION   := NULL;
                    WHEN TOO_MANY_ROWS THEN    
                        L_TIENEIDTRANSACCION := NULL;
                        L_TIENETRANSACCION   := NULL;                    
                    WHEN OTHERS THEN
                        L_TIENEIDTRANSACCION := NULL;
                        L_TIENETRANSACCION   := NULL;
                    END TIENEDEBITO;

                    IF L_TIENEIDTRANSACCION IS NOT NULL THEN
                        L_OBSERVACION := 'DA-10 POSEE UNA TRANSACCION DE DEBITO AFECTADA. TIPO: '|| 
                                        L_TIENEIDTRANSACCION||' NUM: '||L_TIENETRANSACCION;
                    END IF;
                END IF;    
            
                IF L_OBSERVACION IS NOT NULL THEN 
                    L_ESTADOAFECOPE := 'REC';
                    L_ESTADOPROCESO := 'NDE';
                END IF;            
            
                L_CRE_CREDITOSDEBITOSAC_T(L_IDX).CD_ESTADOAFECOPE         := L_ESTADOAFECOPE;
                L_CRE_CREDITOSDEBITOSAC_T(L_IDX).CD_OBSERVACION         := L_OBSERVACION;
                L_CRE_CREDITOSDEBITOSAC_T(L_IDX).CD_ESTADOPROCESO         := L_ESTADOPROCESO;
                L_CRE_CREDITOSDEBITOSAC_T(L_IDX).CD_FECHAFALLECIMIENTO    := L_ESFALLECIDO;
                L_CRE_CREDITOSDEBITOSAC_T(L_IDX).CD_IDREGISTRO             := L_CREDITOSDEBITO(L_IDX).CD_IDREGISTRO;
                
                L_IDX := L_CREDITOSDEBITO.NEXT(L_IDX);
            
            END LOOP FOR_LOOP_VALIDA;


            --ACTUALIZA LOS REGISTROS VALIDADOS POR BLOQUES
            CRE_ACTUALIZADEBIOSSAC_P(AI_CRE_CREDITOSDEBITOSAC_T => L_CRE_CREDITOSDEBITOSAC_T, AO_ERROR => AO_ERROR, AO_MENSAJEERROR => AO_MENSAJEERROR);
            IF AO_ERROR = '0' THEN
                R_KSCRETBITPRO.OBSERV := '4.1 BLOQUE NO PUDO SER ALMACENADO.';
                IESS_OWNER.HLCREKPROGEN.PROREGBITPRO (AICCODPRO => R_KSCRETBITPRO.CODPRO, AICOBSERV => R_KSCRETBITPRO.OBSERV);
            ELSE
                R_KSCRETBITPRO.OBSERV := '4.1 BLOQUE ALMACENADO CORRECTAMENTE.';
                IESS_OWNER.HLCREKPROGEN.PROREGBITPRO (AICCODPRO => R_KSCRETBITPRO.CODPRO, AICOBSERV => R_KSCRETBITPRO.OBSERV);
            END IF;

            
            --BITACORAS
            L_PROCESADOS := L_PROCESADOS + L_CREDITOSDEBITO.COUNT;
            R_KSCRETBITPRO.OBSERV := '4.1 ' || L_PROCESADOS || ' REGISTROS PROCESADOS DE: ' || L_TOTALAPROCESAR(1).APROCESAR;
            IESS_OWNER.HLCREKPROGEN.PROREGBITPRO (AICCODPRO => R_KSCRETBITPRO.CODPRO, AICOBSERV => R_KSCRETBITPRO.OBSERV);
            
            
            --ELIMINA LOS REGISTROS DEL ARREGLO POR BLOQUES
            L_CRE_CREDITOSDEBITOSAC_T.DELETE;
            L_CREDITOSDEBITO.DELETE;
            
            
            EXIT FOR_LOOP_CREDITOS WHEN C_CREDITOSDEBITOSAC%NOTFOUND;  
            
        END LOOP FOR_LOOP_CREDITOS;
        
        CLOSE C_CREDITOSDEBITOSAC;

        --BITACORA REGISTROS PROCESADOS
        R_KSCRETBITPRO.OBSERV := '4.1 NUMERO TOTAL DE REGISTROS PROCESADOS: ' || L_PROCESADOS;
        IESS_OWNER.HLCREKPROGEN.PROREGBITPRO (AICCODPRO => R_KSCRETBITPRO.CODPRO, AICOBSERV => R_KSCRETBITPRO.OBSERV);
        
        AO_ERROR := '1';
        AO_MENSAJEERROR := '4.1 FIN PROCEDIMIENTO CRE_EXCLUSIONESDEB_P';
        
        R_KSCRETBITPRO.OBSERV := AO_MENSAJEERROR;
        IESS_OWNER.HLCREKPROGEN.PROREGBITPRO (AICCODPRO => R_KSCRETBITPRO.CODPRO, AICOBSERV => R_KSCRETBITPRO.OBSERV);
        SYS.DBMS_APPLICATION_INFO.SET_MODULE (NULL, NULL);
        
    EXCEPTION
    WHEN X_SALIREJECUCION THEN
        AO_ERROR := '1';
        AO_MENSAJEERROR := '4.1 FIN PROCEDIMIENTO CRE_EXCLUSIONESDEB_P';
        
        R_KSCRETBITPRO.OBSERV := AO_MENSAJEERROR;
        IESS_OWNER.HLCREKPROGEN.PROREGBITPRO (AICCODPRO => R_KSCRETBITPRO.CODPRO, AICOBSERV => R_KSCRETBITPRO.OBSERV);
        
        SYS.DBMS_APPLICATION_INFO.SET_MODULE (NULL, NULL);
        
    WHEN OTHERS THEN
        AO_ERROR := '0';
        AO_MENSAJEERROR := '4.1 ERROR CRE_EXCLUSIONESDEB_P: '||SQLERRM;
        
        SYS.DBMS_APPLICATION_INFO.SET_MODULE (NULL, NULL);
        
    END CRE_EXCLUSIONESDEB_P;
    
    
    PROCEDURE CRE_EXCLUSIONESCES_P(
        AI_FECHACARGA      IN DATE,
        AO_ERROR              OUT VARCHAR2,
        AO_MENSAJEERROR      OUT VARCHAR2) 
    IS
    
        L_ESTADOAFECOPE         PQ_OWNER.CRE_CREDITOSDEBITOSAC_T.CD_ESTADOAFECOPE%TYPE;
        L_OBSERVACION           PQ_OWNER.CRE_CREDITOSDEBITOSAC_T.CD_OBSERVACION%TYPE;
        L_ESTADOPROCESO         PQ_OWNER.CRE_CREDITOSDEBITOSAC_T.CD_ESTADOPROCESO%TYPE;
        L_ESFALLECIDO              PQ_OWNER.CRE_CREDITOSDEBITOSAC_T.CD_FECHAFALLECIMIENTO%TYPE;
        L_TIENEIDTRANSACCION    IESS_OWNER.REC_TRANSACCION_TBL.TR_IDTIPOTRANSACCION%TYPE;
        L_TIENETRANSACCION      IESS_OWNER.REC_TRANSACCION_TBL.TR_IDTRANSACCION%TYPE;
        L_VALORFONRESDISPONIBLE FRO.APORTES_PFR2.VALORCAPITALDISPONIBLE%TYPE;
        L_VALORCESDISPONIBLE    IESS_OWNER.KSAFITCESANTIAS.SALTOT%TYPE;
        L_VALCOMCESHL             IESS_OWNER.THLCRT_GARANTIAS.VALCOMCESHL%TYPE;
        L_VALCOMFONRES          IESS_OWNER.THLCRT_GARANTIAS.VALCOMFONRES%TYPE;
        L_IDX                    PLS_INTEGER := 0;
        L_PROCESADOS            PLS_INTEGER := 0;
        
        CURSOR C_CREDITOSDEBITOSAC IS
            SELECT SAC.CD_NUMAFI, SAC.CD_OPERACIONSAC, SAC.CD_DIASMORASAC, SAC.CD_ESTADOPROCESO, SAC.CD_IDREGISTRO, 
            CRE.CODPRECLA, CRE.ORDPREAFI, CRE.CODPRETIP, CRE.NUMPREAFI, CRE.FECPREAFI, CRE.NUMAFI, CRE.CODESTPRE
            FROM PQ_OWNER.CRE_CREDITOSDEBITOSAC_T SAC
            INNER JOIN IESS_OWNER.KSCRETCREDITOS CRE
            ON SAC.CD_OPERACIONSAC = CRE.CR_OPERACIONSAC
            WHERE   SAC.CD_ESTADOAFECOPE = 'ENV'
            AND   NVL(SAC.CD_ESTADOPROCESO, 'SSP') = 'SSP'
            AND   SAC.CD_FECHACARGA = AI_FECHACARGA;    


        CURSOR C_TOTALAPROCESAR IS
            SELECT COUNT(1) APROCESAR 
            FROM PQ_OWNER.CRE_CREDITOSDEBITOSAC_T SAC
            WHERE SAC.CD_ESTADOAFECOPE = 'ENV'
            AND   NVL(SAC.CD_ESTADOPROCESO, 'SSP') = 'SSP'
            AND   SAC.CD_FECHACARGA = AI_FECHACARGA;            
        
        
        TYPE T_CRE_CREDITOSDEBITO IS TABLE OF C_CREDITOSDEBITOSAC%ROWTYPE INDEX BY PLS_INTEGER;
        L_CREDITOSDEBITO          T_CRE_CREDITOSDEBITO;
        
        TYPE T_TOTALAPROCESAR     IS TABLE OF C_TOTALAPROCESAR%ROWTYPE INDEX BY PLS_INTEGER;
        L_TOTALAPROCESAR          T_TOTALAPROCESAR;

        L_CRE_CREDITOSDEBITOSAC_T      T_CRE_CREDITOSDEBITOSAC_T;
        R_KSCRETBITPRO                IESS_OWNER.KSCRETBITPRO%ROWTYPE;
        X_SALIREJECUCION               EXCEPTION;
    BEGIN

        SYS.DBMS_APPLICATION_INFO.SET_MODULE (
        MODULE_NAME   => 'CRE_EXCLUSIONESCES_P',
        ACTION_NAME   => 'EXCLUYE LAS OPERACIONES QUE NO SE DEBEN CONSIDERAR EN EL PROCESO');

        R_KSCRETBITPRO.CODPRO         := K_CODPRO;
        R_KSCRETBITPRO.FECPRO         := SYSDATE;
        R_KSCRETBITPRO.OBSERV         := '2.1 INICIO PROCEDIMIENTO CRE_EXCLUSIONESCES_P';
        IESS_OWNER.HLCREKPROGEN.PROREGBITPRO (AICCODPRO => R_KSCRETBITPRO.CODPRO, AICOBSERV => R_KSCRETBITPRO.OBSERV);        


        --BITACORA REGISTROS A PROCESAR
        OPEN C_TOTALAPROCESAR;
            FETCH C_TOTALAPROCESAR BULK COLLECT INTO L_TOTALAPROCESAR; 
            
            IF L_TOTALAPROCESAR(1).APROCESAR = 0 THEN
                R_KSCRETBITPRO.OBSERV := '2.1 NO EXISTEN REGISTROS PARA PROCESAR';
                IESS_OWNER.HLCREKPROGEN.PROREGBITPRO (AICCODPRO => R_KSCRETBITPRO.CODPRO, AICOBSERV => R_KSCRETBITPRO.OBSERV);
                RAISE X_SALIREJECUCION;
            END IF;
        CLOSE C_TOTALAPROCESAR;


        R_KSCRETBITPRO.OBSERV := '2.1 NUMERO TOTAL DE REGISTROS A PROCESAR: ' || L_TOTALAPROCESAR(1).APROCESAR;
        IESS_OWNER.HLCREKPROGEN.PROREGBITPRO (AICCODPRO => R_KSCRETBITPRO.CODPRO, AICOBSERV => R_KSCRETBITPRO.OBSERV);

        
        --VALIDA TODA OBTIENE INFORMACION
        OPEN C_CREDITOSDEBITOSAC;
        
        <<FOR_LOOP_CREDITOS>>
        LOOP
        
            FETCH C_CREDITOSDEBITOSAC BULK COLLECT INTO L_CREDITOSDEBITO LIMIT K_LIMITEBULKCOLLECT; 
            
            --VALIDA Y OBTIENE INFORMACION POR BLOQUES
            L_IDX := L_CREDITOSDEBITO.FIRST();
            
            <<FOR_LOOP_VALIDA>>
            WHILE L_IDX IS NOT NULL LOOP
        
                L_TIENEIDTRANSACCION:= NULL;
                L_TIENETRANSACCION  := NULL;
                L_ESFALLECIDO       := NULL;
                L_ESTADOAFECOPE     := NULL;
                L_ESTADOPROCESO        := NULL;
                L_OBSERVACION       := NULL;
                
                --DISPONIBLE EN FONDOS DE RESERVA
                <<DISPONIBLEFRS>>
                BEGIN
                    SELECT SUM(NVL(VALORCAPITALDISPONIBLE,0))
                    INTO L_VALORFONRESDISPONIBLE
                    FROM FRO.APORTES_PFR2
                    WHERE CEDULA = L_CREDITOSDEBITO(L_IDX).CD_NUMAFI
                    AND VALORCAPITALDISPONIBLE > 0;
                EXCEPTION
                WHEN NO_DATA_FOUND THEN
                    L_VALORFONRESDISPONIBLE := 0;        
                WHEN TOO_MANY_ROWS THEN
                    L_VALORFONRESDISPONIBLE := 0;    
                WHEN OTHERS THEN
                    L_VALORFONRESDISPONIBLE := 0;
                END DISPONIBLEFRS;
                
                --DISPONIBLE EN CESANTIAS
                <<DISPONIBLEFCE>>
                BEGIN
                    SELECT SALTOT
                    INTO L_VALORCESDISPONIBLE
                    FROM IESS_OWNER.KSAFITCESANTIAS
                    WHERE CEDULA = L_CREDITOSDEBITO(L_IDX).CD_NUMAFI;
                EXCEPTION
                WHEN NO_DATA_FOUND THEN
                    L_VALORCESDISPONIBLE := 0;        
                WHEN TOO_MANY_ROWS THEN
                    L_VALORCESDISPONIBLE := 0;    
                WHEN OTHERS THEN
                    L_VALORCESDISPONIBLE := 0;
                END DISPONIBLEFCE;

                --VALORES INICIALES COMPROMETIDOS EN FONDOS DE RESERVA  CESANTIAS
                <<COMPROMETIDO>>
                BEGIN
                    SELECT NVL(VALCOMCESHL,0), NVL(VALCOMFONRES,0)
                    INTO L_VALCOMCESHL, L_VALCOMFONRES
                    FROM IESS_OWNER.THLCRT_GARANTIAS
                    WHERE CODPRECLA = L_CREDITOSDEBITO(L_IDX).CODPRECLA
                    AND   ORDPREAFI = L_CREDITOSDEBITO(L_IDX).ORDPREAFI
                    AND   CODPRETIP = L_CREDITOSDEBITO(L_IDX).CODPRETIP
                    AND   NUMPREAFI = L_CREDITOSDEBITO(L_IDX).NUMPREAFI;
                EXCEPTION
                WHEN NO_DATA_FOUND THEN
                    L_VALCOMCESHL  := 0;
                    L_VALCOMFONRES := 0;     
                WHEN TOO_MANY_ROWS THEN
                    L_VALCOMCESHL  := 0;
                    L_VALCOMFONRES := 0;                
                WHEN OTHERS THEN
                    L_VALCOMCESHL  := 0;
                    L_VALCOMFONRES := 0;
                END COMPROMETIDO;

                --FECHA DE CREDITO RESOLUCION 144
                IF L_OBSERVACION IS NULL AND L_CREDITOSDEBITO(L_IDX).FECPREAFI < TO_DATE('01/08/2007','FXDD/MM/YYYY') THEN
                    L_OBSERVACION := 'DA-07 LA OPERACION CORRESPONDE A LA RESOLUCION CD 144';
                END IF;

                --TIPOS DE PRESTAMOS
                IF L_OBSERVACION IS NULL AND L_CREDITOSDEBITO(L_IDX).CODPRECLA NOT IN (20,22) THEN
                    L_OBSERVACION := 'DA-11 LA OPERACION NO CORRESPONDE A LOS TIPOS 20, 22';
                END IF;
    
                --LOS MUERTITOS
                IF L_OBSERVACION IS NULL AND L_CREDITOSDEBITO(L_IDX).CD_ESTADOPROCESO IS NULL THEN    
                    <<ESFALLECIDO>>
                    BEGIN
                        SELECT FECDEFPER
                        INTO L_ESFALLECIDO
                        FROM IESS_OWNER.KSPCOTREGCIV
                        WHERE CEDIDEUSU = L_CREDITOSDEBITO(L_IDX).NUMAFI;
                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                        L_ESFALLECIDO := NULL;    
                    WHEN TOO_MANY_ROWS THEN
                        L_ESFALLECIDO := NULL;                      
                    WHEN OTHERS THEN
                        L_ESFALLECIDO := NULL;
                    END ESFALLECIDO;
                    
                    --ESTOS REGISTROS VIENEN DE SEGURO DE SALDOS. ESTAN FALLECIDOS.
                    --L_CREDITOSDEBITO(I).CD_ESTADOPROCESO = 'SSP' 
                    IF L_ESFALLECIDO IS NOT NULL THEN
                        L_OBSERVACION := 'DA-06 EL AFILIADO SE ENCUENTRA FALLECIDO';
                    END IF;
                END IF;
            
                --DIAS EN MORA
                IF L_OBSERVACION IS NULL AND L_CREDITOSDEBITO(L_IDX).CD_DIASMORASAC < G_DIASENMORA THEN
                    L_OBSERVACION := 'DA-08 LA OPERACION POSEE DIAS EN MORA MENOR A LO ESTABLECIDO';
                END IF;

                --TRANSACCIONES EN TRANSITO QUE POSEE LA OPERACION
                IF L_OBSERVACION IS NULL THEN
                    <<TIENETRANSITO>>
                    BEGIN
                        SELECT R.TR_IDTIPOTRANSACCION, R.TR_IDTRANSACCION
                        INTO L_TIENEIDTRANSACCION, L_TIENETRANSACCION
                        FROM IESS_OWNER.REC_TRANSACCION_TBL R
                        WHERE R.TR_IDGAF = L_CREDITOSDEBITO(L_IDX).CD_OPERACIONSAC
                        AND   R.TR_ESTADO IN ('EMI','REC','DUP','SRV')  
                        AND   R.TR_IDTIPOTRANSACCION IN (14, 15, 16, 17, 18, 19, 21, 26, 28, 29, 30, 32, 33, 34)
                        AND   ROWNUM = 1;
                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                        L_TIENEIDTRANSACCION := NULL;
                        L_TIENETRANSACCION   := NULL; 
                    WHEN TOO_MANY_ROWS THEN
                        L_TIENEIDTRANSACCION := NULL;
                        L_TIENETRANSACCION   := NULL;                   
                    WHEN OTHERS THEN
                        L_TIENEIDTRANSACCION := NULL;
                        L_TIENETRANSACCION   := NULL;
                    END TIENETRANSITO;
                
                    IF L_TIENEIDTRANSACCION IS NOT NULL THEN
                        L_OBSERVACION := 'DA-05 POSEE UNA TRANSACCION EN TRANSITO. TIPO: '|| 
                                        L_TIENEIDTRANSACCION||' NUM: '||L_TIENETRANSACCION;
                    END IF;        
                END IF;    
      
                --SI LA OPERACION POSEE DEBITOS EN ESTADO AFECTADO
                IF L_OBSERVACION IS NULL THEN
                    <<TIENEDEBITO>>
                    BEGIN
                        SELECT R.TR_IDTIPOTRANSACCION, R.TR_IDTRANSACCION
                        INTO L_TIENEIDTRANSACCION, L_TIENETRANSACCION
                        FROM IESS_OWNER.REC_TRANSACCION_TBL R
                        WHERE R.TR_IDGAF = L_CREDITOSDEBITO(L_IDX).CD_OPERACIONSAC
                        AND   R.TR_ESTADO = 'AFE'  
                        AND   R.TR_IDTIPOTRANSACCION IN (19,28,32,33)
                        AND   ROWNUM = 1;
                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN    
                        L_TIENEIDTRANSACCION := NULL;
                        L_TIENETRANSACCION   := NULL;
                    WHEN TOO_MANY_ROWS THEN    
                        L_TIENEIDTRANSACCION := NULL;
                        L_TIENETRANSACCION   := NULL;                    
                    WHEN OTHERS THEN
                        L_TIENEIDTRANSACCION := NULL;
                        L_TIENETRANSACCION   := NULL;
                    END TIENEDEBITO;

                    IF L_TIENEIDTRANSACCION IS NOT NULL THEN
                        L_OBSERVACION := 'DA-10 POSEE UNA TRANSACCION DE DEBITO AFECTADA. TIPO: '|| 
                                        L_TIENEIDTRANSACCION||' NUM: '||L_TIENETRANSACCION;
                    END IF;
                END IF;    
            
                IF L_OBSERVACION IS NULL AND L_CREDITOSDEBITO(L_IDX).NUMAFI <> L_CREDITOSDEBITO(L_IDX).CD_NUMAFI THEN
                    L_OBSERVACION := 'DA-14 LA CEDULA DE LA OPERACION NO CORRESPONDE CON LA CEDULA DEL CREDITO';
                END IF;

                IF L_OBSERVACION IS NULL AND L_CREDITOSDEBITO(L_IDX).CODESTPRE <> K_VIG THEN 
                    L_OBSERVACION := 'DA-09 LA OPERACION NO SE ENCUENTRA EN ESTADO VIGENTE.';
                END IF;    

                IF L_OBSERVACION IS NOT NULL THEN 
                    L_ESTADOAFECOPE := 'REC';
                    L_ESTADOPROCESO := 'NDE';
                END IF;            
            
                L_CRE_CREDITOSDEBITOSAC_T(L_IDX).CD_VALORFONRESDISPONIBLE     := NVL(L_VALORFONRESDISPONIBLE,0);
                L_CRE_CREDITOSDEBITOSAC_T(L_IDX).CD_VALORCESDISPONIBLE        := NVL(L_VALORCESDISPONIBLE,0);
                L_CRE_CREDITOSDEBITOSAC_T(L_IDX).CD_VALORCESCOMPROMETIDO     := NVL(L_VALCOMCESHL,0);
                L_CRE_CREDITOSDEBITOSAC_T(L_IDX).CD_VALORFONRESCOMPROMETIDO := NVL(L_VALCOMFONRES,0);
                L_CRE_CREDITOSDEBITOSAC_T(L_IDX).CD_ESTADOAFECOPE             := L_ESTADOAFECOPE;
                L_CRE_CREDITOSDEBITOSAC_T(L_IDX).CD_OBSERVACION             := NVL(L_OBSERVACION, '-');
                L_CRE_CREDITOSDEBITOSAC_T(L_IDX).CD_ESTADOPROCESO             := L_ESTADOPROCESO;
                L_CRE_CREDITOSDEBITOSAC_T(L_IDX).CD_FECHAFALLECIMIENTO         := L_ESFALLECIDO;
                L_CRE_CREDITOSDEBITOSAC_T(L_IDX).CD_IDREGISTRO                 := L_CREDITOSDEBITO(L_IDX).CD_IDREGISTRO;
                
                L_IDX := L_CREDITOSDEBITO.NEXT(L_IDX);
            
            END LOOP FOR_LOOP_VALIDA;


            --ACTUALIZA LOS REGISTROS VALIDADOS POR BLOQUES
            CRE_ACTUALIZADEBIOSSAC_P(AI_CRE_CREDITOSDEBITOSAC_T => L_CRE_CREDITOSDEBITOSAC_T, AO_ERROR => AO_ERROR, AO_MENSAJEERROR => AO_MENSAJEERROR);
            IF AO_ERROR = '0' THEN
                R_KSCRETBITPRO.OBSERV := '2.1 BLOQUE NO PUDO SER ALMACENADO.';
                IESS_OWNER.HLCREKPROGEN.PROREGBITPRO (AICCODPRO => R_KSCRETBITPRO.CODPRO, AICOBSERV => R_KSCRETBITPRO.OBSERV);
            ELSE
                R_KSCRETBITPRO.OBSERV := '2.1 BLOQUE ALMACENADO CORRECTAMENTE.';
                IESS_OWNER.HLCREKPROGEN.PROREGBITPRO (AICCODPRO => R_KSCRETBITPRO.CODPRO, AICOBSERV => R_KSCRETBITPRO.OBSERV);
            END IF;
            
        
            --BITACORAS
            L_PROCESADOS := L_PROCESADOS + L_CREDITOSDEBITO.COUNT;
            R_KSCRETBITPRO.OBSERV := '2.1 ' || L_PROCESADOS || ' REGISTROS PROCESADOS DE: ' || L_TOTALAPROCESAR(1).APROCESAR;
            IESS_OWNER.HLCREKPROGEN.PROREGBITPRO (AICCODPRO => R_KSCRETBITPRO.CODPRO, AICOBSERV => R_KSCRETBITPRO.OBSERV);

            
            --ELIMINA LOS REGISTROS DEL ARREGLO POR BLOQUES
            L_CRE_CREDITOSDEBITOSAC_T.DELETE;
            L_CREDITOSDEBITO.DELETE;
            
            
            EXIT FOR_LOOP_CREDITOS WHEN C_CREDITOSDEBITOSAC%NOTFOUND;  
            
        END LOOP FOR_LOOP_CREDITOS;
        
        CLOSE C_CREDITOSDEBITOSAC;
 
 
        --BITACORA REGISTROS PROCESADOS
        R_KSCRETBITPRO.OBSERV := '2.1 NUMERO TOTAL DE REGISTROS PROCESADOS: ' || L_PROCESADOS;
        IESS_OWNER.HLCREKPROGEN.PROREGBITPRO (AICCODPRO => R_KSCRETBITPRO.CODPRO, AICOBSERV => R_KSCRETBITPRO.OBSERV);

        
        AO_ERROR := '1';
        AO_MENSAJEERROR := '2.1 FIN PROCEDIMIENTO CRE_EXCLUSIONESCES_P';
        
        R_KSCRETBITPRO.OBSERV := AO_MENSAJEERROR;
        IESS_OWNER.HLCREKPROGEN.PROREGBITPRO (AICCODPRO => R_KSCRETBITPRO.CODPRO, AICOBSERV => R_KSCRETBITPRO.OBSERV);
        
        SYS.DBMS_APPLICATION_INFO.SET_MODULE (NULL, NULL);    
        
    EXCEPTION
    WHEN X_SALIREJECUCION THEN
        AO_ERROR := '1';
        AO_MENSAJEERROR := '2.1 FIN PROCEDIMIENTO CRE_EXCLUSIONESCES_P';
        
        R_KSCRETBITPRO.OBSERV := AO_MENSAJEERROR;
        IESS_OWNER.HLCREKPROGEN.PROREGBITPRO (AICCODPRO => R_KSCRETBITPRO.CODPRO, AICOBSERV => R_KSCRETBITPRO.OBSERV);
        
        SYS.DBMS_APPLICATION_INFO.SET_MODULE (NULL, NULL);    
        
    WHEN OTHERS THEN
        AO_ERROR := '0';
        AO_MENSAJEERROR := SUBSTR('2.1 ERROR CRE_EXCLUSIONESCES_P: ' || SQLERRM, 1, 1024);

        R_KSCRETBITPRO.OBSERV := AO_MENSAJEERROR;
        IESS_OWNER.HLCREKPROGEN.PROREGBITPRO (AICCODPRO => R_KSCRETBITPRO.CODPRO, AICOBSERV => R_KSCRETBITPRO.OBSERV);
        
        SYS.DBMS_APPLICATION_INFO.SET_MODULE (NULL, NULL);
        
    END CRE_EXCLUSIONESCES_P;


    PROCEDURE CRE_VALIDAEXCLUSIONESCES_P (
        AO_ERROR          IN OUT VARCHAR2,
        AO_MENSAJEERROR    IN OUT VARCHAR2)
    IS
        R_KSCRETBITPRO        IESS_OWNER.KSCRETBITPRO%ROWTYPE;
        X_SALIREJECUCION    EXCEPTION;
    BEGIN

        SYS.DBMS_APPLICATION_INFO.SET_MODULE (
        MODULE_NAME   => 'CRE_VALIDAEXCLUSIONESCES_P',
        ACTION_NAME   => 'EJECUCION DEL PROCESO DE EXCLUSIONES CESANTIAS');
        
        R_KSCRETBITPRO.CODPRO         := K_CODPRO;
        R_KSCRETBITPRO.FECPRO         := SYSDATE;
        R_KSCRETBITPRO.OBSERV         := '2 INICIO PROCEDIMIENTO CRE_VALIDAEXCLUSIONESCES_P';
        IESS_OWNER.HLCREKPROGEN.PROREGBITPRO (AICCODPRO => R_KSCRETBITPRO.CODPRO, AICOBSERV => R_KSCRETBITPRO.OBSERV);
        
        <<EJECUCION>>
        BEGIN

            CRE_EXCLUSIONESCES_P(
                    AI_FECHACARGA => G_FECHACARGA, 
                    AO_ERROR => AO_ERROR, 
                    AO_MENSAJEERROR => AO_MENSAJEERROR
            );
            
            IF AO_ERROR = '0'
            THEN
                RAISE X_SALIREJECUCION;
            ELSE
                AO_ERROR := '1';
                AO_MENSAJEERROR := '2 FIN PROCEDIMIENTO CRE_VALIDAEXCLUSIONESCES_P';
                
                R_KSCRETBITPRO.OBSERV := AO_MENSAJEERROR;
                IESS_OWNER.HLCREKPROGEN.PROREGBITPRO (AICCODPRO => R_KSCRETBITPRO.CODPRO, AICOBSERV => R_KSCRETBITPRO.OBSERV);    

                --CAMBIA BANDERA DE EJECUCION EXITOSA
                UPDATE PQ_OWNER.CRE_DETCATALOGOPQ_TBL
                SET DP_VALNUMDETCATALOGO = 1
                WHERE DP_CODDETCATALOGO = '2EJECES'
                AND DP_VALCARDETCATALOGO = 'CRE_VALIDAEXCLUSIONESCES_P'
                AND DP_VALNUMDETCATALOGO = 0
                AND DP_VALCARDETCATALOGO IS NOT NULL
                AND DP_ESTADODETCATALOGO = 'A'
                AND DP_TIPVALDETCATALOGO = 'V';                        
                COMMIT;
            END IF;
            
        END EJECUCION;
        
        SYS.DBMS_APPLICATION_INFO.SET_MODULE (NULL, NULL);
        
    EXCEPTION
    WHEN X_SALIREJECUCION THEN
        R_KSCRETBITPRO.OBSERV := SUBSTR('2 ERROR CRE_VALIDAEXCLUSIONESCES_P: ' || AO_MENSAJEERROR, 1, 1024);
        IESS_OWNER.HLCREKPROGEN.PROREGBITPRO (AICCODPRO => R_KSCRETBITPRO.CODPRO, AICOBSERV => R_KSCRETBITPRO.OBSERV);
        
        SYS.DBMS_APPLICATION_INFO.SET_MODULE (NULL, NULL);
        
    WHEN OTHERS
    THEN
        AO_ERROR := '0';
        AO_MENSAJEERROR := SUBSTR('2 ERROR CRE_VALIDAEXCLUSIONESCES_P: ' || SQLERRM, 1, 1024);

        R_KSCRETBITPRO.OBSERV := AO_MENSAJEERROR;
        IESS_OWNER.HLCREKPROGEN.PROREGBITPRO (AICCODPRO => R_KSCRETBITPRO.CODPRO, AICOBSERV => R_KSCRETBITPRO.OBSERV);
        
        SYS.DBMS_APPLICATION_INFO.SET_MODULE (NULL, NULL);
         
    END CRE_VALIDAEXCLUSIONESCES_P;



    PROCEDURE CRE_VALIDAEXCLUSIONESDEB_P (
        AO_ERROR          IN OUT VARCHAR2,
        AO_MENSAJEERROR    IN OUT VARCHAR2)
    IS
        R_KSCRETBITPRO        IESS_OWNER.KSCRETBITPRO%ROWTYPE;
        X_SALIREJECUCION    EXCEPTION;
    BEGIN

        SYS.DBMS_APPLICATION_INFO.SET_MODULE (
        MODULE_NAME   => 'CRE_VALIDAEXCLUSIONESDEB_P',
        ACTION_NAME   => 'EJECUCION DEL PROCESO DE EXCLUSIONES DEBITO AUTOMATICO');

        R_KSCRETBITPRO.CODPRO         := K_CODPRO;
        R_KSCRETBITPRO.FECPRO         := SYSDATE;
        R_KSCRETBITPRO.OBSERV         := '4 INICIO PROCEDIMIENTO CRE_VALIDAEXCLUSIONESDEB_P';
        IESS_OWNER.HLCREKPROGEN.PROREGBITPRO (AICCODPRO => R_KSCRETBITPRO.CODPRO, AICOBSERV => R_KSCRETBITPRO.OBSERV);
        
        <<EJECUCION>>
        BEGIN

            R_KSCRETBITPRO.OBSERV := '4 PROCESO DE EXCLUSIONES DEBITO. FECHA CARGA: ' || G_FECHACARGA;
            IESS_OWNER.HLCREKPROGEN.PROREGBITPRO (AICCODPRO => R_KSCRETBITPRO.CODPRO, AICOBSERV => R_KSCRETBITPRO.OBSERV);    
            
            CRE_EXCLUSIONESDEB_P(AI_FECHACARGA => G_FECHACARGA, AO_ERROR => AO_ERROR, AO_MENSAJEERROR => AO_MENSAJEERROR); 
        
            IF AO_ERROR = '0'
            THEN
                RAISE X_SALIREJECUCION;        
            ELSE
                AO_ERROR := '1';
                AO_MENSAJEERROR := '4 FIN PROCEDIMIENTO CRE_VALIDAEXCLUSIONESDEB_P';
                
                R_KSCRETBITPRO.OBSERV := AO_MENSAJEERROR;
                IESS_OWNER.HLCREKPROGEN.PROREGBITPRO (AICCODPRO => R_KSCRETBITPRO.CODPRO, AICOBSERV => R_KSCRETBITPRO.OBSERV);    

                --CAMBIA BANDERA DE EJECUCION EXITOSA
                UPDATE PQ_OWNER.CRE_DETCATALOGOPQ_TBL
                SET DP_VALNUMDETCATALOGO = 1
                WHERE DP_CODDETCATALOGO = '1EJEDEB'
                AND DP_VALCARDETCATALOGO = 'CRE_VALIDAEXCLUSIONESDEB_P'
                AND DP_VALNUMDETCATALOGO = 0
                AND DP_VALCARDETCATALOGO IS NOT NULL
                AND DP_ESTADODETCATALOGO = 'A'
                AND DP_TIPVALDETCATALOGO = 'V';                        
                COMMIT;
            END IF;
            
        END EJECUCION;
        
        SYS.DBMS_APPLICATION_INFO.SET_MODULE (NULL, NULL);    
        
    EXCEPTION
    WHEN X_SALIREJECUCION THEN
        R_KSCRETBITPRO.OBSERV := SUBSTR('4 ERROR CRE_VALIDAEXCLUSIONESDEB_P: ' || AO_MENSAJEERROR, 1, 1024);
        IESS_OWNER.HLCREKPROGEN.PROREGBITPRO (AICCODPRO => R_KSCRETBITPRO.CODPRO, AICOBSERV => R_KSCRETBITPRO.OBSERV);
        
        SYS.DBMS_APPLICATION_INFO.SET_MODULE (NULL, NULL);
        
    WHEN OTHERS
    THEN

         AO_ERROR := '0';
         AO_MENSAJEERROR := '4 ERROR CRE_VALIDAEXCLUSIONESDEB_P: ' || SQLERRM;
         SYS.DBMS_APPLICATION_INFO.SET_MODULE (NULL, NULL);
         
    END CRE_VALIDAEXCLUSIONESDEB_P;




---------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------    
---------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------    



    
    PROCEDURE CRE_ARCHIVOCESANTIA_P (
        AI_NOMBREARCHIVO    IN  VARCHAR2,
        AO_NUMEROLINEAS        OUT PLS_INTEGER,
        AO_ERROR            OUT VARCHAR2,
        AO_MENSAJEERROR       OUT VARCHAR2
    )
    IS

        CURSOR C_BITACORAS IS
                SELECT AC_NUMAFI, TRIM(AC_OBSERVACION) AC_OBSERVACION, AC_ESTADO
                FROM PQ_OWNER.CRE_ACTUALIZACESANTIAS_TBL
                WHERE AC_TIPO IS NOT NULL;

            
        TYPE T_BITACORAS IS TABLE OF C_BITACORAS%ROWTYPE INDEX BY PLS_INTEGER;
        L_BITACORAS  T_BITACORAS;
        
        L_OBSERVACION       PQ_OWNER.CES_BITCUENTAINDIVIDUAL_TBL.EC_MENSAJERROR%TYPE;
        L_LINEAARCHIVO        VARCHAR2 (4500);
        L_IDX                PLS_INTEGER;
        
        R_KSCRETBITPRO        IESS_OWNER.KSCRETBITPRO%ROWTYPE;
        L_MANEJAARCHIVO     UTL_FILE.FILE_TYPE;

        K_CABECERA           CONSTANT VARCHAR2 (20) := 'CEDULA  OBSERVACION';
    
        X_CREARARCHIVO        EXCEPTION;
        X_CERRARARCHIVO        EXCEPTION;
        X_ESCRIBIRARCHIVO    EXCEPTION;    
        
    BEGIN

        SYS.DBMS_APPLICATION_INFO.SET_MODULE (
        MODULE_NAME   => 'CRE_ARCHIVOCESANTIA_P',
        ACTION_NAME   => 'CREA EL ARCHIVO DE NOVEDADES EN LA EJECUCION DE LA ACTUALIZACION DE CESANTIAS');
        
        AO_NUMEROLINEAS                := 0;
        R_KSCRETBITPRO.FECPRO         := SYSDATE;
        R_KSCRETBITPRO.CODPRO         := K_CODPRO;
        R_KSCRETBITPRO.OBSERV         := '3.1.2 INICIO PROCEDIMIENTO CRE_ARCHIVOCESANTIA_P';
        IESS_OWNER.HLCREKPROGEN.PROREGBITPRO (AICCODPRO => R_KSCRETBITPRO.CODPRO, AICOBSERV => R_KSCRETBITPRO.OBSERV);

        <<CREAARCHIVO>>
        BEGIN
            L_MANEJAARCHIVO := SYS.UTL_FILE.FOPEN (G_DIRECTORIO, AI_NOMBREARCHIVO, 'W');
        EXCEPTION
        WHEN OTHERS
        THEN
            RAISE X_CREARARCHIVO;
         END CREAARCHIVO;
        
        SYS.UTL_FILE.PUT_LINE (L_MANEJAARCHIVO, K_CABECERA);
        
        OPEN C_BITACORAS;
        
        <<FOR_LOOP_BITACORA>>
        LOOP
        
            FETCH C_BITACORAS BULK COLLECT INTO L_BITACORAS LIMIT K_LIMITEBULKCOLLECT;
            
            --VALIDA Y OBTIENE INFORMACION POR BLOQUES
            L_IDX := L_BITACORAS.FIRST();
 
            <<FOR_LOOP_VALIDA>>
            WHILE L_IDX IS NOT NULL LOOP
            
                IF L_BITACORAS(L_IDX).AC_ESTADO = 'ACT'
                THEN
                    L_OBSERVACION := L_BITACORAS(L_IDX).AC_NUMAFI || CHR (9) || L_BITACORAS(L_IDX).AC_OBSERVACION;
                END IF;

                IF L_BITACORAS(L_IDX).AC_ESTADO = 'NAC'
                THEN

                    <<BUSCABITACORA>>
                    BEGIN
                        SELECT SUBSTR(EC_NUMAFI || CHR (9) || NVL(EC_MENSAJERROR, '-'), 1, 3500)
                        INTO L_OBSERVACION
                        FROM PQ_OWNER.CES_BITCUENTAINDIVIDUAL_TBL
                        WHERE EC_NUMAFI = L_BITACORAS(L_IDX).AC_NUMAFI
                        AND TRUNC (EC_FECHAREG) = TRUNC (G_FECHACARGA)
                        AND ROWNUM = 1;
                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                        L_OBSERVACION := SUBSTR(L_BITACORAS(L_IDX).AC_NUMAFI || CHR (9) || L_BITACORAS(L_IDX).AC_OBSERVACION, 1, 3500);
                    WHEN TOO_MANY_ROWS THEN
                        L_OBSERVACION := SUBSTR(L_BITACORAS(L_IDX).AC_NUMAFI || CHR (9) || L_BITACORAS(L_IDX).AC_OBSERVACION, 1, 3500);
                    WHEN OTHERS THEN
                        L_OBSERVACION := SUBSTR(L_BITACORAS(L_IDX).AC_NUMAFI || CHR (9) || L_BITACORAS(L_IDX).AC_OBSERVACION, 1, 3500);
                    END BUSCABITACORA;
                
                END IF;
 
                <<ESCRIBEARCHIVO>>
                BEGIN

                    L_LINEAARCHIVO :=  L_OBSERVACION || CHR (13);
                    SYS.UTL_FILE.PUT_LINE (L_MANEJAARCHIVO, L_LINEAARCHIVO);
                    AO_NUMEROLINEAS := AO_NUMEROLINEAS + 1;

                EXCEPTION
                WHEN OTHERS
                THEN
                    RAISE X_ESCRIBIRARCHIVO;
                END ESCRIBEARCHIVO;
                
                L_IDX := L_BITACORAS.NEXT(L_IDX);
            
            END LOOP FOR_LOOP_VALIDA;
            
            EXIT FOR_LOOP_BITACORA WHEN C_BITACORAS%NOTFOUND;  
            
        END LOOP FOR_LOOP_BITACORA;
        
        CLOSE C_BITACORAS;


        <<CERRARARCHIVO>>
        BEGIN
            SYS.UTL_FILE.FCLOSE (L_MANEJAARCHIVO);
        EXCEPTION
        WHEN OTHERS
        THEN
            RAISE X_CERRARARCHIVO;
         END CERRARARCHIVO;
        
        R_KSCRETBITPRO.OBSERV := '3.1.2  NUMERO DE LINEAS EN EL ARCHIVO GENERADO: '|| AO_NUMEROLINEAS;
        IESS_OWNER.HLCREKPROGEN.PROREGBITPRO (AICCODPRO => R_KSCRETBITPRO.CODPRO, AICOBSERV => R_KSCRETBITPRO.OBSERV);
        
        AO_ERROR := '1';
        AO_MENSAJEERROR := '3.1.2 FIN PROCEDIMIENTO CRE_ARCHIVOCESANTIA_P';

        R_KSCRETBITPRO.OBSERV := AO_MENSAJEERROR;
        IESS_OWNER.HLCREKPROGEN.PROREGBITPRO (AICCODPRO => R_KSCRETBITPRO.CODPRO, AICOBSERV => R_KSCRETBITPRO.OBSERV);
        SYS.DBMS_APPLICATION_INFO.SET_MODULE (NULL, NULL);
        
    EXCEPTION
    WHEN X_ESCRIBIRARCHIVO
    THEN
        SYS.UTL_FILE.FCLOSE (L_MANEJAARCHIVO);
        AO_ERROR := '0';
        AO_MENSAJEERROR := SUBSTR('3.1.2 ERROR AL ESCRIBIR EL ARCHIVO: ' || SQLERRM, 1, 1024);
        
        R_KSCRETBITPRO.OBSERV := AO_MENSAJEERROR;
        IESS_OWNER.HLCREKPROGEN.PROREGBITPRO (AICCODPRO => R_KSCRETBITPRO.CODPRO, AICOBSERV => R_KSCRETBITPRO.OBSERV);
        SYS.DBMS_APPLICATION_INFO.SET_MODULE (NULL, NULL);
        
    WHEN X_CREARARCHIVO
    THEN
        AO_ERROR := '0';
        AO_MENSAJEERROR := SUBSTR('3.1.2 ERROR AL CREAR EL ARCHIVO: ' || SQLERRM, 1, 1024);
        
        R_KSCRETBITPRO.OBSERV := AO_MENSAJEERROR;
        IESS_OWNER.HLCREKPROGEN.PROREGBITPRO (AICCODPRO => R_KSCRETBITPRO.CODPRO, AICOBSERV => R_KSCRETBITPRO.OBSERV);
        SYS.DBMS_APPLICATION_INFO.SET_MODULE (NULL, NULL);
        
    WHEN X_CERRARARCHIVO
    THEN
        SYS.UTL_FILE.FCLOSE (L_MANEJAARCHIVO);
        AO_ERROR := '0';
        AO_MENSAJEERROR := SUBSTR('3.1.2 ERROR AL CERRAR EL ARCHIVO: ' || SQLERRM, 1, 1024);
        
        R_KSCRETBITPRO.OBSERV := AO_MENSAJEERROR;
        IESS_OWNER.HLCREKPROGEN.PROREGBITPRO (AICCODPRO => R_KSCRETBITPRO.CODPRO, AICOBSERV => R_KSCRETBITPRO.OBSERV);
        SYS.DBMS_APPLICATION_INFO.SET_MODULE (NULL, NULL);    
        
    WHEN OTHERS
    THEN
        IF SYS.UTL_FILE.IS_OPEN (L_MANEJAARCHIVO)
        THEN
            SYS.UTL_FILE.FCLOSE (L_MANEJAARCHIVO);
        END IF;
        
        AO_ERROR := '0';
        AO_MENSAJEERROR := SUBSTR('3.1.2 ERROR CRE_ARCHIVOCESANTIA_P: ' || SQLERRM, 1, 1024);
        
        R_KSCRETBITPRO.OBSERV := AO_MENSAJEERROR;
        IESS_OWNER.HLCREKPROGEN.PROREGBITPRO (AICCODPRO => R_KSCRETBITPRO.CODPRO, AICOBSERV => R_KSCRETBITPRO.OBSERV);
        SYS.DBMS_APPLICATION_INFO.SET_MODULE (NULL, NULL);
        
    END CRE_ARCHIVOCESANTIA_P;
    


    PROCEDURE CRE_GENERAACTUALIZA_P (
        AI_ACTUALIZACESANTIAS      IN T_ACTUALIZACESANTIAS,
        AI_FECHACARGA            IN DATE,
        AO_ERROR                  IN OUT VARCHAR2,
        AO_MENSAJEERROR            IN OUT VARCHAR2)
    IS
        L_IDX            PLS_INTEGER;
        R_KSCRETBITPRO    IESS_OWNER.KSCRETBITPRO%ROWTYPE;
    BEGIN

        SYS.DBMS_APPLICATION_INFO.SET_MODULE (
        MODULE_NAME   => 'CRE_GENERAACTUALIZA_P',
        ACTION_NAME   => 'ACTUALIZA LA TABLA QUE REGISTRA LAS CEDULAS ACTUALZIADAS');

        R_KSCRETBITPRO.FECPRO         := SYSDATE;
        R_KSCRETBITPRO.CODPRO         := K_CODPRO;
        
        <<FOR_LOOP_ACTUALIZA>>
        BEGIN
        
            FORALL L_I IN 1 .. AI_ACTUALIZACESANTIAS.COUNT SAVE EXCEPTIONS
            INSERT INTO PQ_OWNER.CRE_ACTUALIZACESANTIAS_TBL VALUES AI_ACTUALIZACESANTIAS(L_I);
            COMMIT;    

            <<ACTUALIZA>>                    
            FORALL L_J IN 1 .. AI_ACTUALIZACESANTIAS.COUNT SAVE EXCEPTIONS
                UPDATE PQ_OWNER.CRE_CREDITOSDEBITOSAC_T
                SET CD_OBSERVACION = NVL(AI_ACTUALIZACESANTIAS(L_J).AC_OBSERVACION, CD_OBSERVACION),
                CD_ESTADOPROCESO =     
                    CASE 
                    WHEN CD_VALORCESCOMPROMETIDO > 0 AND CD_VALORFONRESCOMPROMETIDO = 0 AND AI_ACTUALIZACESANTIAS(L_J).AC_ESTADO = 'NAC' THEN
                        K_ESTPRONO
                    ELSE
                        K_ESTPROSI
                    END
                WHERE CD_NUMAFI = AI_ACTUALIZACESANTIAS(L_J).AC_NUMAFI
                AND CD_ESTADOAFECOPE = 'ENV'
                AND NVL(CD_ESTADOPROCESO, 'SSP') = 'SSP'
                AND CD_FECHACARGA = AI_FECHACARGA;
                
            COMMIT;
            
        EXCEPTION
        WHEN OTHERS THEN
            <<FOR_LOOP_ERROR>>
            FOR L_J IN 1 .. SQL%BULK_EXCEPTIONS.COUNT LOOP
                L_IDX := SQL%BULK_EXCEPTIONS(L_J).ERROR_INDEX;
                
                R_KSCRETBITPRO.OBSERV := SUBSTR(AI_ACTUALIZACESANTIAS(L_IDX).AC_NUMAFI || SQLERRM(-SQL%BULK_EXCEPTIONS(L_J).ERROR_CODE), 1, 1024);
                IESS_OWNER.HLCREKPROGEN.PROREGBITPRO (AICCODPRO => R_KSCRETBITPRO.CODPRO, AICOBSERV => R_KSCRETBITPRO.OBSERV);
        
            END LOOP FOR_LOOP_ERROR;

            ROLLBACK;
            
        END FOR_LOOP_ACTUALIZA;
    
        AO_ERROR := '1';
        AO_MENSAJEERROR := 'BLOQUE ACTUALIZADO CORRECTAMMENTE.';
        SYS.DBMS_APPLICATION_INFO.SET_MODULE (NULL, NULL);
        
    EXCEPTION
    WHEN OTHERS
    THEN
         AO_ERROR := '0';
         AO_MENSAJEERROR := SUBSTR('ERROR CRE_GENERAACTUALIZA_P: ' || SQLERRM, 1, 1024);
         SYS.DBMS_APPLICATION_INFO.SET_MODULE (NULL, NULL);
         
    END CRE_GENERAACTUALIZA_P;



    PROCEDURE CRE_ACTUALIZACUENTACESANTIAS_P(
            AI_FECHACARGA          IN DATE,
            AO_ERROR             IN OUT VARCHAR2,
            AO_MENSAJEERROR      IN OUT VARCHAR2) 
    IS
        CURSOR C_TOTALAPROCESAR 
        IS
            SELECT COUNT(1) APROCESAR
            FROM (
                SELECT DISTINCT CD_NUMAFI
                FROM PQ_OWNER.CRE_CREDITOSDEBITOSAC_T DIV
                WHERE DIV.CD_ESTADOAFECOPE = 'ENV'
                AND   NVL(DIV.CD_ESTADOPROCESO, 'SSP') = 'SSP'
                AND   DIV.CD_FECHACARGA = TRUNC(AI_FECHACARGA)
            );    
        
        
    
        CURSOR C_CEDULASACTUALIZA 
        IS
            SELECT CD_NUMAFI, COUNT(1) NUMERO
            FROM PQ_OWNER.CRE_CREDITOSDEBITOSAC_T DIV
            WHERE DIV.CD_ESTADOAFECOPE = 'ENV'
            AND   NVL(DIV.CD_ESTADOPROCESO, 'SSP') = 'SSP'
            AND   DIV.CD_FECHACARGA = TRUNC(AI_FECHACARGA)
            GROUP BY CD_NUMAFI;    


        TYPE T_TOTALAPROCESAR     IS TABLE OF C_TOTALAPROCESAR%ROWTYPE INDEX BY PLS_INTEGER;
        L_TOTALAPROCESAR          T_TOTALAPROCESAR;

    
        TYPE T_CEDULASACTUALIZA IS TABLE OF C_CEDULASACTUALIZA%ROWTYPE INDEX BY PLS_INTEGER;
        L_CEDULASACTUALIZA      T_CEDULASACTUALIZA;
        
        L_ACTUALIZACESANTIAS      T_ACTUALIZACESANTIAS;
        R_KSCRETBITPRO            IESS_OWNER.KSCRETBITPRO%ROWTYPE;
        L_SECUENCIAL             PQ_OWNER.CRE_ACTUALIZACESANTIAS_TBL.AC_SECUENCIAL%TYPE;    
        L_IDX                    PLS_INTEGER := 0;
        L_PROCESADOS            PLS_INTEGER := 0;
        
        X_SALIREJECUCION           EXCEPTION;
        
    BEGIN
    
        SYS.DBMS_APPLICATION_INFO.SET_MODULE (
        MODULE_NAME   => 'CRE_ACTUALIZACUENTACESANTIAS_P',
        ACTION_NAME   => 'EJECUTA LA ACTUALIZACION CESANTIAS');
        
        R_KSCRETBITPRO.FECPRO         := SYSDATE;
        R_KSCRETBITPRO.CODPRO         := K_CODPRO;
        R_KSCRETBITPRO.OBSERV         := '3.1.1 INICIO PROCEDIMIENTO CRE_ACTUALIZACUENTACESANTIAS_P';
        IESS_OWNER.HLCREKPROGEN.PROREGBITPRO (AICCODPRO => R_KSCRETBITPRO.CODPRO, AICOBSERV => R_KSCRETBITPRO.OBSERV);


        --BITACORA REGISTROS A PROCESAR
        OPEN C_TOTALAPROCESAR;
            FETCH C_TOTALAPROCESAR BULK COLLECT INTO L_TOTALAPROCESAR; 
            
            IF L_TOTALAPROCESAR(1).APROCESAR = 0 THEN
                R_KSCRETBITPRO.OBSERV := '3.1.1 NO EXISTEN REGISTROS PARA PROCESAR';
                IESS_OWNER.HLCREKPROGEN.PROREGBITPRO (AICCODPRO => R_KSCRETBITPRO.CODPRO, AICOBSERV => R_KSCRETBITPRO.OBSERV);
                RAISE X_SALIREJECUCION;
            END IF;
        CLOSE C_TOTALAPROCESAR;


        R_KSCRETBITPRO.OBSERV := '3.1.1 NUMERO TOTAL DE REGISTROS POR ACTUALIZAR: ' || L_TOTALAPROCESAR(1).APROCESAR;
        IESS_OWNER.HLCREKPROGEN.PROREGBITPRO (AICCODPRO => R_KSCRETBITPRO.CODPRO, AICOBSERV => R_KSCRETBITPRO.OBSERV);

            
        OPEN C_CEDULASACTUALIZA;

        <<FOR_LOOP_BITACORA>>
        LOOP
        
            FETCH C_CEDULASACTUALIZA BULK COLLECT INTO L_CEDULASACTUALIZA LIMIT K_LIMITEBULKCOLLECT;
            
            --VALIDA Y OBTIENE INFORMACION POR BLOQUES
            L_IDX := L_CEDULASACTUALIZA.FIRST();
            
            <<FOR_LOOP_VALIDA>>
            WHILE L_IDX IS NOT NULL LOOP
                
                PQ_OWNER.CRE_PROCESOSDEBAUTOMATICO_PKG.CRE_ACTUALIZARCESANTIAS_PRC(
                            AI_NUMAFI        => L_CEDULASACTUALIZA(L_IDX).CD_NUMAFI,
                            AO_ERROR        => AO_ERROR,
                            AO_MENSAJEERROR    => AO_MENSAJEERROR);
                
                L_SECUENCIAL := NVL(L_SECUENCIAL, 0) + 1;
                L_ACTUALIZACESANTIAS(L_IDX).AC_SECUENCIAL             := L_SECUENCIAL;
                L_ACTUALIZACESANTIAS(L_IDX).AC_NUMAFI                 := L_CEDULASACTUALIZA(L_IDX).CD_NUMAFI;
                L_ACTUALIZACESANTIAS(L_IDX).AC_TIPO                 := 'MENSUAL';
                L_ACTUALIZACESANTIAS(L_IDX).AC_FECHAACTUALIZACION     := SYSDATE;
                
                IF AO_ERROR = '1' THEN
                    L_ACTUALIZACESANTIAS(L_IDX).AC_ESTADO := K_ACT;
                    L_ACTUALIZACESANTIAS(L_IDX).AC_OBSERVACION := 'CUENTA INDIVIDUAL CESANTIAS ACTUALIZADA';
                END IF;    
                
                IF AO_ERROR = '0' THEN
                    L_ACTUALIZACESANTIAS(L_IDX).AC_ESTADO := K_NAC;
                    L_ACTUALIZACESANTIAS(L_IDX).AC_OBSERVACION := TRIM(NVL(AO_MENSAJEERROR, 'ERROR EN LA ACTUALIZACION DE CTA. IND. CESANTIAS'));                
                END IF;
                
                L_IDX := L_CEDULASACTUALIZA.NEXT(L_IDX);
            
            END LOOP FOR_LOOP_VALIDA;


            --ACTUALIZA EN LA BASE DE DATOS LOS REGISTROS VALIDADOS POR BLOQUES
            CRE_GENERAACTUALIZA_P(
                        AI_ACTUALIZACESANTIAS     => L_ACTUALIZACESANTIAS, 
                        AI_FECHACARGA            => AI_FECHACARGA,
                        AO_ERROR                 => AO_ERROR, 
                        AO_MENSAJEERROR         => AO_MENSAJEERROR);
            IF AO_ERROR = '0' THEN
                R_KSCRETBITPRO.OBSERV := '3.1.1 BLOQUE NO PUDO SER ALMACENADO.';
                IESS_OWNER.HLCREKPROGEN.PROREGBITPRO (AICCODPRO => R_KSCRETBITPRO.CODPRO, AICOBSERV => R_KSCRETBITPRO.OBSERV);
            ELSE
                R_KSCRETBITPRO.OBSERV := '3.1.1 BLOQUE ALMACENADO CORRECTAMENTE.';
                IESS_OWNER.HLCREKPROGEN.PROREGBITPRO (AICCODPRO => R_KSCRETBITPRO.CODPRO, AICOBSERV => R_KSCRETBITPRO.OBSERV);
            END IF;


            --BITACORAS
            L_PROCESADOS := L_PROCESADOS + L_CEDULASACTUALIZA.COUNT;
            R_KSCRETBITPRO.OBSERV := '3.1.1 ' || L_PROCESADOS || ' REGISTROS ACTUALIZADOS DE: ' || L_TOTALAPROCESAR(1).APROCESAR;
            IESS_OWNER.HLCREKPROGEN.PROREGBITPRO (AICCODPRO => R_KSCRETBITPRO.CODPRO, AICOBSERV => R_KSCRETBITPRO.OBSERV);


            --ELIMINA LOS REGISTROS DEL ARREGLO POR BLOQUES
            L_ACTUALIZACESANTIAS.DELETE;
            L_CEDULASACTUALIZA.DELETE;
            
            
            EXIT FOR_LOOP_BITACORA WHEN C_CEDULASACTUALIZA%NOTFOUND;  
            
        END LOOP FOR_LOOP_BITACORA;

        CLOSE C_CEDULASACTUALIZA;

        --BITACORA REGISTROS PROCESADOS
        R_KSCRETBITPRO.OBSERV := '3.1.1 NUMERO TOTAL DE REGISTROS ACTUALIZADOS: ' || L_PROCESADOS;
        IESS_OWNER.HLCREKPROGEN.PROREGBITPRO (AICCODPRO => R_KSCRETBITPRO.CODPRO, AICOBSERV => R_KSCRETBITPRO.OBSERV);


        AO_ERROR := '1';
        AO_MENSAJEERROR := '3.1.1 FIN PROCEDIMIENTO CRE_ACTUALIZACUENTACESANTIAS_P';
        
        R_KSCRETBITPRO.OBSERV := AO_MENSAJEERROR;
        IESS_OWNER.HLCREKPROGEN.PROREGBITPRO (AICCODPRO => R_KSCRETBITPRO.CODPRO, AICOBSERV => R_KSCRETBITPRO.OBSERV);
        SYS.DBMS_APPLICATION_INFO.SET_MODULE (NULL, NULL);
        
    EXCEPTION
    WHEN X_SALIREJECUCION THEN
        AO_ERROR := '1';
        AO_MENSAJEERROR := '3.1.1 FIN PROCEDIMIENTO CRE_ACTUALIZACUENTACESANTIAS_P';
        
        R_KSCRETBITPRO.OBSERV := AO_MENSAJEERROR;
        IESS_OWNER.HLCREKPROGEN.PROREGBITPRO (AICCODPRO => R_KSCRETBITPRO.CODPRO, AICOBSERV => R_KSCRETBITPRO.OBSERV);
        SYS.DBMS_APPLICATION_INFO.SET_MODULE (NULL, NULL);    
    
    WHEN OTHERS THEN
        AO_ERROR := '0';
        AO_MENSAJEERROR := SUBSTR('3.1.1  ERROR CRE_ACTUALIZACUENTACESANTIAS_P ' || SQLERRM, 1, 1024);
        
        R_KSCRETBITPRO.OBSERV := AO_MENSAJEERROR;
        IESS_OWNER.HLCREKPROGEN.PROREGBITPRO (AICCODPRO => R_KSCRETBITPRO.CODPRO, AICOBSERV => R_KSCRETBITPRO.OBSERV);
        SYS.DBMS_APPLICATION_INFO.SET_MODULE (NULL, NULL);
        
    END CRE_ACTUALIZACUENTACESANTIAS_P;

    

    PROCEDURE CRE_EJECUTAACTUALIZACION_P(
            AI_FECHACARGA      IN DATE,
            AO_ERROR        OUT VARCHAR2,
            AO_MENSAJEERROR    OUT VARCHAR2) 
    IS

        CURSOR C_RESUMENPROCESADOS
        IS
            SELECT 'REGISTROS PROCESADOS: ' MENSAJE, COUNT(1) VALOR
            FROM PQ_OWNER.CRE_ACTUALIZACESANTIAS_TBL
            WHERE AC_ESTADO = 'ACT'
            UNION ALL
            SELECT 'REGISTROS NO PROCESADOS: ' MENSAJE, COUNT(1) VALOR
            FROM PQ_OWNER.CRE_ACTUALIZACESANTIAS_TBL
            WHERE AC_ESTADO = 'NAC'
            UNION ALL
            SELECT 'TOTAL REGISTROS: ' MENSAJE, COUNT(1) VALOR
            FROM PQ_OWNER.CRE_ACTUALIZACESANTIAS_TBL;

        TYPE T_RESUMENPROCESADOS IS TABLE OF C_RESUMENPROCESADOS%ROWTYPE INDEX BY PLS_INTEGER;
        L_RESUMENPROCESADOS      T_RESUMENPROCESADOS;
        
        R_KSCRETBITPRO      IESS_OWNER.KSCRETBITPRO%ROWTYPE;
        L_INICIOPROCESO     DATE;
        L_FINPROCESO        DATE;
        L_OBSERVACIONBIT       VARCHAR2(200);
        L_DURACIONPROCESO   VARCHAR2(200);
        L_NOMBREARCHIVO        VARCHAR2(200);
        L_EMAILMENSAJE      VARCHAR2(2000);
        L_NUMEROLINEAS        PLS_INTEGER;
          
    BEGIN
    
        SYS.DBMS_APPLICATION_INFO.SET_MODULE (
        MODULE_NAME   => 'C_RESUMENPROCESADOS',
        ACTION_NAME   => 'PROCESO ORQUESTADOR QUE EJECUTA LA ACTUALIZACION DE CESANTIAS');
        
        L_INICIOPROCESO                := SYSDATE;
        R_KSCRETBITPRO.CODPRO         := K_CODPRO;
        R_KSCRETBITPRO.FECPRO         := SYSDATE;
        R_KSCRETBITPRO.OBSERV         := '3.1 INICIO PROCEDIMIENTO CRE_EJECUTAACTUALIZACION_P';
        IESS_OWNER.HLCREKPROGEN.PROREGBITPRO(AICCODPRO => R_KSCRETBITPRO.CODPRO, AICOBSERV => R_KSCRETBITPRO.OBSERV);
        
        
        --EXECUTE IMMEDIATE 'TRUNCATE TABLE PQ_OWNER.CRE_ACTUALIZACESANTIAS_TBL';
        DELETE FROM PQ_OWNER.CRE_ACTUALIZACESANTIAS_TBL;
        COMMIT;
        
        
        --ACTUALIZACION DE CESANTIAS
        --3.1.1
        CRE_ACTUALIZACUENTACESANTIAS_P(
                AI_FECHACARGA          => AI_FECHACARGA,
                AO_ERROR             => AO_ERROR,
                AO_MENSAJEERROR      => AO_MENSAJEERROR
        );
        
        
        --CREACION DEL ARCHIVO
        --3.1.2
        L_NOMBREARCHIVO := 'ACTUALIZACION CTAS IND DE CESANTIAS_' || TO_CHAR (AI_FECHACARGA, 'FXDDMMYYYY') || '.TXT';
        CRE_ARCHIVOCESANTIA_P (
                AI_NOMBREARCHIVO    => L_NOMBREARCHIVO,
                AO_NUMEROLINEAS        => L_NUMEROLINEAS,
                AO_ERROR              => AO_ERROR,
                AO_MENSAJEERROR        => AO_MENSAJEERROR);
        IF AO_ERROR = '0' THEN
            L_OBSERVACIONBIT := 'NOTA: ERROR AL GENERAR EL ARCHIVO CON NOVEDADES EN EL PROCESO DE DEBITO AUTOMATICO';
        END IF;


        --ENVIO DE MAILS
        --3.1.3
        R_KSCRETBITPRO.OBSERV := '3.1.3 INICIO PROCEDIMIENTO CRE_ENVIOMAILS_PRC';
        IESS_OWNER.HLCREKPROGEN.PROREGBITPRO (AICCODPRO => R_KSCRETBITPRO.CODPRO, AICOBSERV => R_KSCRETBITPRO.OBSERV);
        
        
        ----CONSULTA REGISTROS PROCESADOS
        OPEN C_RESUMENPROCESADOS;
            FETCH C_RESUMENPROCESADOS BULK COLLECT INTO L_RESUMENPROCESADOS; 
        CLOSE C_RESUMENPROCESADOS;        

        
        ----ENVIO DE NOTIFICACION
        L_FINPROCESO := SYSDATE;
        L_DURACIONPROCESO := IESS_OWNER.GEN_PROCESOSGENERICOS_PKG.GEN_DURACIONPROCESO_FUN(AIFECHAINI => L_INICIOPROCESO, AIFECHAFIN => L_FINPROCESO);
        
        L_EMAILMENSAJE := K_ENTER || K_ENTER
                    || 'RESULTADO EJECUCION DE ACTUALIZACION CEASNTIAS PQ'
                    || K_ENTER 
                    || K_ENTER;
            
        <<RESUMENPROCESADOS>>                    
        FOR INDX IN 1 .. L_RESUMENPROCESADOS.COUNT
        LOOP
            L_EMAILMENSAJE := L_EMAILMENSAJE || L_RESUMENPROCESADOS(INDX).MENSAJE || ' '|| L_RESUMENPROCESADOS(INDX).VALOR     || K_ENTER;
        END LOOP RESUMENPROCESADOS;
        
        L_EMAILMENSAJE := L_EMAILMENSAJE || K_ENTER || K_ENTER
                    || 'TIEMPOS DE EJECUCION '
                    || K_ENTER
                    || L_DURACIONPROCESO
                    || K_ENTER
                    || K_ENTER
                    || L_OBSERVACIONBIT;

        IESS_OWNER.CRE_PROCESOSGENERICOS_PKG.CRE_ENVIOMAILS_PRC(
                    AIUSERENVMAIL        => G_REMITENTE,
                    AICSUBJECT             => 'RESULTADO EJECUCION DE ACTUALIZACION CESANTIAS PQ ' || TO_CHAR (AI_FECHACARGA, 'FXDDMMYYYY') ,
                    AICMENERRCAB         => NULL,
                    AINCODPRO             => NULL,
                    AICNOMARC             => G_RUTADIRECTORIO || '/' || L_NOMBREARCHIVO,
                    AICMENERRCUE         => NULL,
                    AICDESCRIPCION        => L_EMAILMENSAJE,
                    AINCANTIDADOBS         => L_NUMEROLINEAS,
                    AOCMENERR             => AO_ERROR,
                    AOCRESPRO             => AO_MENSAJEERROR,
                    AITIPRES             => NULL,
                    AICTYPEMAIL         => NULL,
                    AI_DESTINATARIOS     => G_DESTINATARIOS);

        IF AO_ERROR = '0' THEN
            R_KSCRETBITPRO.OBSERV := SUBSTR('3.1.3 FIN PROCEDIMIENTO CRE_ENVIOMAILS_PRC. ERROR: ' || AO_MENSAJEERROR, 1, 1024);
            IESS_OWNER.HLCREKPROGEN.PROREGBITPRO (AICCODPRO => R_KSCRETBITPRO.CODPRO, AICOBSERV => R_KSCRETBITPRO.OBSERV);
        ELSE
            R_KSCRETBITPRO.OBSERV := '3.1.3 FIN PROCEDIMIENTO CRE_ENVIOMAILS_PRC';
            IESS_OWNER.HLCREKPROGEN.PROREGBITPRO (AICCODPRO => R_KSCRETBITPRO.CODPRO, AICOBSERV => R_KSCRETBITPRO.OBSERV);        
        END IF;
        
        AO_ERROR := '1';
        AO_MENSAJEERROR := '3.1 FIN PROCEDIMIENTO CRE_EJECUTAACTUALIZACION_P';
        
        R_KSCRETBITPRO.OBSERV := AO_MENSAJEERROR;
        IESS_OWNER.HLCREKPROGEN.PROREGBITPRO(AICCODPRO => R_KSCRETBITPRO.CODPRO, AICOBSERV => R_KSCRETBITPRO.OBSERV);
        SYS.DBMS_APPLICATION_INFO.SET_MODULE (NULL, NULL);    
        
    EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        AO_ERROR := '0';
        AO_MENSAJEERROR := SUBSTR('3.1 ERROR CRE_EJECUTAACTUALIZACION_P: ' || SQLERRM, 1, 1024);

        R_KSCRETBITPRO.OBSERV := AO_MENSAJEERROR;
        IESS_OWNER.HLCREKPROGEN.PROREGBITPRO(AICCODPRO => R_KSCRETBITPRO.CODPRO, AICOBSERV => R_KSCRETBITPRO.OBSERV);
        SYS.DBMS_APPLICATION_INFO.SET_MODULE (NULL, NULL);    
        
    END CRE_EJECUTAACTUALIZACION_P;



    PROCEDURE CRE_VALIDAEJECUTACES_P (
        AI_FECHACARGA          IN DATE,
        AO_ERROR              IN OUT VARCHAR2,
        AO_MENSAJEERROR        IN OUT VARCHAR2)
    IS
        L_DIAHOY            IESS_OWNER.CRE_DETCATALOGOPQ_TBL.DP_VALNUMDETCATALOGO%TYPE;
        L_VALNUMDETCATALOGO    IESS_OWNER.CRE_DETCATALOGOPQ_TBL.DP_VALNUMDETCATALOGO%TYPE;
        L_VALCARDETCATALOGO    IESS_OWNER.CRE_DETCATALOGOPQ_TBL.DP_VALCARDETCATALOGO%TYPE;

        R_KSCRETBITPRO        IESS_OWNER.KSCRETBITPRO%ROWTYPE;
        
        X_EJECUTACESANTIA    EXCEPTION;
        
    BEGIN

        SYS.DBMS_APPLICATION_INFO.SET_MODULE (
        MODULE_NAME   => 'CRE_VALIDAEJECUTACES_P',
        ACTION_NAME   => 'VALIDA QUE LOS PARAMETROS SEAN CORRECTOS PARA LA EJECUCION');

        R_KSCRETBITPRO.CODPRO         := K_CODPRO;
        R_KSCRETBITPRO.FECPRO         := SYSDATE;
        R_KSCRETBITPRO.OBSERV         := '3 INICIO PROCEDIMIENTO CRE_VALIDAEJECUTACES_P';
        IESS_OWNER.HLCREKPROGEN.PROREGBITPRO(AICCODPRO => R_KSCRETBITPRO.CODPRO, AICOBSERV => R_KSCRETBITPRO.OBSERV);
        
        
        <<VALIDA>>
        BEGIN    
        
            --VALIDA QUE LA FECHA DE ACTUALIZACION DE CESANTIAS ESTE PARAMETRIZADA PARA EL SYSDATE DE EJECUCION
            IF AI_FECHACARGA IS NULL THEN
                L_DIAHOY := TO_NUMBER (TO_CHAR (SYSDATE, 'DD'),'9999','NLS_NUMERIC_CHARACTERS=''.,''');
                CRE_CONSULTACATALOGO_P (AI_CODCATALOGO => 'PROCACTCES', AI_CODDETCATALOGO => 'ACTCESDEB', 
                            AO_VALNUMDETCATALOGO => L_VALNUMDETCATALOGO, AO_VALCARDETCATALOGO => L_VALCARDETCATALOGO, AO_VALFECDETCATALOGO => G_FECHACARGA,
                            AO_ERROR => AO_ERROR, AO_MENSAJEERROR => AO_MENSAJEERROR);
                IF AO_ERROR = '0' THEN
                    G_FECHACARGA := TRUNC(SYSDATE);
                ELSE
                    IF NVL(L_VALNUMDETCATALOGO, 0) <> L_DIAHOY THEN
                        RAISE X_EJECUTACESANTIA;
                    END IF;
                END IF;    
            ELSE
                G_FECHACARGA := AI_FECHACARGA;
            END IF;
    
        END VALIDA;
        

        --INVOCAR EJECUCION CESANTIAS
        --------------------------
        <<EJECUTA>>
        BEGIN
            
            CRE_EJECUTAACTUALIZACION_P (
                        AI_FECHACARGA    => G_FECHACARGA,
                        AO_ERROR        => AO_ERROR,
                        AO_MENSAJEERROR    => AO_MENSAJEERROR);
            
            IF AO_ERROR = '0'
            THEN
                R_KSCRETBITPRO.OBSERV := AO_MENSAJEERROR;
                IESS_OWNER.HLCREKPROGEN.PROREGBITPRO (AICCODPRO => R_KSCRETBITPRO.CODPRO, AICOBSERV => R_KSCRETBITPRO.OBSERV);            
            ELSE
                AO_ERROR := '1';
                AO_MENSAJEERROR := '3 FIN PROCEDIMIENTO CRE_VALIDAEJECUTACES_P';
                
                R_KSCRETBITPRO.OBSERV := AO_MENSAJEERROR;
                IESS_OWNER.HLCREKPROGEN.PROREGBITPRO (AICCODPRO => R_KSCRETBITPRO.CODPRO, AICOBSERV => R_KSCRETBITPRO.OBSERV);    

                --CAMBIA BANDERA DE EJECUCION EXITOSA
                UPDATE PQ_OWNER.CRE_DETCATALOGOPQ_TBL
                SET DP_VALNUMDETCATALOGO = 1
                WHERE DP_CODDETCATALOGO = '3EJECES'
                AND DP_VALCARDETCATALOGO = 'CRE_VALIDAEJECUTACES_P'
                AND DP_VALNUMDETCATALOGO = 0
                AND DP_VALCARDETCATALOGO IS NOT NULL
                AND DP_ESTADODETCATALOGO = 'A'
                AND DP_TIPVALDETCATALOGO = 'V';                        
                COMMIT;
            END IF;
            
        END EJECUTA;
        
        SYS.DBMS_APPLICATION_INFO.SET_MODULE (NULL, NULL);    
        
    EXCEPTION
    WHEN X_EJECUTACESANTIA
    THEN
        AO_ERROR := '0';
        AO_MENSAJEERROR := '3 HOY NO ES DIA DE EJECUCION DEL PROCESO DE ACTUALIZACION DE CESANTIAS.';

        R_KSCRETBITPRO.OBSERV := AO_MENSAJEERROR;
        IESS_OWNER.HLCREKPROGEN.PROREGBITPRO (AICCODPRO => R_KSCRETBITPRO.CODPRO, AICOBSERV => R_KSCRETBITPRO.OBSERV);

        R_KSCRETBITPRO.OBSERV         := '3 FIN PROCEDIMIENTO CRE_VALIDAEJECUTACES_P';
        IESS_OWNER.HLCREKPROGEN.PROREGBITPRO(AICCODPRO => R_KSCRETBITPRO.CODPRO, AICOBSERV => R_KSCRETBITPRO.OBSERV);
        
        SYS.DBMS_APPLICATION_INFO.SET_MODULE (NULL, NULL);    
        
    WHEN OTHERS
    THEN
        AO_ERROR := '0';
        AO_MENSAJEERROR := SUBSTR('3 ERROR CRE_VALIDAEJECUTACES_P: ' || SQLERRM, 1, 1024);
         
        R_KSCRETBITPRO.OBSERV := AO_MENSAJEERROR;
        IESS_OWNER.HLCREKPROGEN.PROREGBITPRO (AICCODPRO => R_KSCRETBITPRO.CODPRO, AICOBSERV => R_KSCRETBITPRO.OBSERV);

        R_KSCRETBITPRO.OBSERV         := '3 FIN PROCEDIMIENTO CRE_VALIDAEJECUTACES_P';
        IESS_OWNER.HLCREKPROGEN.PROREGBITPRO(AICCODPRO => R_KSCRETBITPRO.CODPRO, AICOBSERV => R_KSCRETBITPRO.OBSERV);
        
        SYS.DBMS_APPLICATION_INFO.SET_MODULE (NULL, NULL);
         
    END CRE_VALIDAEJECUTACES_P;
    


---------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------    
---------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------    




    PROCEDURE CRE_ACTUALIZACESANTIAS_P (
        AI_NUMAFI              IN    IESS_OWNER.KSAFITCESANTIAS.CEDULA%TYPE,
        AI_DISPONIBLECTAIND    IN     IESS_OWNER.KSAFITCESANTIAS.CESHISLAB%TYPE,
        AO_ERROR             OUT VARCHAR2,
        AO_MENSAJEERROR       OUT VARCHAR2)
    IS
        L_VALCOMCESHL         IESS_OWNER.THLCRT_GARANTIAS.VALCOMCESHL%TYPE;
        L_FECHACTUALIZACION    IESS_OWNER.CES_CUENTAINDIVIDUALCAB_TBL.CC_FECHAACTUALIZACION%TYPE;
        R_CESANTIA            IESS_OWNER.KSAFITCESANTIAS%ROWTYPE;
        
        X_SALIRPROCESO       EXCEPTION;
        
    BEGIN

        SYS.DBMS_APPLICATION_INFO.SET_MODULE (
        MODULE_NAME   => 'CRE_ACTUALIZACESANTIAS_P',
        ACTION_NAME   => 'ACTUALIZA EL VALOR DISPONIBLE EN LA TABLA DE CESANTIAS');

        L_VALCOMCESHL     := 0;
     
        <<BUSCACESANTIA>>
        BEGIN
            SELECT *
            INTO R_CESANTIA
            FROM IESS_OWNER.KSAFITCESANTIAS
            WHERE CEDULA = AI_NUMAFI;
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            R_CESANTIA := NULL;
        WHEN TOO_MANY_ROWS THEN
            R_CESANTIA := NULL;
        WHEN OTHERS THEN
            R_CESANTIA := NULL;
        END BUSCACESANTIA;
        
        <<VALORCOMPROMETIDOCEDULA>>
        BEGIN
            SELECT SUM(NVL(VALCOMCESHL, 0))
            INTO L_VALCOMCESHL
            FROM IESS_OWNER.THLCRT_GARANTIAS
            WHERE NUMAFI = AI_NUMAFI 
            AND BLOGARCES = 1;
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            L_VALCOMCESHL := 0;
        WHEN TOO_MANY_ROWS THEN
            L_VALCOMCESHL := 0;
        WHEN OTHERS THEN
            L_VALCOMCESHL := 0;
        END VALORCOMPROMETIDOCEDULA;
            
        IF R_CESANTIA.CEDULA IS NULL
        THEN
            R_CESANTIA.CEDULA      := AI_NUMAFI;
            R_CESANTIA.CESMINT     := 0;
            R_CESANTIA.VALCOM      := 0;
            R_CESANTIA.CESHISLAB   := AI_DISPONIBLECTAIND;
            R_CESANTIA.VALCOMHIS   := L_VALCOMCESHL;
            R_CESANTIA.SALTOT      := (AI_DISPONIBLECTAIND - L_VALCOMCESHL);
            R_CESANTIA.FECCAR      := SYSDATE;
            R_CESANTIA.ESTADO      := 0;
            R_CESANTIA.ESTACT      := 3;
            R_CESANTIA.BANDERA     := 1;
            R_CESANTIA.FECHASCAL   := NULL;
            R_CESANTIA.FECEJEPROACT:= SYSDATE;


            INSERT INTO IESS_OWNER.KSAFITCESANTIAS VALUES R_CESANTIA;
            
        ELSE

            --SELECCIONAMOS LA FECHA DE ACTUALIZACION O DE CREACION EXISTENTE EN CES_CUENTAINDIVIDUALCAB_TBL
            <<FECHAACTUALIZACION>>
            BEGIN        
                SELECT CASE
                    WHEN CC_FECHAACTUALIZACION IS NULL THEN CC_FECHACREACION
                    ELSE CC_FECHAACTUALIZACION
                    END
                    INTO L_FECHACTUALIZACION
                FROM IESS_OWNER.CES_CUENTAINDIVIDUALCAB_TBL
                WHERE CC_CEDULAID = AI_NUMAFI;
            EXCEPTION
            WHEN NO_DATA_FOUND THEN
                RAISE X_SALIRPROCESO;
            WHEN TOO_MANY_ROWS THEN
                RAISE X_SALIRPROCESO;
            WHEN OTHERS THEN
                RAISE X_SALIRPROCESO;
            END FECHAACTUALIZACION;
            
            UPDATE IESS_OWNER.KSAFITCESANTIAS
            SET CESHISLAB = AI_DISPONIBLECTAIND,
            VALCOMHIS = L_VALCOMCESHL,
            CESMINT = 0,
            FECEJEPROACT = SYSDATE,
            FECHASCAL = L_FECHACTUALIZACION
            WHERE CEDULA = AI_NUMAFI;


        END IF;
          
        AO_ERROR         := '1';
        AO_MENSAJEERROR := NULL;
        SYS.DBMS_APPLICATION_INFO.SET_MODULE (NULL, NULL);
            
            
    EXCEPTION
    WHEN X_SALIRPROCESO
    THEN
        AO_ERROR := '0';
        AO_MENSAJEERROR := 'NO TIENE CUENTA INDIVIDUAL.';

        SYS.DBMS_APPLICATION_INFO.SET_MODULE (NULL, NULL);
        
    WHEN OTHERS
    THEN
        AO_ERROR := '0';
        AO_MENSAJEERROR := SUBSTR (SQLERRM, 1, 200);

        SYS.DBMS_APPLICATION_INFO.SET_MODULE (NULL, NULL);
        
    END CRE_ACTUALIZACESANTIAS_P;



    PROCEDURE CRE_GENERACODIGOPROCESO_P (
        AI_CODPRO          IN     IESS_OWNER.HLPROTTIPOPE.CODPRO%TYPE,
        AI_CODESTPRO       IN     IESS_OWNER.HLPROTBITOPE.CODESTPRO%TYPE,
        AI_EXTARC          IN     IESS_OWNER.HLPROTBITOPE.EXTARC%TYPE,
        AI_NOMARC       IN     IESS_OWNER.HLPROTBITOPE.NOMARC%TYPE,
        AI_TIPOPE       IN     VARCHAR2,
        AI_NID             IN OUT IESS_OWNER.HLPROTBITOPE.ID%TYPE,
        AO_ERROR          IN OUT VARCHAR2,
        AO_MENSAJEERROR IN OUT VARCHAR2)
    IS

        PRAGMA AUTONOMOUS_TRANSACTION;
        L_NID  IESS_OWNER.HLPROTBITOPE.ID%TYPE;
    BEGIN
    
        SYS.DBMS_APPLICATION_INFO.SET_MODULE (
        MODULE_NAME   => 'CRE_GENERACODIGOPROCESO_P',
        ACTION_NAME   => 'GENERA CODIGO DE PROCESO PARA AUDITORIAS');
        
        IF AI_TIPOPE = 'I'
        THEN
    
            <<INSERTAREGISTRO>>
            BEGIN 
                
                L_NID := IESS_OWNER.HLPROSBITOPE.NEXTVAL;
                
                INSERT INTO IESS_OWNER.HLPROTBITOPE (ID,
                               CODPRO,
                               CODESTPRO,
                               EXTARC,
                               FECPRO)
                VALUES (L_NID,
                          AI_CODPRO,
                          AI_CODESTPRO,
                          AI_EXTARC,
                          SYSDATE);

                AI_NID := L_NID;
                
            EXCEPTION
            WHEN OTHERS
            THEN
            
                ROLLBACK;
                AO_MENSAJEERROR := 'ERROR AL INSERTAR CRE_GENERACODIGOPROCESO_P: ' || SUBSTR (SQLERRM, 1, 150);

                SELECT MAX(ID) + 1
                INTO L_NID
                FROM IESS_OWNER.HLPROTBITOPE;
                
                INSERT INTO IESS_OWNER.HLPROTBITOPE (ID,
                               CODPRO,
                               CODESTPRO,
                               EXTARC,
                               FECPRO)
                VALUES (L_NID,
                          AI_CODPRO,
                          AI_CODESTPRO,
                          AI_EXTARC,
                          SYSDATE);

                AI_NID := L_NID;
        
            END INSERTAREGISTRO;    
            
        ELSE
            UPDATE IESS_OWNER.HLPROTBITOPE
            SET NOMARC = AI_NOMARC, CODESTPRO = AI_CODESTPRO
            WHERE ID = AI_NID;
        END IF;

        COMMIT;

        AO_ERROR := '1';
        AO_MENSAJEERROR := NULL;
        SYS.DBMS_APPLICATION_INFO.SET_MODULE (NULL, NULL);    
        
    EXCEPTION
    WHEN OTHERS
    THEN
        ROLLBACK;
        AO_ERROR := '0';
        AO_MENSAJEERROR := 'ERROR INESPERADO CRE_GENERACODIGOPROCESO_P: ' || SUBSTR (SQLERRM, 1, 150);
        SYS.DBMS_APPLICATION_INFO.SET_MODULE (NULL, NULL);    
    
    END CRE_GENERACODIGOPROCESO_P;
    

    PROCEDURE CRE_NETEOCUENTAINDIVIDUAL_P (
        AI_NUMPREAFI      IN     IESS_OWNER.KSCRETCREDITOS.NUMPREAFI%TYPE,
        AI_ORDPREAFI      IN     IESS_OWNER.KSCRETCREDITOS.ORDPREAFI%TYPE,
        AI_CODPRETIP      IN     IESS_OWNER.KSCRETCREDITOS.CODPRETIP%TYPE,
        AI_CODPRECLA      IN     IESS_OWNER.KSCRETCREDITOS.CODPRECLA%TYPE,
        AI_NUMAFI         IN     FRO.FRSAFITSOLAFI.NUMAFI%TYPE,
        AI_CODSOLAFI      IN     FRO.FRSAFITSOLAFI.CODSOLAFI%TYPE,
        AI_CODTIPSOLAFI   IN     FRO.FRSAFITSOLAFI.CODTIPSOLAFI%TYPE,
        AI_VALORLIQUIDA   IN     FRO.FRSAFITSOLAFI.VALSOLAFI%TYPE,
        AI_OBSERVACION    IN     FRO.FRSAFITCRURESCTAIND.OBSERVACION%TYPE,
        AI_FECSOLAFI      IN     FRO.FRSAFITSOLAFI.FECPAGSOL%TYPE,
        AI_IMPOSICIONES   IN     VARCHAR2,
        AO_NETEO             OUT NUMBER,
        AO_ERROR            OUT VARCHAR2,
        AO_MENSAJEERROR     OUT VARCHAR2)
    IS

        L_INDICEINTERES               FRO.FRSAFITINDINTFONRES.INDICE%TYPE;
        L_INDICEGASTO                 IESS_OWNER.KSPCOTPOLCOR.VALNUMPOL%TYPE;        
        L_FECHARENDIMIENTO          FRO.FRSAFITINDINTFONRES.FECHARENDIMIENTO%TYPE;
        L_FECHAINICIORENDIMIENTOS    FRO.APORTES_PFR2.FECHAINICIORENDIMIENTOS%TYPE;                                                                  
        L_VALORSOLICITUD            FRO.FRSAFITSOLAFI.VALSOLAFI%TYPE;
        L_CAPITALCOMPROMETIDO          FRO.APORTES_PFR2.VALORSALDOCAPITAL%TYPE;
        
        L_INDICEGASTOAUX               IESS_OWNER.KSPCOTPOLCOR.VALNUMPOL%TYPE;
        L_INICIORENDIMIENTO         IESS_OWNER.KSPCOTPOLCOR.VALNUMPOL%TYPE;
        L_TIPVAL                      IESS_OWNER.KSPCOTPOLCOR.TIPVALPOL%TYPE;
        
        L_PRIMERAVEZ                   BOOLEAN := FALSE;
        L_IDX                        PLS_INTEGER := 0;
        L_EXISTEINTERES               PLS_INTEGER := 0;
        L_NUMSEQ                      PLS_INTEGER := 0;
        L_CRESPRO1                    PLS_INTEGER := 1;
        
        L_NETEO                        NUMBER (15, 8) := 0;--------REVISAR DOS DECIMALES---------
        L_TOTAL                        NUMBER (15, 2) := 0;
        L_CAPITAL                     NUMBER (15, 8) := 0;
        L_INTERES                     NUMBER (15, 8) := 0;
        L_GASTO                     NUMBER (15, 8) := 0;
        L_VALORLIQUIDACION            NUMBER (15, 8) := 0;
        L_CAPITALDIF                  NUMBER (15, 8) := 0;
        L_DIFERENCIAS               NUMBER (15, 8) := 0;

        R_REGCRURESCTAIND           FRO.FRSAFITCRURESCTAIND%ROWTYPE;

        -- PARA MANEJO DE EXCEPCINES
        X_ERRORINSERTCRUCES         EXCEPTION;
        X_ERRORINDICE               EXCEPTION;
        X_ERRORACTVALSOLCRUCES      EXCEPTION;
        X_ERROREXISTEPARAMINIREN    EXCEPTION;
        X_ERROREXISTEPARAM          EXCEPTION;
        X_ERRORGASTO                EXCEPTION;
        
        CURSOR C_APORTESDISPONIBLES IS
            SELECT A.CODIGOAPORTE
            ,A.CEDULA
            ,A.TIPOREGISTRO
            ,A.PERIODODESDE
            ,A.PERIODOHASTA
            ,A.SUCURSALSECCION
            ,A.TIPOPLANILLA
            ,A.TIPOPERIODO
            ,A.PERIODOANIOREAL
            ,A.PERIODOMES
            ,A.FECHACOMPROBANTE
            ,A.FECHAINICIORENDIMIENTOS
            ,A.RUCPATRONAL RUCPATRONAL
            ,NVL(A.VALORCAPITAL,0) VALORCAPITAL
            ,NVL(A.VALORCAPITALPAGADO,0) VALORCAPITALPAGADO
            ,NVL(A.VALORCOMPROMETIDOGARPQCAP,0) VALORCOMPROMETIDOGARPQCAP
            ,NVL(A.VALORCAPITALDISPONIBLE,0) VALORCAPITALDISPONIBLE
            ,NVL(A.VALORSALDOCAPITAL,0) VALORSALDOCAPITAL
            ,NVL(A.VALORCOMPROMETIDOFRCAPITAL,0) VALORCOMPROMETIDOFRCAPITAL
            FROM FRO.APORTES_PFR2 A
            WHERE A.CEDULA = AI_NUMAFI
            AND A.TIPOREGISTRO IN  (
                    SELECT D.DC_CODIGO 
                    FROM IESS_OWNER.PCO_DETALLE_CATALOGOS_TBL D 
                    WHERE D.CA_CATALOGO = 'FRTIPAPOFR' AND D.DC_ESTADO = 'A'
            )
            AND A.ESTADOBLOQUEO = 'N' 
            AND A.MARCADISPONIBLE = 'NP'
            ORDER BY TO_DATE(SUBSTR(A.FECHACOMPROBANTE,1,4) || '/' || SUBSTR(A.FECHACOMPROBANTE,5,2) || '/' || SUBSTR(A.FECHACOMPROBANTE,7,2),'FXYYYY/MM/DD'), A.PERIODODESDE, A.TIPOREGISTRO;
            
        TYPE T_APORTESDISPONIBLES IS TABLE OF C_APORTESDISPONIBLES%ROWTYPE INDEX BY PLS_INTEGER;
        L_APORTESDISPONIBLES  T_APORTESDISPONIBLES;
    
    BEGIN
    
        SYS.DBMS_APPLICATION_INFO.SET_MODULE (
        MODULE_NAME   => 'CRE_NETEOCUENTAINDIVIDUAL_P',
        ACTION_NAME   => 'REALIZA EL CALCULO DE LOS VALORES PARA AFECTAR CUENTA INDIVIDUAL DE FRS');

        L_VALORLIQUIDACION := AI_VALORLIQUIDA;

        --OBTENER EL PARAMETRO DEL GASTO ADMINISTRATIVO
        L_TIPVAL := NULL;
        L_INDICEGASTOAUX := 0;
        IESS_OWNER.KSPCOKPOLCOR.OBTVALNUMPOLCOR (AICCODPOL => 'FRGASADM', AONVALPOL => L_INDICEGASTOAUX, AOCTIPVAL => L_TIPVAL);
        IF L_INDICEGASTOAUX IS NULL AND L_TIPVAL IS NULL
        THEN
            RAISE X_ERROREXISTEPARAM;
        END IF;

        --OBTENER BANDERA PARA DEFINIR FECHA DE INICIO DE RENDIMIENTO PARA APORTES TIPO REL
        L_TIPVAL := NULL;
        L_INICIORENDIMIENTO := 0;
        IESS_OWNER.KSPCOKPOLCOR.OBTVALNUMPOLCOR (AICCODPOL => 'FRINIREN', AONVALPOL => L_INICIORENDIMIENTO, AOCTIPVAL => L_TIPVAL);
        IF L_INICIORENDIMIENTO IS NULL AND L_TIPVAL IS NULL
        THEN
            RAISE X_ERROREXISTEPARAMINIREN;
        END IF;

        OPEN C_APORTESDISPONIBLES;
        
        <<FOR_LOOP_CREDITOS>>
        LOOP
        
            FETCH C_APORTESDISPONIBLES BULK COLLECT INTO L_APORTESDISPONIBLES LIMIT K_LIMITEBULKCOLLECT; 
            
            
            <<FOR_LOOP_VALIDA>>
            FOR L_IDX IN 1 ..L_APORTESDISPONIBLES.COUNT LOOP
            
                <<CONTROLERRORES>>
                BEGIN

                    -- CALCULO LA FECHA DE RENDIMIENTO DE ACUERDO AL TIPO DE APORTE
                    IF L_APORTESDISPONIBLES(L_IDX).TIPOREGISTRO = 'APO'
                    THEN

                        L_FECHAINICIORENDIMIENTOS := SUBSTR(L_APORTESDISPONIBLES(L_IDX).FECHAINICIORENDIMIENTOS,1,4) 
                                                    || '/' || SUBSTR(L_APORTESDISPONIBLES(L_IDX).FECHAINICIORENDIMIENTOS,5,2) 
                                                    || '/' || SUBSTR(L_APORTESDISPONIBLES(L_IDX).FECHAINICIORENDIMIENTOS,7,2);
                        
                        L_FECHARENDIMIENTO := TO_DATE (L_FECHAINICIORENDIMIENTOS,'FXYYYY/MM/DD');

                    ELSIF L_APORTESDISPONIBLES(L_IDX).TIPOREGISTRO = 'REL' OR L_APORTESDISPONIBLES(L_IDX).TIPOREGISTRO = 'CAP'
                    THEN

                        IF L_INICIORENDIMIENTO = 1
                        THEN

                            L_FECHARENDIMIENTO := TO_DATE ('2007/11/01', 'FXYYYY/MM/DD');
                        ELSE

                            L_FECHAINICIORENDIMIENTOS := SUBSTR(L_APORTESDISPONIBLES(L_IDX).FECHAINICIORENDIMIENTOS,1,4) 
                                                        || '/' || SUBSTR(L_APORTESDISPONIBLES(L_IDX).FECHAINICIORENDIMIENTOS,5,2) 
                                                        || '/' || SUBSTR(L_APORTESDISPONIBLES(L_IDX).FECHAINICIORENDIMIENTOS,7,2);
                        
                            L_FECHARENDIMIENTO := TO_DATE (L_FECHAINICIORENDIMIENTOS,'FXYYYY/MM/DD');    
        
                        END IF;
                    ELSE

                        L_FECHAINICIORENDIMIENTOS := SUBSTR(L_APORTESDISPONIBLES(L_IDX).FECHACOMPROBANTE,1,4) 
                                                    || '/' || SUBSTR(L_APORTESDISPONIBLES(L_IDX).FECHACOMPROBANTE,5,2) 
                                                    || '/' || '01';
                                                    
                        L_FECHARENDIMIENTO := ADD_MONTHS (TO_DATE (L_FECHAINICIORENDIMIENTOS,'FXYYYY/MM/DD'), 1);

                    END IF;

                END CONTROLERRORES;        
                

                --LE. 26/07/2011
                L_CAPITAL := L_APORTESDISPONIBLES(L_IDX).VALORSALDOCAPITAL 
                            - L_APORTESDISPONIBLES(L_IDX).VALORCOMPROMETIDOFRCAPITAL 
                            - L_APORTESDISPONIBLES(L_IDX).VALORCOMPROMETIDOGARPQCAP;
                L_CAPITALCOMPROMETIDO := L_CAPITAL;
                    
                
                CONTINUE FOR_LOOP_VALIDA WHEN L_CAPITAL <= 0;
                
                --VALIDA SI EXISTE INTERESES EN LOS APORTES.
                L_EXISTEINTERES := FRO.FR_PROCESOSGENERICOS_PKG.FR_VALEXISTEINTERESAPORT_FUN (AINCODIGOAPORTE => L_APORTESDISPONIBLES(L_IDX).CODIGOAPORTE);

                IF NVL(L_EXISTEINTERES, 0) > 0
                THEN
                    L_INTERES         := 0;
                    L_GASTO         := 0;
                    L_INDICEINTERES    := 0;
                    L_INDICEGASTO     := 0;
                ELSE
                    L_INDICEGASTO     := L_INDICEGASTOAUX;
                        
                    --CALCULO DEL INDICE
                    FRO.FRSAFIKCARGOSPROCESO.CALCULARINTERESPORT2 (
                        AINFECHACORTE     => TRUNC (AI_FECSOLAFI),                             
                        AINFECHARENDIMIENTO => L_FECHARENDIMIENTO,
                        AINFECHACOMPROBANTE => L_APORTESDISPONIBLES(L_IDX).FECHACOMPROBANTE,
                        AOCINDICE           => L_INDICEINTERES,
                        AOCRESPRO           => L_CRESPRO1,
                        AOCMENERR           => AO_MENSAJEERROR);

                    IF L_CRESPRO1 = 0
                    THEN
                        RAISE X_ERRORINDICE;
                    END IF;
                    
                    L_INTERES := L_CAPITAL * L_INDICEINTERES;
                    L_GASTO := L_CAPITAL * L_INDICEGASTO;
                        
                    --CONDICIONES PARA EL CALCULO DEL GASTO ADMINISTRATIVO
                    IF L_INTERES < L_GASTO
                    THEN
                        L_GASTO := L_INTERES;
                    END IF;

                    IF L_INTERES = 0
                    THEN
                        L_GASTO := 0;
                    END IF;
                    
                END IF;
                        
                L_TOTAL := L_CAPITAL + L_INTERES - L_GASTO;

                IF NOT L_PRIMERAVEZ
                THEN
                    L_NETEO := L_VALORLIQUIDACION - L_TOTAL;
                    L_PRIMERAVEZ := TRUE;
                ELSE
                    L_NETEO := L_NETEO - L_TOTAL;
                END IF;
                    
                IF L_NETEO <= 0
                THEN
                    L_TOTAL := L_TOTAL - ABS (L_NETEO);
                    L_CAPITAL := L_TOTAL / (1 + L_INDICEINTERES - L_INDICEGASTO);
                    L_INTERES := L_CAPITAL * L_INDICEINTERES;
                    L_GASTO := L_CAPITAL * L_INDICEGASTO;
                    
                    --CONDICIONES PARA EL CALCULO DEL GASTO ADMINISTRATIVO
                    IF L_INTERES < L_GASTO
                    THEN
                        L_GASTO := L_INTERES;
                    END IF;

                    IF L_INTERES = 0
                    THEN
                        L_GASTO := 0;
                    END IF;
                    
                    IF L_APORTESDISPONIBLES(L_IDX).VALORCOMPROMETIDOGARPQCAP > 0 AND L_APORTESDISPONIBLES(L_IDX).VALORCOMPROMETIDOGARPQCAP > L_CAPITAL
                    THEN
                        L_CAPITALDIF := L_CAPITALCOMPROMETIDO - L_CAPITAL;
                    ELSE
                        L_CAPITALDIF := 0;
                    END IF;
            
                END IF;

                --CUADRAR LA DIFERENCIA EN DECIMAS POR MOTIVO DE LA APROXIMACION
                IF ROUND (L_TOTAL, 2) <> (  ROUND (L_CAPITAL, 2) + ROUND (L_INTERES, 2) - ROUND (L_GASTO, 2))
                THEN

                    L_DIFERENCIAS := ROUND (L_TOTAL, 2) - ROUND (L_CAPITAL, 2) - ROUND (L_INTERES, 2) + ROUND (L_GASTO, 2);
                    
                    L_CAPITAL := ROUND ((L_CAPITAL - L_DIFERENCIAS), 2);

                    L_GASTO := ABS (ROUND (L_TOTAL, 2) - ROUND (L_CAPITAL, 2) - ROUND (L_INTERES, 2));

                    IF ABS(L_GASTO) > 0
                    THEN
                        RAISE X_ERRORGASTO;
                    END IF;
                    
                END IF;

                --INSERTA INFORMACION DE CRUCE DE APORTES Y PQS DE FONDOS DE RESERVA.
                R_REGCRURESCTAIND.CODIGO := L_NUMSEQ;
                R_REGCRURESCTAIND.CODSEC := L_APORTESDISPONIBLES(L_IDX).CODIGOAPORTE;
                R_REGCRURESCTAIND.TIPO := L_APORTESDISPONIBLES(L_IDX).TIPOREGISTRO;
                R_REGCRURESCTAIND.CODSOLAFI := AI_CODSOLAFI;
                R_REGCRURESCTAIND.CODTIPSOLAFI := AI_CODTIPSOLAFI;
                R_REGCRURESCTAIND.NUMPREAFI := AI_NUMPREAFI;
                R_REGCRURESCTAIND.ORDPREAFI := AI_ORDPREAFI;
                R_REGCRURESCTAIND.CODPRETIP := AI_CODPRETIP;
                R_REGCRURESCTAIND.CODPRECLA := AI_CODPRECLA;
                R_REGCRURESCTAIND.RUCEMP := L_APORTESDISPONIBLES(L_IDX).RUCPATRONAL;
                R_REGCRURESCTAIND.CODSUC := L_APORTESDISPONIBLES(L_IDX).SUCURSALSECCION;
                R_REGCRURESCTAIND.CODTIPPLA := L_APORTESDISPONIBLES(L_IDX).TIPOPLANILLA;
                R_REGCRURESCTAIND.TIPPER := L_APORTESDISPONIBLES(L_IDX).TIPOPERIODO;
                R_REGCRURESCTAIND.ANIPER := L_APORTESDISPONIBLES(L_IDX).PERIODOANIOREAL;
                R_REGCRURESCTAIND.MESPER := L_APORTESDISPONIBLES(L_IDX).PERIODOMES;
                R_REGCRURESCTAIND.SECPLA := NULL;
                R_REGCRURESCTAIND.NUMAFI := AI_NUMAFI;
                R_REGCRURESCTAIND.CAPITALCOMPROMETIDO := ROUND (L_CAPITAL, 2);
                R_REGCRURESCTAIND.INTERES := ROUND (L_INTERES, 2);
                R_REGCRURESCTAIND.TOTAL := ROUND (L_TOTAL, 2);
                R_REGCRURESCTAIND.VALDIS := L_NETEO;
                R_REGCRURESCTAIND.FECPAGSOL := NULL;
                R_REGCRURESCTAIND.ESTSOLAFI := 'PAG';
                R_REGCRURESCTAIND.FECPRO := SYSDATE;
                R_REGCRURESCTAIND.OBSERVACION := AI_OBSERVACION;
                R_REGCRURESCTAIND.VALSOL := 0;
                R_REGCRURESCTAIND.GASADM := L_GASTO;
                R_REGCRURESCTAIND.FECREGSOL := TRUNC (AI_FECSOLAFI);
                R_REGCRURESCTAIND.ESTPROCTAIND := 'REG';
                R_REGCRURESCTAIND.FECPAGCOMPAG := TO_DATE (L_APORTESDISPONIBLES(L_IDX).FECHACOMPROBANTE, 'FXYYYYMMDD');
                R_REGCRURESCTAIND.CODCAR := NULL;
                R_REGCRURESCTAIND.FECPAGCAR := NULL;
                R_REGCRURESCTAIND.ESTCAR := NULL;

                --PROCESO QUE INSERTA INFORMACION DE CRUCE DE APORTES Y PQS DE FONDOS DE RESERVA.
                FRO.FR_PROCESOSGENERICOS_PKG.FR_INSREGCRURESCTAIND_PRC (
                    AIRREGCRURESCTAIND => R_REGCRURESCTAIND,
                    AOVARNUMSEQ => L_NUMSEQ,
                    AOCRESPRO => AO_ERROR,
                    AOCMENERR => AO_MENSAJEERROR);

                IF AO_ERROR = '0'
                THEN
                    RAISE X_ERRORINSERTCRUCES;
                END IF;

                --INSERTAMOS CALCULO DE LA DIFERENCIA DEL CAPITAL COMPROMETIDO ULTIMO REG.
                IF L_CAPITALDIF > 0
                THEN
                    R_REGCRURESCTAIND.CODIGO := L_NUMSEQ;
                    R_REGCRURESCTAIND.CODSEC := L_APORTESDISPONIBLES(L_IDX).CODIGOAPORTE;
                    R_REGCRURESCTAIND.TIPO := L_APORTESDISPONIBLES(L_IDX).TIPOREGISTRO;
                    R_REGCRURESCTAIND.CODSOLAFI := NULL;
                    R_REGCRURESCTAIND.CODTIPSOLAFI := NULL;
                    R_REGCRURESCTAIND.NUMPREAFI := AI_NUMPREAFI;
                    R_REGCRURESCTAIND.ORDPREAFI := AI_ORDPREAFI;
                    R_REGCRURESCTAIND.CODPRETIP := AI_CODPRETIP;
                    R_REGCRURESCTAIND.CODPRECLA := AI_CODPRECLA;
                    R_REGCRURESCTAIND.RUCEMP := NULL;
                    R_REGCRURESCTAIND.CODSUC := NULL;
                    R_REGCRURESCTAIND.CODTIPPLA := NULL;
                    R_REGCRURESCTAIND.TIPPER := NULL;
                    R_REGCRURESCTAIND.ANIPER := NULL;
                    R_REGCRURESCTAIND.MESPER := NULL;
                    R_REGCRURESCTAIND.SECPLA := NULL;
                    R_REGCRURESCTAIND.NUMAFI := AI_NUMAFI;
                    R_REGCRURESCTAIND.CAPITALCOMPROMETIDO := ROUND (L_CAPITALDIF, 2);
                    R_REGCRURESCTAIND.INTERES := 0;
                    R_REGCRURESCTAIND.TOTAL := 0;
                    R_REGCRURESCTAIND.VALDIS := 0;
                    R_REGCRURESCTAIND.FECPAGSOL := NULL;
                    R_REGCRURESCTAIND.ESTSOLAFI := NULL;
                    R_REGCRURESCTAIND.FECPRO := SYSDATE;
                    R_REGCRURESCTAIND.OBSERVACION := '*DEBITO AUTOMATICO: ' || ROUND (L_CAPITALDIF, 2);
                    R_REGCRURESCTAIND.VALSOL := NULL;
                    R_REGCRURESCTAIND.GASADM := NULL;
                    R_REGCRURESCTAIND.FECREGSOL := NULL;
                    R_REGCRURESCTAIND.ESTPROCTAIND := 'ACI'; 
                    R_REGCRURESCTAIND.FECPAGCOMPAG := NULL;
                    R_REGCRURESCTAIND.CODCAR := NULL;
                    R_REGCRURESCTAIND.FECPAGCAR := NULL;
                    R_REGCRURESCTAIND.ESTCAR := NULL;

                    --PROCESO QUE INSERTA INFORMACION DE CRUCE DE APORTES Y PQS DE FONDOS DE RESERVA.
                    FRO.FR_PROCESOSGENERICOS_PKG.FR_INSREGCRURESCTAIND_PRC (
                        AIRREGCRURESCTAIND => R_REGCRURESCTAIND,
                        AOVARNUMSEQ => L_NUMSEQ,
                        AOCRESPRO => AO_ERROR,
                        AOCMENERR => AO_MENSAJEERROR);

                    IF AO_ERROR = '0'
                    THEN
                        RAISE X_ERRORINSERTCRUCES;
                    END IF;
                    
                END IF;

                EXIT FOR_LOOP_CREDITOS WHEN L_NETEO <= 0;

            END LOOP FOR_LOOP_VALIDA;
        
            EXIT FOR_LOOP_CREDITOS WHEN C_APORTESDISPONIBLES%NOTFOUND;  
            
        END LOOP FOR_LOOP_CREDITOS;
        
        CLOSE C_APORTESDISPONIBLES;

        AO_NETEO := NVL (L_NETEO, 0);

        --ACTUALIZAR LA SOLICITUD CON EL VALOR REAL COBRADO
        IF L_NETEO <= 0
        THEN
            L_VALORSOLICITUD := AI_VALORLIQUIDA;
        ELSE
            L_VALORSOLICITUD := AI_VALORLIQUIDA - NVL (L_NETEO, 0);
        END IF;
        
        
        --ACTUALIZO LA TABLA DE CRUCES CON EL VALOR DE LA SOLICITUD
        UPDATE FRO.FRSAFITCRURESCTAIND
        SET VALSOL = ROUND (L_VALORSOLICITUD, 2),
        VALDIS = ROUND (L_VALORSOLICITUD, 2)
        WHERE CODSOLAFI = AI_CODSOLAFI AND CODTIPSOLAFI = AI_CODTIPSOLAFI;

        IF SQL%NOTFOUND
        THEN
            RAISE X_ERRORACTVALSOLCRUCES;
        END IF;

        AO_ERROR := '1';
        AO_MENSAJEERROR := NULL;
        SYS.DBMS_APPLICATION_INFO.SET_MODULE (NULL, NULL);
        
    EXCEPTION
    WHEN X_ERRORGASTO
    THEN
        AO_MENSAJEERROR := 'SE GENERO UN VALOR PARA GASTO ADMINISTRATIVO: ';
        AO_ERROR := '0';
        SYS.DBMS_APPLICATION_INFO.SET_MODULE (NULL, NULL);
        
    WHEN X_ERRORINSERTCRUCES
    THEN
        AO_MENSAJEERROR := 'NO SE PUDO INGRESAR REGISTRO EN CRUCE CON EL APORTE: ';
        AO_ERROR := '0';
        SYS.DBMS_APPLICATION_INFO.SET_MODULE (NULL, NULL);
        
    WHEN X_ERRORINDICE
    THEN
        AO_MENSAJEERROR := 'NO SE PUDO OBTENER EL INDICE DE RENDIMIENTO: ';
        AO_ERROR := '0';
        SYS.DBMS_APPLICATION_INFO.SET_MODULE (NULL, NULL);
    
    WHEN X_ERROREXISTEPARAMINIREN
    THEN
        AO_MENSAJEERROR := 'NO SE PUDO OBTENER BANDERA PARA OBTENER FECHA DE INICIO DE RENDIMIENTO: ';
        AO_ERROR := '0';
        SYS.DBMS_APPLICATION_INFO.SET_MODULE (NULL, NULL);
        
    WHEN X_ERRORACTVALSOLCRUCES
    THEN
        AO_MENSAJEERROR := 'NO SE PUDO ACTUALIZAR EL VALOR DE LA SOLICITUD EN LA TABLA DE CRUCES : ';
        AO_ERROR := '0';
        SYS.DBMS_APPLICATION_INFO.SET_MODULE (NULL, NULL);
        
    WHEN X_ERROREXISTEPARAM
    THEN
        AO_MENSAJEERROR := 'NO SE PUDO OBTENER EL PARAMETRO DEL GASTO ADMINISTRATIVO: ';
        AO_ERROR := '0';
        SYS.DBMS_APPLICATION_INFO.SET_MODULE (NULL, NULL);
        
    WHEN OTHERS
    THEN
        AO_MENSAJEERROR := 'ERROR  ESPECIFICAMENTE : ' || SUBSTR (SQLERRM, 1, 255);
        AO_ERROR := '0';
        SYS.DBMS_APPLICATION_INFO.SET_MODULE (NULL, NULL);
        
    END CRE_NETEOCUENTAINDIVIDUAL_P; 


    PROCEDURE CRE_ARCHIVODEBITO_P (
        AI_NOMBREARCHIVO    IN    VARCHAR2,
        AI_NID              IN  IESS_OWNER.CRE_BITACORAS_TBL.ID%TYPE,
        AO_NUMEROLINEAS        OUT NUMBER,
        AO_ERROR              IN OUT VARCHAR2,
        AO_MENSAJEERROR        IN OUT VARCHAR2)
    IS

        CURSOR C_BITACORAS IS
            SELECT    NUMAFI
            || ' '
            || CODPRETIP
            || ORDPREAFI
            || CODPRECLA
            || NUMPREAFI
            || ' '
            || BI_OBSERVACION BITACORA
            FROM IESS_OWNER.CRE_BITACORAS_TBL
            WHERE MO_MODULO = 'CRE'
            AND ID = AI_NID
            AND TRUNC(BI_FECPRO) > TRUNC(SYSDATE-2)
            ORDER BY BI_FECPRO;
            
        TYPE T_CRE_BITACORAS IS TABLE OF C_BITACORAS%ROWTYPE INDEX BY PLS_INTEGER;
        L_BITACORAS  T_CRE_BITACORAS;
        
        L_IDX                PLS_INTEGER;
        L_LINEAARCHIVO         VARCHAR2 (400);
        
        R_KSCRETBITPRO        IESS_OWNER.KSCRETBITPRO%ROWTYPE;
        L_MANEJAARCHIVO     UTL_FILE.FILE_TYPE;
        
        K_CABECERA             CONSTANT VARCHAR2 (100) := 'CEDULA CODIGO_PRESTAMO  OBSERVACION';

        X_CREARARCHIVO        EXCEPTION;
        X_CERRARARCHIVO        EXCEPTION;
        X_ESCRIBIRARCHIVO    EXCEPTION;        
        
    BEGIN
    
        SYS.DBMS_APPLICATION_INFO.SET_MODULE (
        MODULE_NAME   => 'CRE_ARCHIVODEBITO_P',
        ACTION_NAME   => 'ESCRIBE ARCIVO CON NOVEDADES ENCONTRADAS EN EL PROCESO DE DEBITO AUTOMATICO');

        AO_NUMEROLINEAS                := 0;
        R_KSCRETBITPRO.TOTREGCOM     := NULL;
        R_KSCRETBITPRO.FECPRO         := SYSDATE;
        R_KSCRETBITPRO.CODPRO         := K_CODPRO;
        R_KSCRETBITPRO.OBSERV         := 'INICIO PROCEDIMIENTO CRE_ARCHIVODEBITO_P';
        IESS_OWNER.HLCREKPROGEN.PROREGBITPRO (AICCODPRO => R_KSCRETBITPRO.CODPRO, AICOBSERV => R_KSCRETBITPRO.OBSERV);
        
        
        <<CREAARCHIVO>>
        BEGIN
            L_MANEJAARCHIVO := SYS.UTL_FILE.FOPEN (G_DIRECTORIO, AI_NOMBREARCHIVO, 'W');
        EXCEPTION
        WHEN OTHERS
        THEN
            RAISE X_CREARARCHIVO;
         END CREAARCHIVO;
        
        
        SYS.UTL_FILE.PUT_LINE (L_MANEJAARCHIVO, K_CABECERA);

        OPEN C_BITACORAS;
        
        <<FOR_LOOP_BITACORA>>
        LOOP
        
            FETCH C_BITACORAS BULK COLLECT INTO L_BITACORAS LIMIT K_LIMITEBULKCOLLECT;
            
            --VALIDA Y OBTIENE INFORMACION POR BLOQUES
            L_IDX := L_BITACORAS.FIRST();
            
            <<FOR_LOOP_VALIDA>>
            WHILE L_IDX IS NOT NULL LOOP
            
                <<ESCRIBEARCHIVO>>
                BEGIN
                
                    L_LINEAARCHIVO :=  L_BITACORAS(L_IDX).BITACORA || CHR (13);
                    SYS.UTL_FILE.PUT_LINE (L_MANEJAARCHIVO, L_LINEAARCHIVO);
                    AO_NUMEROLINEAS := AO_NUMEROLINEAS + 1;
                    
                EXCEPTION
                WHEN OTHERS
                THEN
                    RAISE X_ESCRIBIRARCHIVO;
                END ESCRIBEARCHIVO;
                
                L_IDX := L_BITACORAS.NEXT(L_IDX);
            
            END LOOP FOR_LOOP_VALIDA;
            
            EXIT FOR_LOOP_BITACORA WHEN C_BITACORAS%NOTFOUND;  
            
        END LOOP FOR_LOOP_BITACORA;
        
        CLOSE C_BITACORAS;

        <<CERRARARCHIVO>>
        BEGIN
            SYS.UTL_FILE.FCLOSE (L_MANEJAARCHIVO);
        EXCEPTION
        WHEN OTHERS
        THEN
            RAISE X_CERRARARCHIVO;
         END CERRARARCHIVO;
        
        
        AO_ERROR := '1';
        AO_MENSAJEERROR := 'FIN PROCEDIMIENTO CRE_ARCHIVODEBITO_P';

        
        R_KSCRETBITPRO.OBSERV := AO_MENSAJEERROR;
        IESS_OWNER.HLCREKPROGEN.PROREGBITPRO (AICCODPRO => R_KSCRETBITPRO.CODPRO, AICOBSERV => R_KSCRETBITPRO.OBSERV);
        SYS.DBMS_APPLICATION_INFO.SET_MODULE (NULL, NULL);
        
    EXCEPTION
    WHEN X_ESCRIBIRARCHIVO
    THEN
        SYS.UTL_FILE.FCLOSE (L_MANEJAARCHIVO);
        AO_ERROR := '0';
        AO_MENSAJEERROR := SUBSTR('ERROR AL ESCRIBIR EL ARCHIVO: ' || SQLERRM, 1, 1024);
        
        R_KSCRETBITPRO.OBSERV := AO_MENSAJEERROR;
        IESS_OWNER.HLCREKPROGEN.PROREGBITPRO (AICCODPRO => R_KSCRETBITPRO.CODPRO, AICOBSERV => R_KSCRETBITPRO.OBSERV);
        SYS.DBMS_APPLICATION_INFO.SET_MODULE (NULL, NULL);
        
    WHEN X_CREARARCHIVO
    THEN
        AO_ERROR := '0';
        AO_MENSAJEERROR := SUBSTR('ERROR AL CREAR EL ARCHIVO: ' || SQLERRM, 1, 1024);
        
        R_KSCRETBITPRO.OBSERV := AO_MENSAJEERROR;
        IESS_OWNER.HLCREKPROGEN.PROREGBITPRO (AICCODPRO => R_KSCRETBITPRO.CODPRO, AICOBSERV => R_KSCRETBITPRO.OBSERV);
        SYS.DBMS_APPLICATION_INFO.SET_MODULE (NULL, NULL);
        
    WHEN X_CERRARARCHIVO
    THEN
        SYS.UTL_FILE.FCLOSE (L_MANEJAARCHIVO);
        AO_ERROR := '0';
        AO_MENSAJEERROR := SUBSTR('ERROR AL CERRAR EL ARCHIVO: ' || SQLERRM, 1, 1024);
        
        R_KSCRETBITPRO.OBSERV := AO_MENSAJEERROR;
        IESS_OWNER.HLCREKPROGEN.PROREGBITPRO (AICCODPRO => R_KSCRETBITPRO.CODPRO, AICOBSERV => R_KSCRETBITPRO.OBSERV);
        SYS.DBMS_APPLICATION_INFO.SET_MODULE (NULL, NULL);    
        
    WHEN OTHERS
    THEN
        IF SYS.UTL_FILE.IS_OPEN (L_MANEJAARCHIVO)
        THEN
            SYS.UTL_FILE.FCLOSE (L_MANEJAARCHIVO);
        END IF;
        
        AO_ERROR := '0';
        AO_MENSAJEERROR := SUBSTR('ERROR CRE_ARCHIVODEBITO_P: ' || SQLERRM, 1, 1024);
        
        R_KSCRETBITPRO.OBSERV := AO_MENSAJEERROR;
        IESS_OWNER.HLCREKPROGEN.PROREGBITPRO (AICCODPRO => R_KSCRETBITPRO.CODPRO, AICOBSERV => R_KSCRETBITPRO.OBSERV);
        SYS.DBMS_APPLICATION_INFO.SET_MODULE (NULL, NULL);
        
    END CRE_ARCHIVODEBITO_P;
    
    
    PROCEDURE CRE_ACTUALIZAESTADOCRE_P (
        AI_NUMPREAFI       IN    IESS_OWNER.KSCRETCREDITOS.NUMPREAFI%TYPE,
        AI_ORDPREAFI       IN  IESS_OWNER.KSCRETCREDITOS.ORDPREAFI%TYPE,
        AI_CODPRETIP       IN  IESS_OWNER.KSCRETCREDITOS.CODPRETIP%TYPE,
        AI_CODPRECLA       IN  IESS_OWNER.KSCRETCREDITOS.CODPRECLA%TYPE,
        AI_ESTADOANTES    IN  IESS_OWNER.KSCRETCREDITOS.CODESTPRE%TYPE,
        AI_ESTADONUEVO    IN  IESS_OWNER.KSCRETCREDITOS.CODESTPRE%TYPE,
        AO_ERROR          IN OUT VARCHAR2,
        AO_MENSAJEERROR    IN OUT VARCHAR2)
    IS
    BEGIN

        SYS.DBMS_APPLICATION_INFO.SET_MODULE (
        MODULE_NAME   => 'CRE_ACTUALIZAESTADOCRE_P',
        ACTION_NAME   => 'ACTUALIZA EL ESTADO DEL CREDITO');
            
        UPDATE IESS_OWNER.KSCRETCREDITOS
        SET CODESTPRE = AI_ESTADONUEVO
        WHERE     NUMPREAFI = AI_NUMPREAFI
        AND CODPRETIP = AI_CODPRETIP
        AND CODPRECLA = AI_CODPRECLA
        AND ORDPREAFI = AI_ORDPREAFI;
        
        IESS_OWNER.KSCREKPREESTHIS.ACTREGHISESTPRE (
            AINNUMPREAFI => AI_NUMPREAFI,
            AINORDPREAFI => AI_ORDPREAFI,
            AINCODPRETIP => AI_CODPRETIP,
            AINCODPRECLA => AI_CODPRECLA,
            AICCODESTANTPRE => AI_ESTADOANTES,
            AICCODESTNUEPRE => AI_ESTADONUEVO,
            AIDFECFIN => SYSDATE,
            AICOBSTRA => 'SE GENERA TRANSACCION ' || AI_ESTADONUEVO ,
            AOCRESPRO => AO_ERROR,
            AOCMENERR => AO_MENSAJEERROR);
        
        IF AO_ERROR = '0'
        THEN
            AO_MENSAJEERROR := 'CAMBIO ESTADO A: ' || AI_ESTADONUEVO || '-' || AO_MENSAJEERROR;
        END IF;
        
        AO_ERROR := '1';
        AO_MENSAJEERROR := NULL;
        SYS.DBMS_APPLICATION_INFO.SET_MODULE (NULL, NULL);
            
    EXCEPTION
    WHEN OTHERS
    THEN

        AO_ERROR := '0';
        AO_MENSAJEERROR := SUBSTR('CRE_ACTUALIZAESTADOCRE_P: ' || SQLERRM, 1, 1024);
        SYS.DBMS_APPLICATION_INFO.SET_MODULE (NULL, NULL);
        
    END CRE_ACTUALIZAESTADOCRE_P;


    PROCEDURE CRE_LIBERATOTALFRS_P (
        AI_NUMPREAFI       IN  IESS_OWNER.KSCRETCREDITOS.NUMPREAFI%TYPE,
        AI_ORDPREAFI       IN  IESS_OWNER.KSCRETCREDITOS.ORDPREAFI%TYPE,
        AI_CODPRETIP       IN  IESS_OWNER.KSCRETCREDITOS.CODPRETIP%TYPE,
        AI_CODPRECLA       IN  IESS_OWNER.KSCRETCREDITOS.CODPRECLA%TYPE,
        AI_NUMAFI          IN  IESS_OWNER.KSCRETCREDITOS.NUMAFI%TYPE,
        AI_OPERACIONSAC    IN  IESS_OWNER.KSCRETCREDITOS.CR_OPERACIONSAC%TYPE,
        AI_ESTCTAIND    IN    IESS_OWNER.FRSAFITCRURESCTAIND.ESTPROCTAIND%TYPE,
        AO_ERROR           IN OUT VARCHAR2,
        AO_MENSAJEERROR IN OUT VARCHAR2)
    IS

        L_CAPITALCOMPROMETIDO       IESS_OWNER.FRSAFITCRURESCTAIND.CAPITALCOMPROMETIDO%TYPE;
        L_SALDOCAPITAL                 IESS_OWNER.APORTES_PFR2.VALORSALDOCAPITAL%TYPE;
        L_IDX                        PLS_INTEGER;
        X_BUSCASALDO                  EXCEPTION;
        
        CURSOR C_FRSAFITCRURESCTAIND IS
            SELECT DISTINCT CI.CODSEC, CI.NUMPREAFI, CI.CODPRETIP, CI.ORDPREAFI, CI.CODPRECLA
            FROM IESS_OWNER.FRSAFITCRURESCTAIND CI
            WHERE     
            CI.NUMPREAFI = AI_NUMPREAFI
            AND CI.CODPRETIP = AI_ORDPREAFI
            AND CI.ORDPREAFI = AI_CODPRETIP
            AND CI.CODPRECLA = AI_CODPRECLA
            AND CI.ESTPROCTAIND = 'ACI'
            AND CI.CODTIPSOLAFI IS NULL
            AND CI.CAPITALCOMPROMETIDO > 0;
        
        TYPE T_CRE_FRSAFITCRURESCTAIND IS TABLE OF C_FRSAFITCRURESCTAIND%ROWTYPE INDEX BY PLS_INTEGER;
        L_FRSAFITCRURESCTAIND  T_CRE_FRSAFITCRURESCTAIND;
        
        
    BEGIN
        SYS.DBMS_APPLICATION_INFO.SET_MODULE (
        MODULE_NAME   => 'CRE_LIBERATOTALFRS_P',
        ACTION_NAME   => 'LIBERA LOS VALORES COMPROMEIDOS DE FONDOS DE RESERVA');


        OPEN C_FRSAFITCRURESCTAIND;
        
        <<FOR_LOOP_CREDITOS>>
        LOOP
        
            FETCH C_FRSAFITCRURESCTAIND BULK COLLECT INTO L_FRSAFITCRURESCTAIND LIMIT K_LIMITEBULKCOLLECT; 
            
            --VALIDA Y OBTIENE INFORMACION POR BLOQUES
            L_IDX := L_FRSAFITCRURESCTAIND.FIRST();
            
            <<FOR_LOOP_VALIDA>>
            WHILE L_IDX IS NOT NULL LOOP
            

                IF AI_ESTCTAIND = 'ADA' THEN
                    UPDATE IESS_OWNER.FRSAFITCRURESCTAIND C
                    SET C.ESTPROCTAIND = 'ADA',
                    C.FECPRO = SYSDATE
                    WHERE     
                    C.NUMPREAFI     = L_FRSAFITCRURESCTAIND(L_IDX).NUMPREAFI
                    AND C.CODPRETIP = L_FRSAFITCRURESCTAIND(L_IDX).CODPRETIP
                    AND C.ORDPREAFI = L_FRSAFITCRURESCTAIND(L_IDX).ORDPREAFI
                    AND C.CODPRECLA = L_FRSAFITCRURESCTAIND(L_IDX).CODPRECLA
                    AND C.CODSEC     = L_FRSAFITCRURESCTAIND(L_IDX).CODSEC
                    AND C.ESTPROCTAIND = 'ACI'
                    AND C.CODTIPSOLAFI IS NULL
                    AND C.CAPITALCOMPROMETIDO > 0;        
                END IF;


                IF AI_ESTCTAIND = 'LIB' THEN
                    UPDATE IESS_OWNER.FRSAFITCRURESCTAIND C
                    SET C.ESTPROCTAIND = 'LIB',
                    C.CAPITALCOMPROMETIDO = 0,
                    C.FECPRO = SYSDATE
                    WHERE     
                    C.NUMPREAFI     = L_FRSAFITCRURESCTAIND(L_IDX).NUMPREAFI
                    AND C.CODPRETIP = L_FRSAFITCRURESCTAIND(L_IDX).CODPRETIP
                    AND C.ORDPREAFI = L_FRSAFITCRURESCTAIND(L_IDX).ORDPREAFI
                    AND C.CODPRECLA = L_FRSAFITCRURESCTAIND(L_IDX).CODPRECLA
                    AND C.CODSEC     = L_FRSAFITCRURESCTAIND(L_IDX).CODSEC
                    AND C.ESTPROCTAIND = 'ACI'
                    AND C.CODTIPSOLAFI IS NULL
                    AND C.CAPITALCOMPROMETIDO > 0;
                END IF;            
            
                <<CAPITALCOMPROMEIDO>>
                BEGIN
                    SELECT ROUND(SUM(NVL(F.CAPITALCOMPROMETIDO,0)),2)
                    INTO L_CAPITALCOMPROMETIDO
                    FROM IESS_OWNER.FRSAFITCRURESCTAIND F
                    INNER JOIN IESS_OWNER.KSCRETCREDITOS C
                    ON                
                    F.NUMPREAFI     = C.NUMPREAFI
                    AND F.CODPRETIP = C.CODPRETIP
                    AND F.CODPRECLA = C.CODPRECLA
                    AND F.ORDPREAFI = C.ORDPREAFI
                    WHERE
                    F.CODSEC     = L_FRSAFITCRURESCTAIND(L_IDX).CODSEC
                    AND F.CAPITALCOMPROMETIDO > 0
                    AND F.CODTIPSOLAFI IS NULL
                    AND F.ESTPROCTAIND = 'ACI'
                    AND C.CODESTPRE IN (
                        SELECT EST.CODESTPRE 
                        FROM IESS_OWNER.KSCRETPREEST EST
                        WHERE EST.OBTESTPRE = '2'                
                    );            
                EXCEPTION
                WHEN NO_DATA_FOUND THEN
                    L_CAPITALCOMPROMETIDO := 0;
                WHEN TOO_MANY_ROWS THEN
                    L_CAPITALCOMPROMETIDO := 0;              
                WHEN OTHERS THEN
                    L_CAPITALCOMPROMETIDO := 0;
                END CAPITALCOMPROMEIDO;                
                

                <<SALDOCAPITAL>>
                BEGIN
                    SELECT ROUND(NVL(VALORSALDOCAPITAL,0),2)
                    INTO L_SALDOCAPITAL
                    FROM IESS_OWNER.APORTES_PFR2
                    WHERE     
                    CEDULA     = AI_NUMAFI
                    AND CODIGOAPORTE = L_FRSAFITCRURESCTAIND(L_IDX).CODSEC;
                EXCEPTION
                WHEN NO_DATA_FOUND THEN
                    RAISE X_BUSCASALDO;
                WHEN TOO_MANY_ROWS THEN
                    RAISE X_BUSCASALDO;        
                WHEN OTHERS THEN
                    RAISE X_BUSCASALDO;
                END SALDOCAPITAL;

                
                IF NVL(L_CAPITALCOMPROMETIDO, 0) > 0 THEN
                    
                    IF NVL(L_SALDOCAPITAL, 0) >= L_CAPITALCOMPROMETIDO THEN
                        UPDATE IESS_OWNER.APORTES_PFR2
                        SET VALORCOMPROMETIDOGARPQCAP = L_CAPITALCOMPROMETIDO,
                        VALORCAPITALDISPONIBLE = VALORSALDOCAPITAL - L_CAPITALCOMPROMETIDO
                        WHERE     
                        CODIGOAPORTE = L_FRSAFITCRURESCTAIND(L_IDX).CODSEC;
                    ELSE
                        UPDATE IESS_OWNER.APORTES_PFR2
                        SET VALORCOMPROMETIDOGARPQCAP = VALORSALDOCAPITAL,
                        VALORCAPITALDISPONIBLE = 0
                        WHERE     
                        CODIGOAPORTE = L_FRSAFITCRURESCTAIND(L_IDX).CODSEC;
            
                        AO_ERROR := '0';
                        AO_MENSAJEERROR := 'SOBRE GARANTIZADO NUMERO: ' || L_FRSAFITCRURESCTAIND(L_IDX).NUMPREAFI || 
                                            ' - CEDULA: ' || AI_NUMAFI || 
                                            ' - CODIGO APORTE: ' || L_FRSAFITCRURESCTAIND(L_IDX).CODSEC || 
                                            ' - VALOR: ' || ROUND((L_SALDOCAPITAL-L_CAPITALCOMPROMETIDO),2);
                    END IF;
                        
                ELSE
                    UPDATE IESS_OWNER.APORTES_PFR2
                    SET VALORCOMPROMETIDOGARPQCAP = 0,
                    VALORCAPITALDISPONIBLE = VALORCAPITALDISPONIBLE + VALORCOMPROMETIDOGARPQCAP
                    WHERE     
                    CODIGOAPORTE = L_FRSAFITCRURESCTAIND(L_IDX).CODSEC;
                END IF;            
            
                L_IDX := L_FRSAFITCRURESCTAIND.NEXT(L_IDX);
            
            END LOOP FOR_LOOP_VALIDA;
        
            EXIT FOR_LOOP_CREDITOS WHEN C_FRSAFITCRURESCTAIND%NOTFOUND;  
            
        END LOOP FOR_LOOP_CREDITOS;
        
        CLOSE C_FRSAFITCRURESCTAIND;
        
        AO_ERROR := '1';
        AO_MENSAJEERROR := NULL;
        SYS.DBMS_APPLICATION_INFO.SET_MODULE (NULL, NULL);

    EXCEPTION
    WHEN X_BUSCASALDO
    THEN
        AO_ERROR := '0';
        AO_MENSAJEERROR := SUBSTR(AI_OPERACIONSAC || ' ERROR CAPITAL DISPONIBLE EN APORTES FRS, NUMERO DE CEDULA NO COINCIDE.', 1, 1024);
        SYS.DBMS_APPLICATION_INFO.SET_MODULE (NULL, NULL);
        
    WHEN OTHERS
    THEN
        AO_ERROR := '0';
        AO_MENSAJEERROR := SUBSTR(AI_OPERACIONSAC || ' CRE_LIBERATOTALFRS_P: ' || SQLERRM, 1, 1024);
        SYS.DBMS_APPLICATION_INFO.SET_MODULE (NULL, NULL);
        
    END CRE_LIBERATOTALFRS_P;


    PROCEDURE CRE_LIBERADESBLOQUEATOTAL_P ( 
        AI_NUMPREAFI      IN  IESS_OWNER.KSCRETCREDITOS.NUMPREAFI%TYPE,
        AI_ORDPREAFI    IN  IESS_OWNER.KSCRETCREDITOS.ORDPREAFI%TYPE,
        AI_CODPRETIP    IN  IESS_OWNER.KSCRETCREDITOS.CODPRETIP%TYPE,
        AI_CODPRECLA    IN  IESS_OWNER.KSCRETCREDITOS.CODPRECLA%TYPE,
        AI_TIPOFONDO      IN  VARCHAR2,
        AI_NUMAFI       IN  IESS_OWNER.KSCRETCREDITOS.NUMAFI%TYPE,
        AI_OPERACIONSAC IN     IESS_OWNER.KSCRETCREDITOS.CR_OPERACIONSAC%TYPE,
        AO_ERROR         IN OUT VARCHAR2,
        AO_MENSAJEERROR IN OUT VARCHAR2)
    IS
        
    BEGIN
        SYS.DBMS_APPLICATION_INFO.SET_MODULE (
        MODULE_NAME   => 'CRE_LIBERADESBLOQUEATOTAL_P',
        ACTION_NAME   => 'DESBLOQUEA LOS FONDOS CUANDO LA CANCELACION ES TOTAL');
        

        IF AI_TIPOFONDO = 'FCE' THEN        
            
            UPDATE IESS_OWNER.THLCRT_GARANTIAS U
            SET U.BLOGARCES = 1
            WHERE U.NUMPREAFI = AI_NUMPREAFI
            AND U.CODPRETIP = AI_CODPRETIP
            AND U.CODPRECLA = AI_CODPRECLA
            AND U.ORDPREAFI = AI_ORDPREAFI
            AND NVL(U.VALCOMCESHL, 0) > 0;
            
        END IF;
        
        
        IF AI_TIPOFONDO = 'FRS' THEN
        
            CRE_LIBERATOTALFRS_P (
                    AI_NUMPREAFI,
                    AI_ORDPREAFI,
                    AI_CODPRETIP,
                    AI_CODPRECLA,
                    AI_NUMAFI,
                    AI_OPERACIONSAC,
                    'LIB',
                    AO_ERROR,
                    AO_MENSAJEERROR
            );

            UPDATE IESS_OWNER.THLCRT_GARANTIAS U
            SET U.CODESTGARFON = 'LIB', U.SALPORAPLFONRES = 0, U.BLOGARFONRES = 0
            WHERE U.NUMPREAFI = AI_NUMPREAFI
            AND U.CODPRETIP = AI_CODPRETIP
            AND U.CODPRECLA = AI_CODPRECLA
            AND U.ORDPREAFI = AI_ORDPREAFI
            AND NVL(U.VALCOMFONRES, 0) > 0;
            
        END IF;
            
        
        --PASA EL CREDITO A ESTADO VIGENTE PARA QUE SE CANCELE POR EL PROCESO DE CANCELACION
        UPDATE IESS_OWNER.KSCRETCREDITOS
        SET CODESTPRE = 'VIG'
        WHERE     NUMPREAFI = AI_NUMPREAFI
        AND CODPRETIP = AI_CODPRETIP
        AND CODPRECLA = AI_CODPRECLA
        AND ORDPREAFI = AI_ORDPREAFI;
            
        AO_ERROR         := '1';
        AO_MENSAJEERROR := NULL;
        SYS.DBMS_APPLICATION_INFO.SET_MODULE (NULL, NULL);
        
    EXCEPTION
    WHEN OTHERS
    THEN
        AO_ERROR := '0';
        AO_MENSAJEERROR := SUBSTR('CRE_LIBERADESBLOQUEATOTAL_P: ' || SQLERRM, 1, 1024);
        SYS.DBMS_APPLICATION_INFO.SET_MODULE (NULL, NULL);
        
    END CRE_LIBERADESBLOQUEATOTAL_P;


    PROCEDURE CRE_GENERATRANSACCION_P (
        AI_TIPOFONDO          IN  VARCHAR2,
        AI_NUMAFI            IN     IESS_OWNER.KSCRETCREDITOS.NUMAFI%TYPE,
        AI_OPERACIONSAC     IN  IESS_OWNER.KSCRETCREDITOS.CR_OPERACIONSAC%TYPE,
        AI_CODTIPSOLSER     IN  IESS_OWNER.KSCRETCREDITOS.CODTIPSOLSER%TYPE,
        AI_NUMSOLSER        IN  IESS_OWNER.KSCRETCREDITOS.NUMSOLSER%TYPE,
        AI_VALORCOBRAR      IN  IESS_OWNER.REC_TRANSACCION_TBL.TR_VALORCOBRAR%TYPE,
        AI_TIPORETIRO          IN  VARCHAR2,
        AI_IDREGISTRO       IN  IESS_OWNER.REC_TRANSACCION_TBL.TR_REFERENCIACANCELACION%TYPE,
        AI_NUT                IN  IESS_OWNER.REC_TRANSACCION_TBL.TR_NUT%TYPE,
        AI_FECHASACEFEC        IN  IESS_OWNER.REC_TRANSACCION_TBL.TR_FECHACANCELACION%TYPE,
        AO_TIPOTRANSACCION  IN OUT IESS_OWNER.REC_TRANSACCION_TBL.TR_IDTIPOTRANSACCION%TYPE,
        AO_ERROR              IN OUT VARCHAR2,
        AO_MENSAJEERROR     IN OUT VARCHAR2)
    IS
        R_TRANSACCION       IESS_OWNER.REC_TRANSACCION_TBL%ROWTYPE;

    BEGIN
        SYS.DBMS_APPLICATION_INFO.SET_MODULE (
        MODULE_NAME   => 'CRE_GENERATRANSACCION_P',
        ACTION_NAME   => 'GENERA TRANSACCION DE DEBITO');

        IF AI_TIPOFONDO = 'FRS'
        THEN
            IF AI_TIPORETIRO = 'T' 
            THEN
                R_TRANSACCION.TR_IDTIPOTRANSACCION     := 19;             --CANCELACION
            ELSE
                R_TRANSACCION.TR_IDTIPOTRANSACCION    := 28;          --ABONO
            END IF;
        ELSE
            IF AI_TIPORETIRO = 'T' 
            THEN
                R_TRANSACCION.TR_IDTIPOTRANSACCION     := 32;            --CANCELACION
            ELSE
                R_TRANSACCION.TR_IDTIPOTRANSACCION     := 33;            --ABONO
            END IF;
        END IF;

        AO_TIPOTRANSACCION := R_TRANSACCION.TR_IDTIPOTRANSACCION;

        R_TRANSACCION.TR_IDTRANSACCION            := IESS_OWNER.REC_TRANSACCION_SEQ.NEXTVAL;
        R_TRANSACCION.TR_CEDULA                 := AI_NUMAFI;
        R_TRANSACCION.TR_ANIPER                 := TO_NUMBER (TO_CHAR (SYSDATE, 'YYYY'),'9999','NLS_NUMERIC_CHARACTERS=''.,''');
        R_TRANSACCION.TR_MESPER                 := TO_NUMBER (TO_CHAR (SYSDATE, 'MM'),'9999','NLS_NUMERIC_CHARACTERS=''.,''');
        R_TRANSACCION.TR_MAXIMODEBITAR            := AI_VALORCOBRAR;
        R_TRANSACCION.TR_IDGAF                     := AI_OPERACIONSAC;
        R_TRANSACCION.TR_VALORCOBRAR             := AI_VALORCOBRAR;
        R_TRANSACCION.TR_VALORRECAUDADO         := AI_VALORCOBRAR;
        R_TRANSACCION.TR_VALORDIVIDENDO         := 0;
        R_TRANSACCION.TR_INTERESESMORA             := 0;
        R_TRANSACCION.TR_ESTADO                 := 'REC';
        R_TRANSACCION.TR_FECHAPROCESO             := SYSDATE;
        R_TRANSACCION.TR_CODCOMPAG                 := AI_IDREGISTRO;
        R_TRANSACCION.TR_NUMSOLSER                 := AI_NUMSOLSER;
        R_TRANSACCION.TR_CODTIPSOLSER             := AI_CODTIPSOLSER;
        R_TRANSACCION.TR_NUT                    := AI_NUT; 
        R_TRANSACCION.TR_REFERENCIACANCELACION    := AI_IDREGISTRO;
        R_TRANSACCION.TR_FECHAMAXIMAPAGO        := (AI_FECHASACEFEC + 1 / (60 * 60 * 24));
        R_TRANSACCION.TR_FECHACANCELACION        := (AI_FECHASACEFEC + 1 / (60 * 24));
        
        INSERT INTO IESS_OWNER.REC_TRANSACCION_TBL VALUES R_TRANSACCION;
        
        AO_ERROR         := '1';
        AO_MENSAJEERROR := NULL;
        SYS.DBMS_APPLICATION_INFO.SET_MODULE (NULL, NULL);
      
    EXCEPTION
      WHEN OTHERS
      THEN
         AO_ERROR := '0';
         AO_MENSAJEERROR := SUBSTR('CRE_GENERATRANSACCION_P: ' || SQLERRM, 1, 1024);
         SYS.DBMS_APPLICATION_INFO.SET_MODULE (NULL, NULL);
         
    END CRE_GENERATRANSACCION_P;


    PROCEDURE CRE_INSERTABITACORAS_P (
        AI_BITACORAS     IN IESS_OWNER.CRE_BITACORAS_TBL%ROWTYPE,
        AO_ERROR         IN OUT VARCHAR2,
        AO_MENSAJEERROR IN OUT VARCHAR2)
    IS
        PRAGMA AUTONOMOUS_TRANSACTION;
    BEGIN

        SYS.DBMS_APPLICATION_INFO.SET_MODULE (
        MODULE_NAME   => 'CRE_INSERTABITACORAS_P',
        ACTION_NAME   => 'INGRESO DE BITACORAS');

        INSERT INTO IESS_OWNER.CRE_BITACORAS_TBL (
            ID,
            CODPROC,
            MO_MODULO,
            TE_ID_TIPO_ERROR,
            CODPRETIP,
            ORDPREAFI,
            NUMPREAFI,
            CODPRECLA,
            NUMDIV,
            RUCEMP,
            NUMAFI,
            BI_OBSERVACION
        ) VALUES (
            AI_BITACORAS.ID,
            AI_BITACORAS.CODPROC,
            AI_BITACORAS.MO_MODULO,
            AI_BITACORAS.TE_ID_TIPO_ERROR,
            AI_BITACORAS.CODPRETIP,
            AI_BITACORAS.ORDPREAFI,
            AI_BITACORAS.NUMPREAFI,
            AI_BITACORAS.CODPRECLA,
            AI_BITACORAS.NUMDIV,
            AI_BITACORAS.RUCEMP,
            AI_BITACORAS.NUMAFI,
            SUBSTR(AI_BITACORAS.BI_OBSERVACION, 1, 200)
        );
           
        COMMIT;
        
        AO_ERROR         := '1';
        AO_MENSAJEERROR := NULL;
        SYS.DBMS_APPLICATION_INFO.SET_MODULE (NULL, NULL);

    EXCEPTION
      WHEN OTHERS THEN
         AO_ERROR := '0';
         AO_MENSAJEERROR := SUBSTR('CRE_INSERTABITACORAS_P: ' || SQLERRM, 1, 1024);
         SYS.DBMS_APPLICATION_INFO.SET_MODULE (NULL, NULL);
         
    END CRE_INSERTABITACORAS_P;


    PROCEDURE CRE_ACTUALIZADEBITOREC_P (
        AI_MENSAJEERROR    IN    VARCHAR2,
        AI_IDGAF          IN IESS_OWNER.CRE_CREDITOSDEBITOSAC_T.CD_OPERACIONSAC%TYPE,
        AI_IDREGISTRO     IN IESS_OWNER.CRE_CREDITOSDEBITOSAC_T.CD_IDREGISTRO%TYPE,
        AO_ERROR          IN OUT VARCHAR2,
        AO_MENSAJEERROR IN OUT VARCHAR2)
    IS
        PRAGMA AUTONOMOUS_TRANSACTION;
        
    BEGIN
          
        SYS.DBMS_APPLICATION_INFO.SET_MODULE (
        MODULE_NAME   => 'CRE_ACTUALIZADEBITOREC_P',
        ACTION_NAME   => 'ACTUALIZA OBSERVACION EN TABLA DE LIQUIDACIONES');

        UPDATE PQ_OWNER.CRE_CREDITOSDEBITOSAC_T
        SET CD_ESTADOAFECOPE = 'REC',
        CD_OBSERVACION = SUBSTR (TRIM(CD_OBSERVACION) || ' ' || TRIM(AI_MENSAJEERROR), 1, 100),
        CD_ESTADOPROCESO = 'PRO'
        WHERE 
        CD_ESTADOAFECOPE = 'ENV'
        AND CD_ESTADOPROCESO ='SDE'    
        AND CD_IDREGISTRO = AI_IDREGISTRO;

        
        IF SQL%NOTFOUND
        THEN

            UPDATE PQ_OWNER.CRE_CREDITOSDEBITOSAC_T
            SET CD_OBSERVACION     = SUBSTR (TRIM(CD_OBSERVACION) || ' ' || TRIM(AI_MENSAJEERROR), 1, 100)
            WHERE CD_IDREGISTRO = AI_IDREGISTRO;        

        END IF;
        
        
        COMMIT;
        
        AO_ERROR         := '1';
        AO_MENSAJEERROR := NULL;
        SYS.DBMS_APPLICATION_INFO.SET_MODULE (NULL, NULL);
        
    EXCEPTION
    WHEN OTHERS
    THEN
        AO_ERROR := '0';
        AO_MENSAJEERROR := SUBSTR('CRE_ACTUALIZADEBITOREC_P: ' || SQLERRM, 1, 1024);
        SYS.DBMS_APPLICATION_INFO.SET_MODULE (NULL, NULL);
        
    END CRE_ACTUALIZADEBITOREC_P;
    


    PROCEDURE CRE_ACTUALIZADEBITOCAN_P (
        AI_IDGAF          IN IESS_OWNER.CRE_CREDITOSDEBITOSAC_T.CD_OPERACIONSAC%TYPE,
        AI_VALDEB       IN IESS_OWNER.CRE_CREDITOSDEBITOSAC_T.CD_VALORAPLICADOFONRES%TYPE,
        AI_CODSOLI      IN IESS_OWNER.CRE_CREDITOSDEBITOSAC_T.CD_NUMTRANSACCIONBIESS%TYPE,
        AI_TIPODEBITO   IN VARCHAR2,
        AI_IDTRANSAC    IN IESS_OWNER.CRE_CREDITOSDEBITOSAC_T.CD_IDTRANSACCIONSAC%TYPE,
        AI_IDREGISTRO   IN IESS_OWNER.CRE_CREDITOSDEBITOSAC_T.CD_IDREGISTRO%TYPE,
        AO_ERROR         IN OUT VARCHAR2,
        AO_MENSAJEERROR IN OUT VARCHAR2)
    IS
        
        L_ESTADOTRAN       IESS_OWNER.CRE_CREDITOSDEBITOSAC_T.CD_ESTADOAFECOPE%TYPE;
        L_ESTADOPRO        IESS_OWNER.CRE_CREDITOSDEBITOSAC_T.CD_ESTADOPROCESO%TYPE;
        L_OBSERVACION      IESS_OWNER.CRE_CREDITOSDEBITOSAC_T.CD_OBSERVACION%TYPE;

        X_ERRORUPDESTDEB   EXCEPTION;

    BEGIN
        SYS.DBMS_APPLICATION_INFO.SET_MODULE (
        MODULE_NAME   => 'CRE_ACTUALIZADEBITOCAN_P',
        ACTION_NAME   => 'ACTUALIZA ESTADO EN TABLA DE LIQUIDACIONES');
        
        CASE
            WHEN AI_IDTRANSAC = 19
            THEN
                L_ESTADOTRAN     := 'CDA';
                L_ESTADOPRO     := 'PRO';
                L_OBSERVACION    := 'DEBITO FRS EXITOSO.';
            WHEN AI_IDTRANSAC = 28
            THEN
                L_ESTADOTRAN     := 'ADA';
                L_ESTADOPRO     := 'EJE';
                L_OBSERVACION    := 'DEBITO FRS EXITOSO.';
            WHEN AI_IDTRANSAC = 32
            THEN
                L_ESTADOTRAN     := 'CDA';
                L_ESTADOPRO     := 'PRO';
                L_OBSERVACION    := 'DEBITO FCE EXITOSO.';
            WHEN AI_IDTRANSAC = 33
            THEN
                L_ESTADOTRAN     := 'ADA';
                L_ESTADOPRO        := 'EJE';
                L_OBSERVACION    := 'DEBITO FCE EXITOSO.';
        END CASE;


        IF AI_TIPODEBITO = 'FRS'
        THEN

            UPDATE PQ_OWNER.CRE_CREDITOSDEBITOSAC_T
            SET CD_FECEJECUCION     = SYSDATE,
            CD_VALORAPLICADOFONRES     = AI_VALDEB,
            CD_IDTRANSACCIONSAC     = AI_IDTRANSAC,
            CD_NUMTRANSACCIONBIESS     = AI_CODSOLI,
            CD_ESTADOAFECOPE         = L_ESTADOTRAN,
            CD_ESTADOPROCESO         = L_ESTADOPRO,
            CD_OBSERVACION             = SUBSTR (TRIM(CD_OBSERVACION) || ' ' || L_OBSERVACION, 1, 100)
            WHERE CD_ESTADOAFECOPE = 'ENV'
            AND CD_ESTADOPROCESO = 'SDE'
            AND CD_IDREGISTRO = AI_IDREGISTRO;

            IF SQL%NOTFOUND
            THEN
               RAISE X_ERRORUPDESTDEB;
            END IF;

        ELSE

            UPDATE PQ_OWNER.CRE_CREDITOSDEBITOSAC_T
            SET CD_FECEJECUCION = SYSDATE,
            CD_VALORAPLICADOCES = AI_VALDEB,
            CD_IDTRANSACCIONSAC = AI_IDTRANSAC,
            CD_NUMTRANSACCION     = AI_CODSOLI,
            CD_ESTADOAFECOPE     = L_ESTADOTRAN,
            CD_ESTADOPROCESO     = L_ESTADOPRO,
            CD_OBSERVACION         = SUBSTR (TRIM(CD_OBSERVACION) || ' ' || L_OBSERVACION, 1, 100)
            WHERE CD_ESTADOAFECOPE IN ('ENV', 'CDA', 'ADA')
            AND CD_ESTADOPROCESO IN ('EJE', 'SDE')
            AND CD_IDREGISTRO = AI_IDREGISTRO;

            IF SQL%NOTFOUND
            THEN
                RAISE X_ERRORUPDESTDEB;
            END IF;
                
        END IF;

        AO_ERROR         := '1';
        AO_MENSAJEERROR := NULL;
        SYS.DBMS_APPLICATION_INFO.SET_MODULE (NULL, NULL);
          
    EXCEPTION
    WHEN X_ERRORUPDESTDEB
    THEN
        AO_ERROR := '0';
        AO_MENSAJEERROR := 'NO SE ENCOTRO REGISTRO PARA ACTUALIZAR A PRO. ';
        SYS.DBMS_APPLICATION_INFO.SET_MODULE (NULL, NULL);
        
    WHEN OTHERS
    THEN
        AO_ERROR := '0';
        AO_MENSAJEERROR := SUBSTR('CRE_ACTUALIZADEBITOCAN_P: ' || SQLERRM, 1, 1024);
        SYS.DBMS_APPLICATION_INFO.SET_MODULE (NULL, NULL);

    END CRE_ACTUALIZADEBITOCAN_P;


    PROCEDURE CRE_ACTUALIZADEBITOOBS_P (
        AI_MENSAJEERROR       IN IESS_OWNER.CRE_CREDITOSDEBITOSAC_T.CD_OBSERVACION%TYPE,
        AI_IDGAF               IN IESS_OWNER.CRE_CREDITOSDEBITOSAC_T.CD_OPERACIONSAC%TYPE,
        AI_IDREGISTRO       IN IESS_OWNER.CRE_CREDITOSDEBITOSAC_T.CD_IDREGISTRO%TYPE,
        AO_ERROR             IN OUT VARCHAR2,
        AO_MENSAJEERROR      IN OUT VARCHAR2)
    IS
        PRAGMA AUTONOMOUS_TRANSACTION;
    BEGIN
        
        SYS.DBMS_APPLICATION_INFO.SET_MODULE (
        MODULE_NAME   => 'CRE_ACTUALIZADEBITOOBS_P',
        ACTION_NAME   => 'ACTUALIZA OBSERVACION EN TABLA DE LIQUIDACIONES');

        UPDATE PQ_OWNER.CRE_CREDITOSDEBITOSAC_T
        SET CD_OBSERVACION     = SUBSTR (TRIM(CD_OBSERVACION) || ' ' || TRIM(AI_MENSAJEERROR), 1, 100)
        WHERE CD_IDREGISTRO = AI_IDREGISTRO;

        COMMIT;

        AO_ERROR         := '1';
        AO_MENSAJEERROR := NULL;
        SYS.DBMS_APPLICATION_INFO.SET_MODULE (NULL, NULL);

    EXCEPTION
        WHEN OTHERS
        THEN
        AO_ERROR := '0';
        AO_MENSAJEERROR := SUBSTR('CRE_ACTUALIZADEBITOOBS_P: ' || SQLERRM, 1, 1024);
        SYS.DBMS_APPLICATION_INFO.SET_MODULE (NULL, NULL);

    END CRE_ACTUALIZADEBITOOBS_P;
 

    PROCEDURE CRE_VALORAPROXIMADOFRS_P (
        AI_KSCRETCREDITOS           IN IESS_OWNER.KSCRETCREDITOS%ROWTYPE,
        AO_VALORTOTALAPROXIMADOFR     IN OUT IESS_OWNER.APORTES_PFR2.VALORCOMPROMETIDOFRCAPITAL%TYPE,
        AO_ERROR          IN OUT VARCHAR2,
        AO_MENSAJEERROR IN OUT VARCHAR2)
    IS
        L_SALDOCAPITAL              IESS_OWNER.APORTES_PFR2.VALORSALDOCAPITAL%TYPE;
        L_CAPITALDISPONIBLE         IESS_OWNER.APORTES_PFR2.VALORCAPITALDISPONIBLE%TYPE;
        L_VALORTOTALAPROXIMADOFR    IESS_OWNER.APORTES_PFR2.VALORCOMPROMETIDOFRCAPITAL%TYPE;
        L_IDX                        PLS_INTEGER;
        
        ERROR_SALDO_CAPITAL        EXCEPTION;
        ERROR_CAPITAL_DISPONIBLE   EXCEPTION;

        CURSOR C_APORTESFRS IS
                SELECT A.CODIGOAPORTE,
                A.CEDULA,
                A.TIPOREGISTRO,
                NVL (A.VALORCOMPROMETIDOGARPQCAP, 0) AS VALORCOMPROMETIDOGARANTIAPQ,
                NVL (A.VALORCAPITALDISPONIBLE, 0) AS VALORCAPITALDISPONIBLE,
                NVL (A.VALORCAPITALPAGADO, 0) AS VALORCAPITALPAGADO,
                NVL (A.VALORSALDOCAPITAL, 0) AS VALORSALDOCAPITAL,
                NVL (A.VALORCAPITAL, 0) AS VALORCAPITAL,
                NVL (A.VALORCOMPROMETIDOFRCAPITAL, 0) AS VALORCOMPROMETIDOFRCAPITAL,
                NVL (CI.CAPITALCOMPROMETIDO, 0) AS CAPITALCOMPROMETIDOCC
                FROM IESS_OWNER.APORTES_PFR2 A
                INNER JOIN IESS_OWNER.FRSAFITCRURESCTAIND CI
                ON A.CEDULA = CI.NUMAFI AND A.CODIGOAPORTE = CI.CODSEC
                INNER JOIN IESS_OWNER.PCO_DETALLE_CATALOGOS_TBL DET
                ON A.TIPOREGISTRO = DET.DC_CODIGO
                WHERE CI.NUMAFI     = AI_KSCRETCREDITOS.NUMAFI
                AND CI.NUMPREAFI     = AI_KSCRETCREDITOS.NUMPREAFI
                AND CI.CODPRETIP     = AI_KSCRETCREDITOS.CODPRETIP
                AND CI.ORDPREAFI     = AI_KSCRETCREDITOS.ORDPREAFI
                AND CI.CODPRECLA    = AI_KSCRETCREDITOS.CODPRECLA
                AND DET.CA_CATALOGO = 'FRTIPAPOFR'
                AND DET.DC_ESTADO     = 'A'
                AND A.ESTADOBLOQUEO = 'N'
                AND A.MARCADISPONIBLE = 'NP'
                AND CI.ESTPROCTAIND = 'ACI'
                AND CI.CODSOLAFI IS NULL
                AND CI.CODTIPSOLAFI IS NULL
            UNION ALL
                SELECT A.CODIGOAPORTE,
                A.CEDULA,
                A.TIPOREGISTRO,
                NVL (A.VALORCOMPROMETIDOGARPQCAP, 0) AS VALORCOMPROMETIDOGARANTIAPQ,
                NVL (A.VALORCAPITALDISPONIBLE, 0) AS VALORCAPITALDISPONIBLE,
                NVL (A.VALORCAPITALPAGADO, 0) AS VALORCAPITALPAGADO,
                NVL (A.VALORSALDOCAPITAL, 0) AS VALORSALDOCAPITAL,
                NVL (A.VALORCAPITAL, 0) AS VALORCAPITAL,
                NVL (A.VALORCOMPROMETIDOFRCAPITAL, 0) AS VALORCOMPROMETIDOFRCAPITAL, 
                0 AS CAPITALCOMPROMETIDOCC
                FROM IESS_OWNER.APORTES_PFR2 A
                INNER JOIN IESS_OWNER.PCO_DETALLE_CATALOGOS_TBL DET
                ON A.TIPOREGISTRO = DET.DC_CODIGO
                WHERE A.CEDULA     = AI_KSCRETCREDITOS.NUMAFI
                AND DET.CA_CATALOGO = 'FRTIPAPOFR'
                AND DET.DC_ESTADO = 'A'
                AND A.CODIGOAPORTE NOT IN (
                    SELECT CI.CODSEC
                    FROM IESS_OWNER.FRSAFITCRURESCTAIND CI
                    WHERE CI.NUMAFI = A.CEDULA
                    AND CI.CODSEC = A.CODIGOAPORTE
                    AND CI.NUMPREAFI = AI_KSCRETCREDITOS.NUMPREAFI
                    AND CI.CODPRETIP = AI_KSCRETCREDITOS.CODPRETIP
                    AND CI.ORDPREAFI = AI_KSCRETCREDITOS.ORDPREAFI
                    AND CI.CODPRECLA = AI_KSCRETCREDITOS.CODPRECLA
                    AND CI.ESTPROCTAIND = 'ACI'
                    AND CI.CODSOLAFI IS NULL
                    AND CI.CODTIPSOLAFI IS NULL
                )
                AND NVL (A.VALORCAPITALDISPONIBLE, 0) > 0
                AND A.ESTADOBLOQUEO = 'N'
                AND A.MARCADISPONIBLE = 'NP';

        TYPE T_CRE_APORTESFRS IS TABLE OF C_APORTESFRS%ROWTYPE INDEX BY PLS_INTEGER;
        L_APORTESFRS T_CRE_APORTESFRS;
        
    BEGIN
        
        SYS.DBMS_APPLICATION_INFO.SET_MODULE (
        MODULE_NAME   => 'CRE_VALORAPROXIMADOFRS_P',
        ACTION_NAME   => 'CALCULA EL VALOR APROXIMADO DISPONIBLE EN FONDOS DE RESERVA');
        
        L_VALORTOTALAPROXIMADOFR := 0;
        
        OPEN C_APORTESFRS;
        
        <<FOR_LOOP_CREDITOS>>
        LOOP
        
            FETCH C_APORTESFRS BULK COLLECT INTO L_APORTESFRS LIMIT K_LIMITEBULKCOLLECT; 
            
            --VALIDA Y OBTIENE INFORMACION POR BLOQUES
            L_IDX := L_APORTESFRS.FIRST();
            
            <<FOR_LOOP_VALIDA>>
            WHILE L_IDX IS NOT NULL LOOP

                <<CALCULOS>>
                BEGIN
                    L_SALDOCAPITAL         := L_APORTESFRS(L_IDX).VALORCAPITAL - L_APORTESFRS(L_IDX).VALORCAPITALPAGADO;
                    L_CAPITALDISPONIBLE := L_APORTESFRS(L_IDX).VALORCAPITAL - (  L_APORTESFRS(L_IDX).VALORCAPITALPAGADO
                                                                                        + L_APORTESFRS(L_IDX).VALORCOMPROMETIDOGARANTIAPQ 
                                                                                        + L_APORTESFRS(L_IDX).VALORCOMPROMETIDOFRCAPITAL
                                                                                        );

                    IF ROUND (L_APORTESFRS(L_IDX).VALORSALDOCAPITAL, 2) <> ROUND (L_SALDOCAPITAL, 2)
                    THEN
                        RAISE ERROR_SALDO_CAPITAL;
                    END IF;


                    IF ROUND (L_APORTESFRS(L_IDX).VALORCAPITALDISPONIBLE, 2) <>  ROUND (L_CAPITALDISPONIBLE, 2)
                    THEN
                        RAISE ERROR_CAPITAL_DISPONIBLE;
                    END IF;


                    IF L_APORTESFRS(L_IDX).VALORCOMPROMETIDOFRCAPITAL > 0
                    THEN
                        L_VALORTOTALAPROXIMADOFR := L_VALORTOTALAPROXIMADOFR + (  L_APORTESFRS(L_IDX).CAPITALCOMPROMETIDOCC
                                                                                + L_APORTESFRS(L_IDX).VALORCAPITALDISPONIBLE
                                                                                - L_APORTESFRS(L_IDX).VALORCOMPROMETIDOFRCAPITAL
                                                                                );  
                    ELSE
                        L_VALORTOTALAPROXIMADOFR := L_VALORTOTALAPROXIMADOFR 
                                                  + L_APORTESFRS(L_IDX).CAPITALCOMPROMETIDOCC 
                                                  + L_APORTESFRS(L_IDX).VALORCAPITALDISPONIBLE;
                    END IF;

                EXCEPTION
                WHEN ERROR_SALDO_CAPITAL
                THEN
                    AO_ERROR := '0';
                    AO_MENSAJEERROR :=     'EL SALDO DE CAPITAL ES: ' || L_APORTESFRS(L_IDX).VALORSALDOCAPITAL || 
                                        ' EL CALCULADO ES: ' || L_SALDOCAPITAL || ' APORTE: ' || L_APORTESFRS(L_IDX).CODIGOAPORTE;
                    L_VALORTOTALAPROXIMADOFR := 0;
                    SYS.DBMS_APPLICATION_INFO.SET_MODULE (NULL, NULL);
                    
                WHEN ERROR_CAPITAL_DISPONIBLE
                THEN
                    AO_ERROR := '0';
                    AO_MENSAJEERROR :=     'EL CAPITAL DISPONIBLE ES: ' || L_APORTESFRS(L_IDX).VALORCAPITALDISPONIBLE || 
                                        ' EL CALCULADO ES: ' || L_CAPITALDISPONIBLE || ' APORTE: ' || L_APORTESFRS(L_IDX).CODIGOAPORTE;
                    L_VALORTOTALAPROXIMADOFR := 0;
                    SYS.DBMS_APPLICATION_INFO.SET_MODULE (NULL, NULL);
                    
                WHEN OTHERS
                THEN
                    AO_ERROR := '0';
                    AO_MENSAJEERROR := SUBSTR('ERROR FOR_LOOP_VALIDA: '  || SQLERRM, 1, 1024);
                    L_VALORTOTALAPROXIMADOFR := 0;
                    SYS.DBMS_APPLICATION_INFO.SET_MODULE (NULL, NULL);
                    
                END CALCULOS;
                
                
                L_IDX := L_APORTESFRS.NEXT(L_IDX);
            
            END LOOP FOR_LOOP_VALIDA;
        
            EXIT FOR_LOOP_CREDITOS WHEN C_APORTESFRS%NOTFOUND;  
            
        END LOOP FOR_LOOP_CREDITOS;
        
        CLOSE C_APORTESFRS;
        
        AO_VALORTOTALAPROXIMADOFR := L_VALORTOTALAPROXIMADOFR;
        
        AO_ERROR         := '1';
        AO_MENSAJEERROR := NULL;
        SYS.DBMS_APPLICATION_INFO.SET_MODULE (NULL, NULL);

    EXCEPTION
    WHEN OTHERS
    THEN
        AO_VALORTOTALAPROXIMADOFR := 0;
        
        AO_ERROR := '0';
        AO_MENSAJEERROR := SUBSTR('CRE_VALORAPROXIMADOFRS_P : '  || SQLERRM, 1, 1024);
        SYS.DBMS_APPLICATION_INFO.SET_MODULE (NULL, NULL);

    END CRE_VALORAPROXIMADOFRS_P;


    PROCEDURE CRE_VALIDAVALORESDEBITO_P (
        AI_IDGAF        IN IESS_OWNER.CRE_CREDITOSDEBITOSAC_T.CD_OPERACIONSAC%TYPE,
        AI_IDREGISTRO   IN IESS_OWNER.CRE_CREDITOSDEBITOSAC_T.CD_IDREGISTRO%TYPE,
        AI_CODSOLAFI     IN IESS_OWNER.FRSAFITSOLAFI.CODSOLAFI%TYPE,
        AI_CODTIPSOLAFI IN IESS_OWNER.FRSAFITSOLAFI.CODTIPSOLAFI%TYPE,
        AO_ERROR          IN OUT VARCHAR2,
        AO_MENSAJEERROR IN OUT VARCHAR2)
    IS
        L_VALORTRANCES         IESS_OWNER.REC_TRANSACCION_TBL.TR_MAXIMODEBITAR%TYPE;
        L_VALORTRANFRS         IESS_OWNER.REC_TRANSACCION_TBL.TR_MAXIMODEBITAR%TYPE;
        L_VALORCRUCEFR         IESS_OWNER.REC_TRANSACCION_TBL.TR_MAXIMODEBITAR%TYPE;
        R_CREDITOSDEBITOSAC IESS_OWNER.CRE_CREDITOSDEBITOSAC_T%ROWTYPE;
        X_ERROVALORES       EXCEPTION;

    BEGIN

        SYS.DBMS_APPLICATION_INFO.SET_MODULE (
        MODULE_NAME   => 'CRE_VALIDAVALORESDEBITO_P',
        ACTION_NAME   => 'VALIDA LOS VALORES DE LA LIQUIDACION');


        <<DATOS>>
        BEGIN
            SELECT NVL (CD_VALORAPLICADOFONRES, 0) VALORAPLICADOFONRES, NVL (CD_VALORAPLICADOCES, 0) VALORAPLICADOCES, CD_NUMAFI, CD_NUT
            INTO R_CREDITOSDEBITOSAC.CD_VALORAPLICADOFONRES, R_CREDITOSDEBITOSAC.CD_VALORAPLICADOCES, R_CREDITOSDEBITOSAC.CD_NUMAFI , R_CREDITOSDEBITOSAC.CD_NUT
            FROM PQ_OWNER.CRE_CREDITOSDEBITOSAC_T
            WHERE CD_IDREGISTRO = AI_IDREGISTRO;
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RAISE X_ERROVALORES;
        WHEN TOO_MANY_ROWS THEN
            RAISE X_ERROVALORES;
        WHEN OTHERS THEN
            RAISE X_ERROVALORES;
        END DATOS;
        
        
        <<VALORTRANSACCIONFRS>>
        BEGIN
            SELECT TR_MAXIMODEBITAR
            INTO L_VALORTRANFRS
            FROM IESS_OWNER.REC_TRANSACCION_TBL
            WHERE TR_IDTIPOTRANSACCION IN (19, 28)
            AND TR_CEDULA = R_CREDITOSDEBITOSAC.CD_NUMAFI
            AND TR_NUT = R_CREDITOSDEBITOSAC.CD_NUT
            AND TR_REFERENCIACANCELACION = AI_IDREGISTRO;
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            L_VALORTRANFRS := 0;
        WHEN TOO_MANY_ROWS THEN
            L_VALORTRANFRS := 0;        
        WHEN OTHERS THEN
            L_VALORTRANFRS := 0;
        END VALORTRANSACCIONFRS;
            
        
        IF AI_CODSOLAFI IS NOT NULL 
        THEN
        
            <<VALORCRUCEFRS>>
            BEGIN
                SELECT SUM(NVL(CRU.CAPITALCOMPROMETIDO, 0)) + SUM(NVL(CRU.INTERES, 0)) TOTALCRUCE
                INTO L_VALORCRUCEFR
                FROM IESS_OWNER.KSCRETCREDITOS CRE
                INNER JOIN FRO.FRSAFITCRURESCTAIND CRU
                ON CRE.NUMPREAFI = CRU.NUMPREAFI
                AND CRE.ORDPREAFI = CRU.ORDPREAFI
                AND CRE.CODPRETIP = CRU.CODPRETIP
                AND CRE.CODPRECLA = CRU.CODPRECLA
                WHERE CRE.CR_OPERACIONSAC = AI_IDGAF
                AND CRU.CODSOLAFI = AI_CODSOLAFI
                AND CRU.CODTIPSOLAFI = AI_CODTIPSOLAFI;
            EXCEPTION
            WHEN NO_DATA_FOUND THEN
                L_VALORCRUCEFR := 0;
            WHEN TOO_MANY_ROWS THEN
                L_VALORCRUCEFR := 0;        
            WHEN OTHERS THEN
                L_VALORCRUCEFR := 0;
            END VALORCRUCEFRS;
            
            
            IF     ROUND (R_CREDITOSDEBITOSAC.CD_VALORAPLICADOFONRES, 2) <> ROUND (L_VALORTRANFRS, 2)
                OR ROUND (R_CREDITOSDEBITOSAC.CD_VALORAPLICADOFONRES, 2) <> ROUND (L_VALORCRUCEFR, 2)
                OR ROUND (L_VALORTRANFRS, 2) <> ROUND (L_VALORCRUCEFR, 2)
            THEN
                AO_MENSAJEERROR := 'VALORES DE TRANSACCION, SOLICITUD Y ESTRUCTURA DE DEBITO DIFERENTES FRS.';
                RAISE X_ERROVALORES;
            END IF;
        
        END IF;
         
            
        IF     ROUND (R_CREDITOSDEBITOSAC.CD_VALORAPLICADOFONRES, 2) <> ROUND (L_VALORTRANFRS, 2)
        THEN
            AO_MENSAJEERROR := 'VALORES DE TRANSACCION Y ESTRUCTURA DE DEBITO DIFERENTES FRS.';
            RAISE X_ERROVALORES;
        END IF;
        
        

        <<VALORTRANSACCIONFCE>>
        BEGIN
            SELECT TR_MAXIMODEBITAR
            INTO L_VALORTRANCES
            FROM IESS_OWNER.REC_TRANSACCION_TBL
            WHERE TR_IDTIPOTRANSACCION IN (32, 33)
            AND TR_CEDULA = R_CREDITOSDEBITOSAC.CD_NUMAFI
            AND TR_NUT = R_CREDITOSDEBITOSAC.CD_NUT
            AND TR_REFERENCIACANCELACION = AI_IDREGISTRO;
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            L_VALORTRANCES := 0;
        WHEN TOO_MANY_ROWS THEN
            L_VALORTRANCES := 0;        
        WHEN OTHERS THEN
            L_VALORTRANCES := 0;
        END VALORTRANSACCIONFCE;
        
        
        IF ROUND (R_CREDITOSDEBITOSAC.CD_VALORAPLICADOCES, 2) <> ROUND (L_VALORTRANCES, 2)
        THEN
            AO_MENSAJEERROR := 'VALORES DE TRANSACCION Y ESTRUCTURA DE DEBITO DIFERENTES FCE.';
            RAISE X_ERROVALORES;
        END IF;


        <<VALIDACIONES>>
        BEGIN
            
            IF (L_VALORTRANCES + L_VALORTRANFRS) <> (R_CREDITOSDEBITOSAC.CD_VALORAPLICADOCES + R_CREDITOSDEBITOSAC.CD_VALORAPLICADOFONRES)
            THEN
                AO_MENSAJEERROR := 'VALORES DE TRANSACCION, SOLICITUD Y ESTRUCTURA DE DEBITO DIFERENTES.';
                RAISE X_ERROVALORES;
            END IF;
            
        END VALIDACIONES;

        AO_ERROR         := '1';
        AO_MENSAJEERROR := NULL;
        SYS.DBMS_APPLICATION_INFO.SET_MODULE (NULL, NULL);
        
    EXCEPTION
    WHEN X_ERROVALORES
    THEN
        AO_ERROR := '0';
        SYS.DBMS_APPLICATION_INFO.SET_MODULE (NULL, NULL);
        
    WHEN OTHERS
    THEN
        AO_ERROR := '0';
        AO_MENSAJEERROR := SUBSTR('CRE_VALIDAVALORESDEBITO_P: ' || SQLERRM, 1024);
        SYS.DBMS_APPLICATION_INFO.SET_MODULE (NULL, NULL);
        
    END CRE_VALIDAVALORESDEBITO_P;


    PROCEDURE CRE_AFECTACUENTAFRS_P (
        AI_NUMPREAFI           IN         IESS_OWNER.KSCRETCREDITOS.NUMPREAFI%TYPE,
        AI_ORDPREAFI           IN         IESS_OWNER.KSCRETCREDITOS.ORDPREAFI%TYPE,
        AI_CODPRETIP           IN         IESS_OWNER.KSCRETCREDITOS.CODPRETIP%TYPE,
        AI_CODPRECLA           IN         IESS_OWNER.KSCRETCREDITOS.CODPRECLA%TYPE,
        AI_NUMAFI              IN         IESS_OWNER.KSCRETCREDITOS.NUMAFI%TYPE,
        AI_CODTIPSOLSER        IN         IESS_OWNER.KSCRETCREDITOS.CODTIPSOLSER%TYPE,
        AI_NUMSOLSER           IN         IESS_OWNER.KSCRETCREDITOS.NUMSOLSER%TYPE,
        AI_VALORLIQUIDACION IN         IESS_OWNER.FRSAFITSOLAFI.VALSOLAFI%TYPE,    --VALOR LIQUIDACION ENVIADO POR GAF
        AI_CODSOLIAFI          IN         IESS_OWNER.FRSAFITSOLAFI.CODSOLAFI%TYPE,
        AI_CODTIPSOLIAFI       IN         IESS_OWNER.FRSAFITSOLAFI.CODTIPSOLAFI%TYPE,
        AI_CODDIVPOL           IN         IESS_OWNER.KSPCOTDIVPOL.CODDIVPOL%TYPE,
        AI_IDREGISTRO          IN        IESS_OWNER.REC_TRANSACCION_TBL.TR_REFERENCIACANCELACION%TYPE,
        AI_FECSOLAFI        IN        IESS_OWNER.FRSAFITCRURESCTAIND.FECREGSOL%TYPE,
        AI_OPERACIONSAC        IN         IESS_OWNER.KSCRETCREDITOS.CR_OPERACIONSAC%TYPE,
        AI_NUT              IN         IESS_OWNER.KSCRETSOLICITUDES.NUT%TYPE,
        AI_FECHASACEFEC        IN         IESS_OWNER.REC_TRANSACCION_TBL.TR_FECHACANCELACION%TYPE,
        AO_LIQUIPQ           OUT     IESS_OWNER.FRSAFITSOLAFI.VALSOLAFI%TYPE,
        AO_ERROR            OUT     VARCHAR2,
        AO_MENSAJEERROR        OUT     VARCHAR2)
    IS
        
        L_TIPORETIRO         VARCHAR2 (1);
        L_NETEO              IESS_OWNER.FRSAFITSOLAFI.VALSOLAFI%TYPE;
        L_VALORSOLICITUD     IESS_OWNER.FRSAFITSOLAFI.VALSOLAFI%TYPE;
        L_IDTIPOTRANSACCION IESS_OWNER.REC_TRANSACCION_TBL.TR_IDTIPOTRANSACCION%TYPE;

        X_ERRORPROCESO       EXCEPTION;

    BEGIN

        SYS.DBMS_APPLICATION_INFO.SET_MODULE (
        MODULE_NAME   => 'CRE_AFECTACUENTAFRS_P',
        ACTION_NAME   => 'ORQUESTA PROCESOS PARA EJECUCION DEL DEBITO AUTOMATICO');


        <<LIBERACIONTOTAL>>
        BEGIN
        
            --LIBERA LOS VALORES COMPROMETIDOS DEL PQ  LOS COLOCA EN ADA
            CRE_LIBERATOTALFRS_P (    
                    AI_NUMPREAFI       => AI_NUMPREAFI,
                    AI_ORDPREAFI       => AI_ORDPREAFI,
                    AI_CODPRETIP       => AI_CODPRETIP,
                    AI_CODPRECLA       => AI_CODPRECLA,
                    AI_NUMAFI          => AI_NUMAFI,
                    AI_OPERACIONSAC    => AI_OPERACIONSAC,
                    AI_ESTCTAIND    => 'ADA',
                    AO_ERROR           => AO_ERROR,
                    AO_MENSAJEERROR => AO_MENSAJEERROR);
            IF AO_ERROR = '0'
            THEN
                AO_MENSAJEERROR := SUBSTR('CRE_AFECTACUENTAFRS_P: ' || AO_MENSAJEERROR, 1, 1024);
                RAISE X_ERRORPROCESO;
            END IF;
            
        END LIBERACIONTOTAL;
      

        <<CRUCEVALORES>>
        BEGIN    
        
            --OBTIENE VALOR MAXIMO DISPONIBLE POR POSEE DE FRS PARA EL CRUCE DE VALORES
            CRE_NETEOCUENTAINDIVIDUAL_P (
                    AI_NUMPREAFI      => AI_NUMPREAFI,
                    AI_ORDPREAFI      => AI_ORDPREAFI,
                    AI_CODPRETIP      => AI_CODPRETIP,
                    AI_CODPRECLA      => AI_CODPRECLA,
                    AI_NUMAFI         => AI_NUMAFI,
                    AI_CODSOLAFI      => AI_CODSOLIAFI,
                    AI_CODTIPSOLAFI   => AI_CODTIPSOLIAFI,
                    AI_VALORLIQUIDA   => AI_VALORLIQUIDACION,    --VALOR LIQUIDACION ENVIADO POR GAF
                    AI_OBSERVACION    => 'DEBITO AUTOMATICO',
                    AI_FECSOLAFI      => AI_FECSOLAFI,
                    AI_IMPOSICIONES   => '1',
                    AO_NETEO          => L_NETEO,                --VALOR MAXIMO DISPONIBLE EN FRS. INCLYE INTERESES
                    AO_ERROR          => AO_ERROR,
                    AO_MENSAJEERROR   => AO_MENSAJEERROR);
            IF AO_ERROR = '0'
            THEN
                AO_MENSAJEERROR := SUBSTR('CRE_AFECTACUENTAFRS_P: CRE_NETEOCUENTA: ' || AO_MENSAJEERROR, 1, 1024);
                RAISE X_ERRORPROCESO;
            END IF;

            IF L_NETEO <= 0
            THEN
                L_VALORSOLICITUD := AI_VALORLIQUIDACION;
                L_TIPORETIRO := 'T';
            ELSE
                L_VALORSOLICITUD := AI_VALORLIQUIDACION - L_NETEO;
                L_TIPORETIRO := 'P';
            END IF;
            
            AO_LIQUIPQ := L_VALORSOLICITUD;
        
        END CRUCEVALORES;
        
    
        <<GENERATRANSACCION>>
        BEGIN
        
            --GENERA  DEVUELVE TIPO DE TRANSACCION
            CRE_GENERATRANSACCION_P (
                    AI_TIPOFONDO          => 'FRS',
                    AI_NUMAFI            => AI_NUMAFI,
                    AI_OPERACIONSAC     => AI_OPERACIONSAC,
                    AI_CODTIPSOLSER     => AI_CODTIPSOLSER,
                    AI_NUMSOLSER        => AI_NUMSOLSER,
                    AI_VALORCOBRAR      => L_VALORSOLICITUD,        --VALOR LIQUIDADO EN SOLICITUD FRS
                    AI_TIPORETIRO          => L_TIPORETIRO,
                    AI_IDREGISTRO       => AI_IDREGISTRO,
                    AI_NUT                => AI_NUT,
                    AI_FECHASACEFEC        => AI_FECHASACEFEC,
                    AO_TIPOTRANSACCION  => L_IDTIPOTRANSACCION,
                    AO_ERROR              => AO_ERROR,
                    AO_MENSAJEERROR     => AO_MENSAJEERROR);
            IF AO_ERROR = '0'
            THEN
                AO_MENSAJEERROR := SUBSTR('CRE_AFECTACUENTAFRS_P: ' || AO_MENSAJEERROR, 1, 1024);
                RAISE X_ERRORPROCESO;
            END IF;
            
        END GENERATRANSACCION;


         <<ACTUALIZALIQUIDACION>>
        BEGIN
 
            --ACTUALIZA TABLA DE DEBITO VALORES Y ESTADO CDA - ADA
            CRE_ACTUALIZADEBITOCAN_P (
                    AI_IDGAF          => AI_OPERACIONSAC,
                    AI_VALDEB          => L_VALORSOLICITUD, --VALOR LIQUIDACION SAC ->  AI_VALORLIQUIDACION,
                    AI_CODSOLI         => AI_CODSOLIAFI,
                    AI_TIPODEBITO      => 'FRS',
                    AI_IDTRANSAC       => L_IDTIPOTRANSACCION,
                    AI_IDREGISTRO      => AI_IDREGISTRO,
                    AO_ERROR         => AO_ERROR,
                    AO_MENSAJEERROR    => AO_MENSAJEERROR);
            IF AO_ERROR = '0'
            THEN
                AO_MENSAJEERROR := SUBSTR('CRE_AFECTACUENTAFRS_P: ' || AO_MENSAJEERROR, 1024);
                RAISE X_ERRORPROCESO;
            END IF;
            
        END ACTUALIZALIQUIDACION;
        
        
         <<VALIDAVALORES>>
        BEGIN
    
            --VALIDDA VALORES REGISTRADOS EN TRANSACCION Y DEBITO
            CRE_VALIDAVALORESDEBITO_P (
                    AI_IDGAF        => AI_OPERACIONSAC,
                    AI_IDREGISTRO   => AI_IDREGISTRO,
                    AI_CODSOLAFI    => AI_CODSOLIAFI,
                    AI_CODTIPSOLAFI    => AI_CODTIPSOLIAFI,
                    AO_ERROR          => AO_ERROR,
                    AO_MENSAJEERROR => AO_MENSAJEERROR);    
            IF AO_ERROR = '0'
            THEN
                AO_MENSAJEERROR := SUBSTR('CRE_AFECTACUENTAFRS_P: ' || AO_MENSAJEERROR, 1, 1024);
                RAISE X_ERRORPROCESO;
            END IF;
            
        END VALIDAVALORES;
        

         <<LIBERADESLOQUEA>>
        BEGIN
        
            --EN CASO DE SER TOTAL LIBERA  DESBLOQEA TODO
            IF L_TIPORETIRO = 'T' 
            THEN
                CRE_LIBERADESBLOQUEATOTAL_P (
                        AI_NUMPREAFI      => AI_NUMPREAFI,
                        AI_ORDPREAFI    => AI_ORDPREAFI,
                        AI_CODPRETIP    => AI_CODPRETIP,
                        AI_CODPRECLA    => AI_CODPRECLA,
                        AI_TIPOFONDO      => 'FRS',
                        AI_NUMAFI       => AI_NUMAFI,
                        AI_OPERACIONSAC => AI_OPERACIONSAC,
                        AO_ERROR         => AO_ERROR,
                        AO_MENSAJEERROR => AO_MENSAJEERROR);
                IF AO_ERROR = '0'
                THEN
                    AO_MENSAJEERROR := SUBSTR('CRE_AFECTACUENTAFRS_P: ' || AO_MENSAJEERROR, 1, 1024);
                    RAISE X_ERRORPROCESO;
                END IF;
            END IF;
            
        END LIBERADESLOQUEA;
        

         <<AFECTACUENTA>>
        BEGIN
        
            --AFECTA LA CUENTA INDIVIDUAL DEL AFILIADO
            IESS_OWNER.CRE_DEBITO_AUTOMATICO_PKG.CRE_GENAFECTCTAINDDEBAUT_PRC (
                    AI_NUMPREAFI       => AI_NUMPREAFI,
                    AI_ORDPREAFI       => AI_ORDPREAFI,
                    AI_CODPRETIP       => AI_CODPRETIP,
                    AI_CODPRECLA       => AI_CODPRECLA,
                    AI_CODSOLIAFI      => AI_CODSOLIAFI,
                    AI_CODTIPSOLIAFI   => AI_CODTIPSOLIAFI,
                    AI_NUMAFI          => AI_NUMAFI,
                    AI_TIPORETIRO      => L_TIPORETIRO,
                    AI_CODDIVPOL       => AI_CODDIVPOL,
                    AO_RESPRO          => AO_ERROR,
                    AO_MENERR          => AO_MENSAJEERROR);
            IF AO_ERROR = '0'
            THEN
                AO_MENSAJEERROR := SUBSTR('CRE_AFECTACUENTAFRS_P: CRE_GENAFECTCTAINDDEBAUT_PRC: ' || AO_MENSAJEERROR, 1, 1024);
                RAISE X_ERRORPROCESO;
            END IF;
    
        END AFECTACUENTA;
        
        AO_ERROR         := '1';
        AO_MENSAJEERROR := NULL;
        SYS.DBMS_APPLICATION_INFO.SET_MODULE (NULL, NULL);        
        
    EXCEPTION
    WHEN X_ERRORPROCESO
    THEN
        SYS.DBMS_APPLICATION_INFO.SET_MODULE (NULL, NULL);
            
    WHEN OTHERS
    THEN
        AO_ERROR := '0';
        AO_MENSAJEERROR := SUBSTR('CRE_AFECTACUENTAFRS_P:' || SQLERRM, 1, 1024);
        SYS.DBMS_APPLICATION_INFO.SET_MODULE (NULL, NULL);
        
    END CRE_AFECTACUENTAFRS_P;



    PROCEDURE CRE_EJECUTADEBITOFCE_P (
        AI_NUMAFI       IN    IESS_OWNER.KSCRETCREDITOS.NUMAFI%TYPE,
        AI_NUMPREAFI    IN  IESS_OWNER.KSCRETCREDITOS.NUMPREAFI%TYPE,
        AI_ORDPREAFI    IN  IESS_OWNER.KSCRETCREDITOS.ORDPREAFI%TYPE,
        AI_CODPRETIP    IN  IESS_OWNER.KSCRETCREDITOS.CODPRETIP%TYPE,
        AI_CODPRECLA    IN  IESS_OWNER.KSCRETCREDITOS.CODPRECLA%TYPE,
        AI_CODTIPSOLSER IN  IESS_OWNER.KSCRETCREDITOS.CODTIPSOLSER%TYPE,
        AI_NUMSOLSER    IN  IESS_OWNER.KSCRETCREDITOS.NUMSOLSER%TYPE,
        AI_CODESTPRE    IN  IESS_OWNER.KSCRETCREDITOS.CODESTPRE%TYPE,
        AI_CODIVPOL     IN  IESS_OWNER.KSCRETCREDITOS.CODDIVPOL%TYPE,
        AI_VALORSOL     IN  IESS_OWNER.CRE_CREDITOSDEBITOSAC_T.CD_VALORLIQUIDACIONSAC%TYPE,
        AI_IDREGISTRO   IN  IESS_OWNER.CRE_CREDITOSDEBITOSAC_T.CD_IDREGISTRO%TYPE,
        AI_OPERACIONSAC IN  IESS_OWNER.CRE_CREDITOSDEBITOSAC_T.CD_OPERACIONSAC%TYPE,
        AI_NUT          IN  IESS_OWNER.CRE_CREDITOSDEBITOSAC_T.CD_NUT%TYPE,
        AI_FECHASACEFEC IN  IESS_OWNER.CRE_CREDITOSDEBITOSAC_T.CD_FECEJECUCION%TYPE,
        AI_VALLIQSAC    IN  IESS_OWNER.CRE_CREDITOSDEBITOSAC_T.CD_VALORLIQUIDACIONSAC%TYPE,
        AO_ERROR        IN OUT VARCHAR2,
        AO_MENSAJEERROR IN OUT VARCHAR2)
    IS
        
        -- NOMBRE: CRE_EJECUTADEBITOFCE_P
        -- PROPOSITO: PROCESO QUE REALIZA EL DEBITO AUTOMATICO EN EL MODULO DE CESANTIAS
        -- AUTOR : MARGARITA MONTENEGRO
        -- FECHA CREACION : 24/07/2009
        -- PARAMETROS DE ENTRADA : CODIGO DEL PRESTAMO QUIROGRAFARIO AI_NUMPREAFI, AI_ORDPREAFI, AI_CODPRETIP, AI_CODPRECLA
        --                         VALOR DE LA SOLICITUD - 0 EN CASO DE QUE SEA UN DEBITO DE LA RESOLUCION CI144
        --                         CODIGO DE DIVISION POLITICA
        -- PARAMETROS DE SALIDA:   MANEJO DE ERRORES AO_ERROR, AO_MENSAJEERROR (1 EXITO, 0 FRACASO)

        -- MODIFICACION------------------------------------------
        -- AUTOR                 FECHA                    DESCRIPCION
        -- MARGARITA MONTENEGRO   25/08/2009        SE INSERTA EL REGISTRO RESDEB CON TIPO GEN
        -- MARGARITA MONTENEGRO   30/09/2009        SE ANADE CAMBIO DE ESTADO DE LOS DIVIDENDOS DE LFR A LCE
        --                                          SE COMENTA ASIGANCION L_FRCES := 'FRC' QUE CONTROLABA QUE
        --                                          SIEMPRE QUE EL PRESTAMO SEA DE LA RESOLUCION CD171  LOS DIVIDENDOS
        --                                          SOLO TOMEN LOS ESTADOS CFR, LCE Y QUE EL PRESTAMO TOMARA LOS ESTADOS
        --                                          CFR, ELF
        --MARGARITA MONTENEGRO   21/10/2009         SE VALIDA SI LA FECHA DE ACTUALIZACION O CREACION DE LA CUENTA INDIVIDUAL
        --                                          SE LO REALIZO EL MISMO MES QUE LA EJECUCUION DEL DEBITO.
        --LUIS ESPINOSA          22/09/2010         SE AUMENTO EL PROCESO QUE PERMITE ACTULIZAR LA TABLA (KSAFITCESANTIAS)
        --                                          DE CESANTIAS DEL HOST Y HL. (INC-6125).
        --SANDRA GUAITA          14/04/2023         MEJORAS TECNICAS
        
        
        -- PARA VALIDAR FECHA DE CREACION O ACTUALIZACION DE LA CUENTA INDIVIDUAL SE LO REALIZA EN EL MISMO MES
        -- DE EJECUCION DEL DEBITO
        L_FECHACREACION             IESS_OWNER.CES_CUENTAINDIVIDUALCAB_TBL.CC_FECHACREACION%TYPE;
        L_FECHAACTUALIZACION        IESS_OWNER.CES_CUENTAINDIVIDUALCAB_TBL.CC_FECHAACTUALIZACION%TYPE;
        L_FECHACREACIONES           VARCHAR2 (6);
        L_FECHAACTUALIZACIONES      VARCHAR2 (6);
        L_FECHAACTUAL               VARCHAR2 (6);


        -- PARA ALMACENAR CAPITAL DISPONIBLE Y BLOQUEOS Y CONSISTENCIA DE DATOS (CABECERA Y DETALLE DE CTA INDIVIDUAL)
        L_FECHABLOQUEO              IESS_OWNER.CES_CUENTAINDIVIDUALCAB_TBL.CC_FECHABLOQUEO%TYPE;
        L_FECHADESBLOQUEO           IESS_OWNER.CES_CUENTAINDIVIDUALCAB_TBL.CC_FECHADESBLOQUEO%TYPE;
        L_ESTADO                    IESS_OWNER.CES_CUENTAINDIVIDUALCAB_TBL.CC_ESTADO%TYPE;
        L_CAPITALDISPONIBLE         IESS_OWNER.CES_CUENTAINDIVIDUALCAB_TBL.CC_VALORDISPONIBLECONEXT%TYPE;


        L_INGRESOS                  IESS_OWNER.CES_CUENTAINDIVIDUALDET_TBL.CD_VALORTOTCONEXT%TYPE;
        L_PERIODODESDE              IESS_OWNER.CES_CUENTAINDIVIDUALDET_TBL.CD_PERIODODESDE%TYPE;
        L_PERIODOHASTA              IESS_OWNER.CES_CUENTAINDIVIDUALDET_TBL.CD_PERIODOHASTA%TYPE;
        L_LIQUIDACION               IESS_OWNER.CES_CUENTAINDIVIDUALDET_TBL.CD_VALORTOTCONEXT%TYPE;
        L_VALDEBITOAUX              IESS_OWNER.CES_CUENTAINDIVIDUALDET_TBL.CD_VALORDEBITO%TYPE;
        L_VALORADEBITAR             IESS_OWNER.CES_CUENTAINDIVIDUALDET_TBL.CD_VALORDEBITO%TYPE;
        L_SUMAIVM                   IESS_OWNER.CES_CUENTAINDIVIDUALDET_TBL.CD_VALORTOTCONEXT%TYPE;
        
        
        --CAPITAL Y APORTES GENERAL Y ADICIONAL DISPONIBLE
        L_CAPITALGEN                IESS_OWNER.KSCESTSOLDEBQUIRO.CAPINIGENCONEXT%TYPE;
        L_CAPITALADI                IESS_OWNER.KSCESTSOLDEBQUIRO.CAPINIADICONEXT%TYPE;
        L_APORTEGEN                 IESS_OWNER.KSCESTSOLDEBQUIRO.SUMAPOGENCONEXT%TYPE;
        L_APORTEADI                 IESS_OWNER.KSCESTSOLDEBQUIRO.SUMAPOADICONEXT%TYPE;
        
        
        --RENDIMIENTOS A LA FECHA
        L_RENCAPADIALAFECHA         IESS_OWNER.KSCESTSOLDEBQUIRO.RENDCAPADIFECLIQ%TYPE;
        L_RENCAPGENALAFECHA         IESS_OWNER.KSCESTSOLDEBQUIRO.RENDCAPGENFECLIQ%TYPE;
        L_RENAPOADIALAFECHA         IESS_OWNER.KSCESTSOLDEBQUIRO.RENDAPOADIFECLIQ%TYPE;
        L_RENAPOGENALAFECHA         IESS_OWNER.KSCESTSOLDEBQUIRO.RENDAPOGENFECLIQ%TYPE;
        L_CESANTIAGENUSADA          IESS_OWNER.KSCESTSOLDEBQUIRO.CESGENCONEXT%TYPE;
        L_CESANTIAADIUSADA          IESS_OWNER.KSCESTSOLDEBQUIRO.CESADICONEXT%TYPE;
        
  
        -- PARA VALIDAR LIQUIDACION
        L_VALDEBITO                 IESS_OWNER.REC_TRANSACCION_TBL.TR_VALORCOBRAR%TYPE;
        L_IDTRANSAC                 IESS_OWNER.REC_TRANSACCION_TBL.TR_IDTIPOTRANSACCION%TYPE;
        
        
        --PARA ALMACENAR DATOS DE SOLICITUD DE CESANTIAS
        L_CODSOLDEB                 IESS_OWNER.CES_CUENTAINDIVIDUALDET_TBL.CODSOLDEB%TYPE;
        L_CODDEB                    IESS_OWNER.KSAFITDEBCUECES.CODDEB%TYPE;

               
        -- PARA OBTENER VALORES PRESTAMO E INTERESES
        L_SUMDIVTOT                 IESS_OWNER.KSCRETDOCJUSDEBQUIMORCES.VALTOTDIV%TYPE;
        L_SUMINTMOR                 IESS_OWNER.KSCRETDOCJUSDEBQUIMORCES.VALINTMOR%TYPE;
        L_CESGENUSA                 IESS_OWNER.KSCRETDOCJUSDEBQUIMORCES.VALCESGENUSA%TYPE;
        L_CESADIUSA                 IESS_OWNER.KSCRETDOCJUSDEBQUIMORCES.VALCESADIUSA%TYPE;

        
        L_ESTADOCREDITO             IESS_OWNER.KSCRETCREDITOS.CODESTPRE%TYPE;
        K_RENIVM                    CONSTANT IESS_OWNER.CES_CUENTAINDIVIDUALDET_TBL.TR_ID%TYPE := 'RENIVM';
        K_RESIVM                    CONSTANT IESS_OWNER.CES_CUENTAINDIVIDUALDET_TBL.TR_ID%TYPE := 'RESIVM';
        L_BLOQUEMP                  PLS_INTEGER := 0;
        L_CUENTAREG                   PLS_INTEGER := 0;
        L_RESDEB                    PLS_INTEGER;
        L_RENRESALAFECHA            PLS_INTEGER;
        X_ERRORPROCESO               EXCEPTION;
        X_REVERSOPROCESO            EXCEPTION;
        
    BEGIN

        SYS.DBMS_APPLICATION_INFO.SET_MODULE (
        MODULE_NAME   => 'CRE_AFECTACUENTAFRS_P',
        ACTION_NAME   => 'ORQUESTA PROCESOS PARA EJECUCION DEL DEBITO AUTOMATICO');
        
        -- PARA ALMACENAR CAPITAL DISPONIBLE Y BLOQUEOS Y CONSISTENCIA DE DATOS (CABECERA Y DETALLE DE CTA INDIVIDUAL)

        L_CESGENUSA := 0;
        L_CESADIUSA := 0;
        
        -- PARA ALMACENA CAPITALES Y APORTES DISPONIBLES
        L_CAPITALGEN:= 0;
        L_CAPITALADI:= 0;
        L_APORTEGEN := 0;
        L_APORTEADI := 0;
        L_RESDEB     := 0;
        
        --ENCUENTRO PERIODO DESDE Y HASTA
        L_PERIODODESDE := 0;
        L_PERIODOHASTA := 0;
        
        -- RENDIMIENTOS A LA FECHA
        L_RENCAPADIALAFECHA := 0;
        L_RENCAPGENALAFECHA := 0;
        L_RENAPOADIALAFECHA := 0;
        L_RENAPOGENALAFECHA := 0;
        L_RENRESALAFECHA := 0;
        
        -- PARA VALIDAR LIQUIDACION
        L_LIQUIDACION := 0;

        --PARA ALMACENAR DATOS DE SOLICITUD DE CESANTIAS
        L_CODSOLDEB := 0;
        
        -- VALOR A DEBITAR
        L_VALDEBITO := 0;
        
        -- PARA AFECTACION DE CUENTA INCIVIDUAL
        L_VALDEBITOAUX := 0;
        L_VALORADEBITAR := 0;
        
        -- CODIGO DEL DEBITO DE LA TABLA KSAFITDEBCUECES
        L_CODDEB := 0;
        
        -- PARA OBTENER VALORES PRESTAMO E INTERESES
        L_SUMDIVTOT := 0;
        L_SUMINTMOR := 0;
        L_CESANTIAGENUSADA := 0;
        L_CESANTIAADIUSADA := 0;


        <<BUSCAREGISTRO>>
        BEGIN
            SELECT COUNT (1)
            INTO L_CUENTAREG
            FROM PQ_OWNER.CRE_CREDITOSDEBITOSAC_T DIV
            WHERE DIV.CD_ESTADOAFECOPE IN ('ENV', 'ADA')
            AND DIV.CD_ESTADOPROCESO IN ('SDE', 'EJE')
            AND DIV.CD_IDREGISTRO = AI_IDREGISTRO;
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            AO_ERROR := '0';
            AO_MENSAJEERROR := 'NO SE ENCONTRO LIQUIDACION PARA PROCESAR';
            RAISE X_ERRORPROCESO;
        WHEN TOO_MANY_ROWS THEN
            AO_ERROR := '0';
            AO_MENSAJEERROR := 'NO SE ENCONTRO LIQUIDACION PARA PROCESAR';
            RAISE X_ERRORPROCESO;       
        WHEN OTHERS THEN
            AO_ERROR := '0';
            AO_MENSAJEERROR := SUBSTR('NO SE ENCONTRO LIQUIDACION PARA PROCESAR: ' || SQLERRM, 1, 1024);
            RAISE X_ERRORPROCESO;
        END BUSCAREGISTRO;


        <<VALORDETALLE>>
        BEGIN
            SELECT SUM (NVL (CD_VALORTOTCONEXT, 0))
            INTO L_SUMAIVM
            FROM IESS_OWNER.CES_CUENTAINDIVIDUALDET_TBL
            WHERE CC_CEDULAID = AI_NUMAFI
            AND TR_ID IN (K_RENIVM, K_RESIVM)
            AND CODSOLDEB IS NULL
            AND CD_VALORDEBITO IS NULL
            AND ID_SOLDES IS NULL
            AND CD_VALORTOTSINEXT = 0;
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            AO_ERROR := '0';
            AO_MENSAJEERROR := 'CUENTA INDIVIDUALDET DE CESANTIAS NO CREADA';
            RAISE X_ERRORPROCESO;
        WHEN TOO_MANY_ROWS THEN
            AO_ERROR := '0';
            AO_MENSAJEERROR := 'CUENTA INDIVIDUALDET DE CESANTIAS NO CREADA';
            RAISE X_ERRORPROCESO;
        WHEN OTHERS THEN
            AO_ERROR := '0';
            AO_MENSAJEERROR := SUBSTR('CUENTA INDIVIDUALDET DE CESANTIAS NO CREADA: ' || SQLERRM, 1, 1024);
            RAISE X_ERRORPROCESO;
        END VALORDETALLE;
        

        <<VALORCABECERA>>
        BEGIN
            SELECT NVL (CC_VALORDISPONIBLECONEXT, 0),
            CC_FECHABLOQUEO,
            CC_FECHADESBLOQUEO,
            NVL(CC_ESTADO, 'INA'),
            CC_FECHACREACION,
            CC_FECHAACTUALIZACION
            INTO L_CAPITALDISPONIBLE,
            L_FECHABLOQUEO,
            L_FECHADESBLOQUEO,
            L_ESTADO,
            L_FECHACREACION,
            L_FECHAACTUALIZACION
            FROM IESS_OWNER.CES_CUENTAINDIVIDUALCAB_TBL
            WHERE CC_CEDULAID = AI_NUMAFI;
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            AO_ERROR := '0';
            AO_MENSAJEERROR := 'CUENTA INDIVIDUALCAB DE CESANTIAS NO CREADA';
            RAISE X_ERRORPROCESO;        
        WHEN TOO_MANY_ROWS THEN
            AO_ERROR := '0';
            AO_MENSAJEERROR := 'CUENTA INDIVIDUALCAB DE CESANTIAS NO CREADA';
            RAISE X_ERRORPROCESO;
        WHEN OTHERS THEN
            AO_ERROR := '0';
            AO_MENSAJEERROR := SUBSTR('CUENTA INDIVIDUALCAB DE CESANTIAS NO CREADA: ' || SQLERRM, 1, 1024);
            RAISE X_ERRORPROCESO;
        END VALORCABECERA;
            

        <<ACTUALIZACESANTIA>>
        BEGIN
            -- VALIDR SI LA FECHA DE CREACION O ACTUALIZACION DE LA CUENTA INDIVIDUAL ES EN EL MISMO MES DE EJECUCION DEL DEBITO
            L_FECHACREACIONES         := TO_CHAR (L_FECHACREACION, 'MMYYYY');
            L_FECHAACTUALIZACIONES     := TO_CHAR (L_FECHAACTUALIZACION, 'MMYYYY');
            L_FECHAACTUAL             := TO_CHAR (G_FECHADEBITO, 'MMYYYY'); 
            
            IF (NVL(L_FECHACREACIONES, '-') <> L_FECHAACTUAL AND NVL(L_FECHAACTUALIZACIONES, '-') <> L_FECHAACTUAL)
            THEN
                 AO_ERROR := '0';
                 AO_MENSAJEERROR := 'CUENTA INDIVIDUAL DE CESANTIAS NO ACTUALIZADA AL ' || TO_CHAR (ADD_MONTHS (G_FECHADEBITO, -1), 'MMYYYY');
                 RAISE X_ERRORPROCESO;
            END IF;
        END ACTUALIZACESANTIA;
        
    
        <<ESTADOCESANTIA>>
        BEGIN        
            IF L_ESTADO = 'INA'
            THEN

                --VALIDAMOS SI ESTA INACTIVA ES POR MORA PATRONAL 25112019
                IESS_OWNER.CES_CUENTACESANTIAAPORTES_PKG.PVALIDARBLOQUEOMP (P_NUMAFI => AI_NUMAFI, P_BLOQUEMP => L_BLOQUEMP);

                IF NVL(L_BLOQUEMP, 0) = 0
                THEN
                    AO_ERROR := '0';
                    AO_MENSAJEERROR := 'CUENTA INDIVIDUAL DE CESANTIAS INACTIVA';
                    RAISE X_ERRORPROCESO;
                END IF;
            
            END IF;
        END ESTADOCESANTIA;


        <<INGRESOCESANTIA>>
        BEGIN
            SELECT NVL (SUM (NVL (A.CD_VALORTOTCONEXT, 0)), 0)
            INTO L_INGRESOS
            FROM IESS_OWNER.CES_CUENTAINDIVIDUALDET_TBL A
            WHERE A.CC_CEDULAID = AI_NUMAFI
            AND A.TR_ID IN
               ('APO',
                'CAP',
                'RESDEB',
                'RENCAP',
                'RENAPO',
                'RENRES',
                'RENSGD',
                'RESSGD')
            AND A.CODSOLDEB IS NULL
            AND A.SC_NUMSOLICITUD IS NULL
            AND A.CD_SECCTADET > 0
            AND A.ID_SOLDES IS NULL;
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            L_INGRESOS := 0;
        WHEN TOO_MANY_ROWS THEN
            L_INGRESOS := 0;
        WHEN OTHERS THEN
            L_INGRESOS := 0;
        END INGRESOCESANTIA;


        <<DISPONIBLECESANTIA>>
        BEGIN
        
            L_CAPITALDISPONIBLE := L_CAPITALDISPONIBLE - NVL (L_SUMAIVM, 0);
            IF ROUND (L_CAPITALDISPONIBLE, 2) <> ROUND ( (L_INGRESOS), 2)
            THEN
                AO_ERROR := '0';
                AO_MENSAJEERROR := 'INCONSISTENCIA EN CABECERA Y DETALLE DE CTA INDIVIDUAL CESANTIAS';
                RAISE X_ERRORPROCESO;
            END IF;

            IF L_CAPITALDISPONIBLE = 0
            THEN
                AO_ERROR := '0';
                AO_MENSAJEERROR := 'NO HAY VALOR DISPONIBLE EN CESANTIAS';
                RAISE X_ERRORPROCESO;
            END IF;
        
        END DISPONIBLECESANTIA;

    
        <<CAMBIAESTADOCREDITO>>
        BEGIN
            L_LIQUIDACION     := AI_VALORSOL;
            L_ESTADOCREDITO    := AI_CODESTPRE;

            CRE_ACTUALIZAESTADOCRE_P (
                    AI_NUMPREAFI       => AI_NUMPREAFI,
                    AI_ORDPREAFI       => AI_ORDPREAFI,
                    AI_CODPRETIP       => AI_CODPRETIP,
                    AI_CODPRECLA       => AI_CODPRECLA,
                    AI_ESTADOANTES    => L_ESTADOCREDITO,
                    AI_ESTADONUEVO    => 'ELC',
                    AO_ERROR          => AO_ERROR,
                    AO_MENSAJEERROR    => AO_MENSAJEERROR);
            IF AO_ERROR = '0'
            THEN
                RAISE X_REVERSOPROCESO;
            END IF;
            
        END CAMBIAESTADOCREDITO;

        
        <<GENERASOLICITUD>>
        BEGIN
        
            IESS_OWNER.CRE_DEBITO_AUTOMATICO_PKG.CRE_SOLICITUDDEBITOCES_PRC (
                        AINNUMAFI       => AI_NUMAFI,
                        AINCODDIVPOL    => AI_CODIVPOL,
                        AINNUMPREAFI    => AI_NUMPREAFI,
                        AINORDPREAFI    => AI_ORDPREAFI,
                        AINCODPRETIP    => AI_CODPRETIP,
                        AINCODPRECLA    => AI_CODPRECLA,
                        AI_IDREGISTRO   => AI_IDREGISTRO,
                        AONCODSOLDEB    => L_CODSOLDEB,
                        AOCMENERR       => AO_MENSAJEERROR,
                        AOCRESPRO       => AO_ERROR);

            IF AO_ERROR = '0'
            THEN
                AO_MENSAJEERROR := SUBSTR('CRE_SOLICITUDDEBITOCES_PRC: ' || AO_MENSAJEERROR, 1, 1024);
                RAISE X_REVERSOPROCESO;
            END IF;
        
        END GENERASOLICITUD;


        <<ACTUALIZASOLICITUD>>
        BEGIN
        
            UPDATE IESS_OWNER.CES_CUENTAINDIVIDUALDET_TBL
            SET CODSOLDEB = L_CODSOLDEB, CD_FECHADEBITO = TRUNC(SYSDATE), CD_VALORDEBITO = 0
            WHERE CC_CEDULAID = AI_NUMAFI
            AND SC_NUMSOLICITUD IS NULL
            AND CODSOLDEB IS NULL
            AND ID_SOLDES IS NULL
            AND ( 
                TR_ID NOT IN (
                        SELECT T.TR_ID
                        FROM IESS_OWNER.CES_TIPOREGISTROS_TBL T
                        WHERE T.TR_TIPOTRX = 'EGR'
                )
                AND TR_ID NOT IN (K_RESIVM, K_RENIVM)
            )
            AND CD_SECCTADET > 0;
            IF SQL%NOTFOUND
            THEN
                 AO_ERROR := '0';
                 AO_MENSAJEERROR := 'NO SE ACTUALIZO DETALLE DE CTA INDIVIDUAL ';
                 RAISE X_REVERSOPROCESO;
            END IF;

        END ACTUALIZASOLICITUD;



        IF L_LIQUIDACION > L_CAPITALDISPONIBLE
        THEN
            L_VALDEBITO := L_CAPITALDISPONIBLE;
        ELSE
            L_VALDEBITO := L_LIQUIDACION;
        END IF;
     
        L_VALORADEBITAR := L_VALDEBITO;
        L_VALDEBITOAUX     := L_VALDEBITO;

        -- 1 RENDIMIENTO DE RESIDUO DE DEBITO A LA FECHA
        IESS_OWNER.CRE_DEBITO_AUTOMATICO_PKG.CRE_AFECTACTAINDIVIDUALCES_PRC (
                    AINNUMAFI         => AI_NUMAFI,
                    AINNUMPREAFI      => AI_NUMPREAFI,
                    AINORDPREAFI      => AI_ORDPREAFI,
                    AINCODPRETIP      => AI_CODPRETIP,
                    AINCODPRECLA      => AI_CODPRECLA,
                    AICTR_ID          => 'RENRES',
                    AICTC_ID          => 'GEN',
                    AINVALDEBITO      => L_VALORADEBITAR,
                    AINCODSOLDEB      => L_CODSOLDEB,
                    AONVALCES         => L_RENRESALAFECHA,
                    AOVALDEBAUX       => L_VALDEBITOAUX,
                    AOCMENERR         => AO_MENSAJEERROR,
                    AOCRESPRO         => AO_ERROR);
        IF AO_ERROR = '0'
        THEN
            AO_MENSAJEERROR := SUBSTR('RENRES-GEN: ' || AO_MENSAJEERROR, 1, 1024);
            RAISE X_REVERSOPROCESO;
        END IF;

        IF L_RENRESALAFECHA > 0
        THEN
            L_SUMINTMOR := L_SUMINTMOR + L_VALORADEBITAR - L_VALDEBITOAUX;
            L_CESGENUSA := L_CESGENUSA + L_VALORADEBITAR - L_VALDEBITOAUX;
        END IF;


        -- 2 RENDIMIENTOS DE CAPITAL INICIAL DE CESANTIA GENERAL
        IF L_VALDEBITOAUX > 0
        THEN
            L_VALORADEBITAR := L_VALDEBITOAUX;
            IESS_OWNER.CRE_DEBITO_AUTOMATICO_PKG.CRE_AFECTACTAINDIVIDUALCES_PRC (
                    AINNUMAFI         => AI_NUMAFI,
                    AINNUMPREAFI      => AI_NUMPREAFI,
                    AINORDPREAFI      => AI_ORDPREAFI,
                    AINCODPRETIP      => AI_CODPRETIP,
                    AINCODPRECLA      => AI_CODPRECLA,
                    AICTR_ID          => 'RENCAP',
                    AICTC_ID          => 'GEN',
                    AINVALDEBITO      => L_VALORADEBITAR,
                    AINCODSOLDEB      => L_CODSOLDEB,
                    AONVALCES         => L_RENCAPGENALAFECHA,
                    AOVALDEBAUX       => L_VALDEBITOAUX,
                    AOCMENERR         => AO_MENSAJEERROR,
                    AOCRESPRO         => AO_ERROR);
            IF AO_ERROR = '0'
            THEN
                AO_MENSAJEERROR := SUBSTR('RENCAP-GEN: ' || AO_MENSAJEERROR, 1, 1024);
                RAISE X_REVERSOPROCESO;
            END IF;
        END IF;


        IF L_RENCAPGENALAFECHA > 0
        THEN
            L_SUMINTMOR := L_SUMINTMOR + L_VALORADEBITAR - L_VALDEBITOAUX;
            L_CESGENUSA := L_CESGENUSA + L_VALORADEBITAR - L_VALDEBITOAUX;
        END IF;
        

        
        -- 3 RENDIMIENTOS DE CAPITAL INICIAL DE CESANTIA ADICIONAL
        IF L_VALDEBITOAUX > 0
        THEN
            L_VALORADEBITAR := L_VALDEBITOAUX;
            IESS_OWNER.CRE_DEBITO_AUTOMATICO_PKG.CRE_AFECTACTAINDIVIDUALCES_PRC (
                    AINNUMAFI         => AI_NUMAFI,
                    AINNUMPREAFI      => AI_NUMPREAFI,
                    AINORDPREAFI      => AI_ORDPREAFI,
                    AINCODPRETIP      => AI_CODPRETIP,
                    AINCODPRECLA      => AI_CODPRECLA,
                    AICTR_ID          => 'RENCAP',
                    AICTC_ID          => 'ADI',
                    AINVALDEBITO      => L_VALORADEBITAR,
                    AINCODSOLDEB      => L_CODSOLDEB,
                    AONVALCES         => L_RENCAPADIALAFECHA,
                    AOVALDEBAUX       => L_VALDEBITOAUX,
                    AOCMENERR         => AO_MENSAJEERROR,
                    AOCRESPRO         => AO_ERROR);
            IF AO_ERROR = '0'
            THEN
                AO_MENSAJEERROR := SUBSTR('RENCAP-ADI: ' || AO_MENSAJEERROR, 1, 1024);
                RAISE X_REVERSOPROCESO;
            END IF;
        END IF;


        IF L_RENCAPADIALAFECHA > 0
        THEN
            L_SUMINTMOR := L_SUMINTMOR + L_VALORADEBITAR - L_VALDEBITOAUX;
            L_CESADIUSA := L_CESADIUSA + L_VALORADEBITAR - L_VALDEBITOAUX;
        END IF;


        -- 4 RESIDUO DEL DEBITO
        IF L_VALDEBITOAUX > 0
        THEN
            L_VALORADEBITAR := L_VALDEBITOAUX;
            IESS_OWNER.CRE_DEBITO_AUTOMATICO_PKG.CRE_AFECTACTAINDIVIDUALCES_PRC (
                    AINNUMAFI         => AI_NUMAFI,
                    AINNUMPREAFI      => AI_NUMPREAFI,
                    AINORDPREAFI      => AI_ORDPREAFI,
                    AINCODPRETIP      => AI_CODPRETIP,
                    AINCODPRECLA      => AI_CODPRECLA,
                    AICTR_ID          => 'RESDEB',
                    AICTC_ID          => 'GEN',
                    AINVALDEBITO      => L_VALORADEBITAR,
                    AINCODSOLDEB      => L_CODSOLDEB,
                    AONVALCES         => L_RESDEB,
                    AOVALDEBAUX       => L_VALDEBITOAUX,
                    AOCMENERR         => AO_MENSAJEERROR,
                    AOCRESPRO         => AO_ERROR);
            IF AO_ERROR = '0'
            THEN
                AO_MENSAJEERROR := SUBSTR('RESDEB-GEN: ' || AO_MENSAJEERROR, 1, 1024);
                RAISE X_REVERSOPROCESO;
            END IF;
        END IF;


        IF L_RESDEB > 0
        THEN
            L_SUMDIVTOT := L_SUMDIVTOT + L_VALORADEBITAR - L_VALDEBITOAUX;
            L_CESGENUSA := L_CESGENUSA + L_VALORADEBITAR - L_VALDEBITOAUX;
        END IF;
        
        
        -- 5 CAPITAL INICIAL DE CESANTIA GENERAL
        IF L_VALDEBITOAUX > 0
        THEN
            L_VALORADEBITAR := L_VALDEBITOAUX;
            IESS_OWNER.CRE_DEBITO_AUTOMATICO_PKG.CRE_AFECTACTAINDIVIDUALCES_PRC (
                    AINNUMAFI         => AI_NUMAFI,
                    AINNUMPREAFI      => AI_NUMPREAFI,
                    AINORDPREAFI      => AI_ORDPREAFI,
                    AINCODPRETIP      => AI_CODPRETIP,
                    AINCODPRECLA      => AI_CODPRECLA,
                    AICTR_ID          => 'CAP',
                    AICTC_ID          => 'GEN',
                    AINVALDEBITO      => L_VALORADEBITAR,
                    AINCODSOLDEB      => L_CODSOLDEB,
                    AONVALCES         => L_CAPITALGEN,
                    AOVALDEBAUX       => L_VALDEBITOAUX,
                    AOCMENERR         => AO_MENSAJEERROR,
                    AOCRESPRO         => AO_ERROR);
            IF AO_ERROR = '0'
            THEN
                AO_MENSAJEERROR := SUBSTR('CAP-GEN: ' || AO_MENSAJEERROR, 1, 1024);
                RAISE X_REVERSOPROCESO;
            END IF;
        END IF;


        IF L_CAPITALGEN > 0
        THEN
            L_SUMDIVTOT := L_SUMDIVTOT + L_VALORADEBITAR - L_VALDEBITOAUX;
            L_CESGENUSA := L_CESGENUSA + L_VALORADEBITAR - L_VALDEBITOAUX;
        END IF;

        -- 6 CAPITAL INICIAL DE CESANTIA  ADICIONAL
        IF L_VALDEBITOAUX > 0
        THEN
            L_VALORADEBITAR := L_VALDEBITOAUX;
            IESS_OWNER.CRE_DEBITO_AUTOMATICO_PKG.CRE_AFECTACTAINDIVIDUALCES_PRC (
                    AINNUMAFI         => AI_NUMAFI,
                    AINNUMPREAFI      => AI_NUMPREAFI,
                    AINORDPREAFI      => AI_ORDPREAFI,
                    AINCODPRETIP      => AI_CODPRETIP,
                    AINCODPRECLA      => AI_CODPRECLA,
                    AICTR_ID          => 'CAP',
                    AICTC_ID          => 'ADI',
                    AINVALDEBITO      => L_VALORADEBITAR,
                    AINCODSOLDEB      => L_CODSOLDEB,
                    AONVALCES         => L_CAPITALADI,
                    AOVALDEBAUX       => L_VALDEBITOAUX,
                    AOCMENERR         => AO_MENSAJEERROR,
                    AOCRESPRO         => AO_ERROR);
            IF AO_ERROR = '0'
            THEN
                AO_MENSAJEERROR := SUBSTR('CAP-ADI: ' || AO_MENSAJEERROR, 1, 1024);
                RAISE X_REVERSOPROCESO;
            END IF;
        END IF;


        IF L_CAPITALADI > 0
        THEN
            L_SUMDIVTOT := L_SUMDIVTOT + L_VALORADEBITAR - L_VALDEBITOAUX;
            L_CESADIUSA := L_CESADIUSA + L_VALORADEBITAR - L_VALDEBITOAUX;
        END IF;
        

        
        -- 7 RENDIMIENTOS DE APORTES DE CESANTIA GENERAL
        IF L_VALDEBITOAUX > 0
        THEN
            L_VALORADEBITAR := L_VALDEBITOAUX;
            IESS_OWNER.CRE_DEBITO_AUTOMATICO_PKG.CRE_AFECTACTAINDIVIDUALCES_PRC (
                    AINNUMAFI         => AI_NUMAFI,
                    AINNUMPREAFI      => AI_NUMPREAFI,
                    AINORDPREAFI      => AI_ORDPREAFI,
                    AINCODPRETIP      => AI_CODPRETIP,
                    AINCODPRECLA      => AI_CODPRECLA,
                    AICTR_ID          => 'RENAPO',
                    AICTC_ID          => 'GEN',
                    AINVALDEBITO      => L_VALORADEBITAR,
                    AINCODSOLDEB      => L_CODSOLDEB,
                    AONVALCES         => L_RENAPOGENALAFECHA,
                    AOVALDEBAUX       => L_VALDEBITOAUX,
                    AOCMENERR         => AO_MENSAJEERROR,
                    AOCRESPRO         => AO_ERROR);
            IF AO_ERROR = '0'
            THEN
                AO_MENSAJEERROR := SUBSTR('RENAPO-GEN: ' || AO_MENSAJEERROR, 1, 1024);
                RAISE X_REVERSOPROCESO;
            END IF;
        END IF;


        IF L_RENAPOGENALAFECHA > 0
        THEN
            L_SUMINTMOR := L_SUMINTMOR + L_VALORADEBITAR - L_VALDEBITOAUX;
            L_CESGENUSA := L_CESGENUSA + L_VALORADEBITAR - L_VALDEBITOAUX;
        END IF;
        
        
        -- 8 RENDIMIENTOS DE APORTES DE CESANTIA ADICIONAL
        IF L_VALDEBITOAUX > 0
        THEN
            L_VALORADEBITAR := L_VALDEBITOAUX;
            IESS_OWNER.CRE_DEBITO_AUTOMATICO_PKG.CRE_AFECTACTAINDIVIDUALCES_PRC (
                    AINNUMAFI         => AI_NUMAFI,
                    AINNUMPREAFI      => AI_NUMPREAFI,
                    AINORDPREAFI      => AI_ORDPREAFI,
                    AINCODPRETIP      => AI_CODPRETIP,
                    AINCODPRECLA      => AI_CODPRECLA,
                    AICTR_ID          => 'RENAPO',
                    AICTC_ID          => 'ADI',
                    AINVALDEBITO      => L_VALORADEBITAR,
                    AINCODSOLDEB      => L_CODSOLDEB,
                    AONVALCES         => L_RENAPOADIALAFECHA,
                    AOVALDEBAUX       => L_VALDEBITOAUX,
                    AOCMENERR         => AO_MENSAJEERROR,
                    AOCRESPRO         => AO_ERROR);
            IF AO_ERROR = '0'
            THEN
                AO_MENSAJEERROR := SUBSTR('RENAPO-ADI: ' || AO_MENSAJEERROR, 1, 1024);
                RAISE X_REVERSOPROCESO;
            END IF;
        END IF;


        IF L_RENAPOADIALAFECHA > 0
        THEN
            L_SUMINTMOR := L_SUMINTMOR + L_VALORADEBITAR - L_VALDEBITOAUX;
            L_CESADIUSA := L_CESADIUSA + L_VALORADEBITAR - L_VALDEBITOAUX;
        END IF;
        
        
        -- 9 APORTES DE CESANTIA GENERAL
        IF L_VALDEBITOAUX > 0
        THEN
            L_VALORADEBITAR := L_VALDEBITOAUX;
            IESS_OWNER.CRE_DEBITO_AUTOMATICO_PKG.CRE_AFECTACTAINDIVIDUALCES_PRC (
                    AINNUMAFI         => AI_NUMAFI,
                    AINNUMPREAFI      => AI_NUMPREAFI,
                    AINORDPREAFI      => AI_ORDPREAFI,
                    AINCODPRETIP      => AI_CODPRETIP,
                    AINCODPRECLA      => AI_CODPRECLA,
                    AICTR_ID          => 'APO',
                    AICTC_ID          => 'GEN',
                    AINVALDEBITO      => L_VALORADEBITAR,
                    AINCODSOLDEB      => L_CODSOLDEB,
                    AONVALCES         => L_APORTEGEN,
                    AOVALDEBAUX       => L_VALDEBITOAUX,
                    AOCMENERR         => AO_MENSAJEERROR,
                    AOCRESPRO         => AO_ERROR);
            IF AO_ERROR = '0'
            THEN
                AO_MENSAJEERROR := SUBSTR('APO-GEN: ' || AO_MENSAJEERROR, 1, 1024);
                RAISE X_REVERSOPROCESO;
            END IF;
        END IF;


        IF L_APORTEGEN > 0
        THEN
            L_SUMDIVTOT := L_SUMDIVTOT + L_VALORADEBITAR - L_VALDEBITOAUX;
            L_CESGENUSA := L_CESGENUSA + L_VALORADEBITAR - L_VALDEBITOAUX;
        END IF;


        -- 10 APORTES DE CESANTIA ADICIONAL
        IF L_VALDEBITOAUX > 0
        THEN
            L_VALORADEBITAR := L_VALDEBITOAUX;
            IESS_OWNER.CRE_DEBITO_AUTOMATICO_PKG.CRE_AFECTACTAINDIVIDUALCES_PRC (
                    AINNUMAFI         => AI_NUMAFI,
                    AINNUMPREAFI      => AI_NUMPREAFI,
                    AINORDPREAFI      => AI_ORDPREAFI,
                    AINCODPRETIP      => AI_CODPRETIP,
                    AINCODPRECLA      => AI_CODPRECLA,
                    AICTR_ID          => 'APO',
                    AICTC_ID          => 'ADI',
                    AINVALDEBITO      => L_VALORADEBITAR,
                    AINCODSOLDEB      => L_CODSOLDEB,
                    AONVALCES         => L_APORTEADI,
                    AOVALDEBAUX       => L_VALDEBITOAUX,
                    AOCMENERR         => AO_MENSAJEERROR,
                    AOCRESPRO         => AO_ERROR);
            IF AO_ERROR = '0'
            THEN
                AO_MENSAJEERROR := SUBSTR('APO-ADI: ' || AO_MENSAJEERROR, 1, 1024);
                RAISE X_REVERSOPROCESO;
            END IF;
        END IF;


        IF L_APORTEADI > 0
        THEN
            L_SUMDIVTOT := L_SUMDIVTOT + L_VALORADEBITAR - L_VALDEBITOAUX;
            L_CESADIUSA := L_CESADIUSA + L_VALORADEBITAR - L_VALDEBITOAUX;
        END IF;
        

          -- 11 RENDIMIENTOS DE RENSGD INICIAL DE CESANTIA GENERAL
        IF L_VALDEBITOAUX > 0
        THEN
            L_VALORADEBITAR := L_VALDEBITOAUX;
            IESS_OWNER.CRE_DEBITO_AUTOMATICO_PKG.CRE_AFECTACTAINDIVIDUALCES_PRC (
                    AINNUMAFI         => AI_NUMAFI,
                    AINNUMPREAFI      => AI_NUMPREAFI,
                    AINORDPREAFI      => AI_ORDPREAFI,
                    AINCODPRETIP      => AI_CODPRETIP,
                    AINCODPRECLA      => AI_CODPRECLA,
                    AICTR_ID          => 'RENSGD',
                    AICTC_ID          => 'GEN',
                    AINVALDEBITO      => L_VALORADEBITAR,
                    AINCODSOLDEB      => L_CODSOLDEB,
                    AONVALCES         => L_RENCAPGENALAFECHA,
                    AOVALDEBAUX       => L_VALDEBITOAUX,
                    AOCMENERR         => AO_MENSAJEERROR,
                    AOCRESPRO         => AO_ERROR);
            IF AO_ERROR = '0'
            THEN
                AO_MENSAJEERROR := SUBSTR('RENSGD-GEN: ' || AO_MENSAJEERROR, 1, 1024);
                RAISE X_REVERSOPROCESO;
            END IF;
        END IF;


        IF L_RENCAPGENALAFECHA > 0
        THEN
            L_SUMINTMOR := L_SUMINTMOR + L_VALORADEBITAR - L_VALDEBITOAUX;
            L_CESGENUSA := L_CESGENUSA + L_VALORADEBITAR - L_VALDEBITOAUX;
        END IF;
        
        
        -- 12 RENDIMIENTOS DE CAPITAL INICIAL DE CESANTIA ADICIONAL
        IF L_VALDEBITOAUX > 0
        THEN
            L_VALORADEBITAR := L_VALDEBITOAUX;
            IESS_OWNER.CRE_DEBITO_AUTOMATICO_PKG.CRE_AFECTACTAINDIVIDUALCES_PRC (
                    AINNUMAFI         => AI_NUMAFI,
                    AINNUMPREAFI      => AI_NUMPREAFI,
                    AINORDPREAFI      => AI_ORDPREAFI,
                    AINCODPRETIP      => AI_CODPRETIP,
                    AINCODPRECLA      => AI_CODPRECLA,
                    AICTR_ID          => 'RENSGD',
                    AICTC_ID          => 'ADI',
                    AINVALDEBITO      => L_VALORADEBITAR,
                    AINCODSOLDEB      => L_CODSOLDEB,
                    AONVALCES         => L_RENCAPADIALAFECHA,
                    AOVALDEBAUX       => L_VALDEBITOAUX,
                    AOCMENERR         => AO_MENSAJEERROR,
                    AOCRESPRO         => AO_ERROR);
            IF AO_ERROR = '0'
            THEN
                AO_MENSAJEERROR := SUBSTR('RENSGD-ADI: ' || AO_MENSAJEERROR, 1, 1024);
                RAISE X_REVERSOPROCESO;
            END IF;
        END IF;


        IF L_RENCAPADIALAFECHA > 0
        THEN
            L_SUMINTMOR := L_SUMINTMOR + L_VALORADEBITAR - L_VALDEBITOAUX;
            L_CESADIUSA := L_CESADIUSA + L_VALORADEBITAR - L_VALDEBITOAUX;
        END IF;
        
        
        -- 13 RENDIMIENTOS DE RESSGD INICIAL DE CESANTIA GENERAL
        IF L_VALDEBITOAUX > 0
        THEN
            L_VALORADEBITAR := L_VALDEBITOAUX;
            IESS_OWNER.CRE_DEBITO_AUTOMATICO_PKG.CRE_AFECTACTAINDIVIDUALCES_PRC (
                    AINNUMAFI         => AI_NUMAFI,
                    AINNUMPREAFI      => AI_NUMPREAFI,
                    AINORDPREAFI      => AI_ORDPREAFI,
                    AINCODPRETIP      => AI_CODPRETIP,
                    AINCODPRECLA      => AI_CODPRECLA,
                    AICTR_ID          => 'RESSGD',
                    AICTC_ID          => 'GEN',
                    AINVALDEBITO      => L_VALORADEBITAR,
                    AINCODSOLDEB      => L_CODSOLDEB,
                    AONVALCES         => L_RENCAPGENALAFECHA,
                    AOVALDEBAUX       => L_VALDEBITOAUX,
                    AOCMENERR         => AO_MENSAJEERROR,
                    AOCRESPRO         => AO_ERROR);
            IF AO_ERROR = '0'
            THEN
                AO_MENSAJEERROR := SUBSTR('RESSGD-GEN: ' || AO_MENSAJEERROR, 1, 1024);
                RAISE X_REVERSOPROCESO;
            END IF;
        END IF;


        IF L_RENCAPGENALAFECHA > 0
        THEN
            L_SUMINTMOR := L_SUMINTMOR + L_VALORADEBITAR - L_VALDEBITOAUX;
            L_CESGENUSA := L_CESGENUSA + L_VALORADEBITAR - L_VALDEBITOAUX;
        END IF;
        
        
        -- 14 RENDIMIENTOS DE CAPITAL INICIAL DE CESANTIA ADICIONAL
        IF L_VALDEBITOAUX > 0
        THEN
            L_VALORADEBITAR := L_VALDEBITOAUX;
            IESS_OWNER.CRE_DEBITO_AUTOMATICO_PKG.CRE_AFECTACTAINDIVIDUALCES_PRC (
                    AINNUMAFI         => AI_NUMAFI,
                    AINNUMPREAFI      => AI_NUMPREAFI,
                    AINORDPREAFI      => AI_ORDPREAFI,
                    AINCODPRETIP      => AI_CODPRETIP,
                    AINCODPRECLA      => AI_CODPRECLA,
                    AICTR_ID          => 'RESSGD',
                    AICTC_ID          => 'ADI',
                    AINVALDEBITO      => L_VALORADEBITAR,
                    AINCODSOLDEB      => L_CODSOLDEB,
                    AONVALCES         => L_RENCAPADIALAFECHA,
                    AOVALDEBAUX       => L_VALDEBITOAUX,
                    AOCMENERR         => AO_MENSAJEERROR,
                    AOCRESPRO         => AO_ERROR);
            IF AO_ERROR = '0'
            THEN
                AO_MENSAJEERROR := SUBSTR('RESSGD-ADI: ' || AO_MENSAJEERROR, 1, 1024);
                RAISE X_REVERSOPROCESO;
            END IF;
        END IF;


        IF L_RENCAPADIALAFECHA > 0
        THEN
            L_SUMINTMOR := L_SUMINTMOR + L_VALORADEBITAR - L_VALDEBITOAUX;
            L_CESADIUSA := L_CESADIUSA + L_VALORADEBITAR - L_VALDEBITOAUX;
        END IF;

      
        -- MARCA APORTES
        IESS_OWNER.CRE_DEBITO_AUTOMATICO_PKG.CRE_MARCAAPORTESCESANTIAS_PRC (
                    AINNUMAFI      => AI_NUMAFI,
                    AINNUMPREAFI   => AI_NUMPREAFI,
                    AINORDPREAFI   => AI_ORDPREAFI,
                    AINCODPRETIP   => AI_CODPRETIP,
                    AINCODPRECLA   => AI_CODPRECLA,
                    AINCODDIVPOL   => AI_CODIVPOL,
                    AOCMENERR      => AO_MENSAJEERROR,
                    AOCRESPRO      => AO_ERROR);
        IF AO_ERROR = '0'
        THEN
            AO_MENSAJEERROR := SUBSTR('MARCACION APORTES: ' || AO_MENSAJEERROR, 1, 1024);
            RAISE X_REVERSOPROCESO;
        END IF;


        --VALIDA SI LA LIQUIDACION POR CES ES PARCIAL O TOTAL
        IF (L_CAPITALDISPONIBLE - L_LIQUIDACION) > 0
        THEN
            L_PERIODODESDE := TO_NUMBER (TO_CHAR (ADD_MONTHS (G_FECHADEBITO, -1), 'YYYYMM'),'999999','NLS_NUMERIC_CHARACTERS=''.,''');    
            L_PERIODOHASTA := TO_NUMBER (TO_CHAR (ADD_MONTHS (G_FECHADEBITO, -1), 'YYYYMM'),'999999','NLS_NUMERIC_CHARACTERS=''.,''');    

            IESS_OWNER.CES_CUENTACESANTIAAPORTES_PKG.PINSCUENTAINDIVIDUALDET (
                    P_NUMAFI            => AI_NUMAFI,
                    P_PERIODODESDE      => L_PERIODODESDE,
                    P_PERIODOHASTA      => L_PERIODOHASTA,
                    P_TIPOREG           => 'RESDEB',
                    P_TIPOCESANTIA      => 'GEN',
                    P_NUMSOLICITUD      => NULL,
                    P_TOTAPORTECONEXT   => L_CAPITALDISPONIBLE - L_LIQUIDACION,
                    P_TOTAPORTESINEXT   => 0,
                    P_ERRCOD            => AO_ERROR,
                    P_ERRMSG            => AO_MENSAJEERROR);
            IF AO_ERROR = '0'
            THEN
                AO_MENSAJEERROR := SUBSTR('RESDEB-GEN: ' || AO_MENSAJEERROR, 1, 1024);
                RAISE X_REVERSOPROCESO;
            END IF;
            
            -- ACTUALIZAMOS CABECERA DE CUENTA INDIVIDUAL
            UPDATE IESS_OWNER.CES_CUENTAINDIVIDUALCAB_TBL
            SET CC_VALORDISPONIBLECONEXT = L_CAPITALDISPONIBLE + NVL (L_SUMAIVM, 0) - L_VALDEBITO
            WHERE CC_CEDULAID = AI_NUMAFI;
            IF SQL%NOTFOUND
            THEN
                AO_ERROR := '0';
                AO_MENSAJEERROR := 'NO SE PUDO ACTUALIZAR LA CABECERA CTA INDIVIDUAL CES';
                RAISE X_REVERSOPROCESO;
            END IF;

            CRE_GENERATRANSACCION_P (
                    AI_TIPOFONDO          => 'FCE',
                    AI_NUMAFI            => AI_NUMAFI,
                    AI_OPERACIONSAC     => AI_OPERACIONSAC,
                    AI_CODTIPSOLSER     => AI_CODTIPSOLSER,
                    AI_NUMSOLSER        => AI_NUMSOLSER,
                    AI_VALORCOBRAR      => L_VALDEBITO,
                    AI_TIPORETIRO          => 'T',
                    AI_IDREGISTRO       => AI_IDREGISTRO,
                    AI_NUT                => AI_NUT,
                    AI_FECHASACEFEC        => AI_FECHASACEFEC,
                    AO_TIPOTRANSACCION  => L_IDTRANSAC,
                    AO_ERROR              => AO_ERROR,
                    AO_MENSAJEERROR     => AO_MENSAJEERROR);
            IF AO_ERROR = '0'
            THEN
                RAISE X_REVERSOPROCESO;
            END IF;

            CRE_ACTUALIZADEBITOCAN_P (
                    AI_IDGAF          => AI_OPERACIONSAC,
                    AI_VALDEB       => L_VALDEBITO, 
                    AI_CODSOLI      => L_CODSOLDEB,
                    AI_TIPODEBITO   => 'FCE',
                    AI_IDTRANSAC    => L_IDTRANSAC,
                    AI_IDREGISTRO   => AI_IDREGISTRO,
                    AO_ERROR         => AO_ERROR,
                    AO_MENSAJEERROR => AO_MENSAJEERROR);
            IF AO_ERROR = '0'
            THEN
                RAISE X_REVERSOPROCESO;
            END IF;

            CRE_VALIDAVALORESDEBITO_P (
                    AI_IDGAF        => AI_OPERACIONSAC,
                    AI_IDREGISTRO   => AI_IDREGISTRO,
                    AI_CODSOLAFI    => NULL,
                    AI_CODTIPSOLAFI    => NULL,
                    AO_ERROR          => AO_ERROR,
                    AO_MENSAJEERROR => AO_MENSAJEERROR);    
            IF AO_ERROR = '0'
            THEN
                RAISE X_REVERSOPROCESO;
            END IF;

            CRE_LIBERADESBLOQUEATOTAL_P (
                    AI_NUMPREAFI      => AI_NUMPREAFI,
                    AI_ORDPREAFI    => AI_ORDPREAFI,
                    AI_CODPRETIP    => AI_CODPRETIP,
                    AI_CODPRECLA    => AI_CODPRECLA,
                    AI_TIPOFONDO      => 'FCE',
                    AI_NUMAFI       => AI_NUMAFI,
                    AI_OPERACIONSAC => AI_OPERACIONSAC,
                    AO_ERROR         => AO_ERROR,
                    AO_MENSAJEERROR => AO_MENSAJEERROR);
            IF AO_ERROR = '0'
            THEN
                RAISE X_REVERSOPROCESO;
            END IF;

      
            -- ACTUALIZAMOS LA TABLA DE CESANTIAS
            <<ACTUALIZACESANTIAS>>
            BEGIN
                CRE_ACTUALIZACESANTIAS_P (
                            AI_NUMAFI              => AI_NUMAFI,
                            AI_DISPONIBLECTAIND => L_CAPITALDISPONIBLE - L_VALDEBITO,
                            AO_ERROR              => AO_ERROR,
                            AO_MENSAJEERROR        => AO_MENSAJEERROR);

                IF AO_ERROR = '0'
                THEN
                    AO_MENSAJEERROR := SUBSTR(AI_OPERACIONSAC || ' CRE_ACTUALIZACESANTIAS_P1: ' || AO_MENSAJEERROR, 1, 1024);
                    RAISE X_REVERSOPROCESO;
                END IF;
            
            END ACTUALIZACESANTIAS;
            
        ELSE    

            -- ACTUALIZAMOS CABECERA DE CUENTA INDIVIDUAL
            UPDATE IESS_OWNER.CES_CUENTAINDIVIDUALCAB_TBL
            SET CC_VALORDISPONIBLECONEXT = 0 + NVL (L_SUMAIVM, 0)
            WHERE CC_CEDULAID = AI_NUMAFI;
            IF SQL%NOTFOUND
            THEN
                AO_ERROR := '0';
                AO_MENSAJEERROR := 'NO SE PUDO ACTUALIZAR LA CABECERA CUENTA INDIVIDUAL CES';
                RAISE X_REVERSOPROCESO;
            END IF;

            -- ACTUALIZAMOS LA TABLA DE CESANTIAS
            <<ACTUALIZACESANTIAS>>
            BEGIN
                CRE_ACTUALIZACESANTIAS_P (
                            AI_NUMAFI              => AI_NUMAFI,
                            AI_DISPONIBLECTAIND => 0,
                            AO_ERROR              => AO_ERROR,
                            AO_MENSAJEERROR        => AO_MENSAJEERROR);

                IF AO_ERROR = '0'
                THEN
                    AO_MENSAJEERROR := SUBSTR(AI_OPERACIONSAC || ' CRE_ACTUALIZACESANTIAS_P2: ' || AO_MENSAJEERROR, 1, 1024);
                    RAISE X_REVERSOPROCESO;
                END IF;
            
            END ACTUALIZACESANTIAS;
            
            --GENERA TRANSACCION
            CRE_GENERATRANSACCION_P (
                            AI_TIPOFONDO        => 'FCE',
                            AI_NUMAFI            => AI_NUMAFI,
                            AI_OPERACIONSAC     => AI_OPERACIONSAC,
                            AI_CODTIPSOLSER     => AI_CODTIPSOLSER,
                            AI_NUMSOLSER        => AI_NUMSOLSER,
                            AI_VALORCOBRAR      => L_VALDEBITO,
                            AI_TIPORETIRO          => 'P',
                            AI_IDREGISTRO       => AI_IDREGISTRO,
                            AI_NUT                => AI_NUT,
                            AI_FECHASACEFEC        => AI_FECHASACEFEC,
                            AO_TIPOTRANSACCION  => L_IDTRANSAC,
                            AO_ERROR              => AO_ERROR,
                            AO_MENSAJEERROR     => AO_MENSAJEERROR);
            IF AO_ERROR = '0'
            THEN
                RAISE X_REVERSOPROCESO;
            END IF;

            CRE_ACTUALIZADEBITOCAN_P (
                            AI_IDGAF          => AI_OPERACIONSAC,
                            AI_VALDEB       => L_VALDEBITO, 
                            AI_CODSOLI      => L_CODSOLDEB,
                            AI_TIPODEBITO   => 'FCE',
                            AI_IDTRANSAC    => L_IDTRANSAC,
                            AI_IDREGISTRO   => AI_IDREGISTRO,
                            AO_ERROR         => AO_ERROR,
                            AO_MENSAJEERROR => AO_MENSAJEERROR);
            IF AO_ERROR = '0'
            THEN
                RAISE X_REVERSOPROCESO;
            END IF;
        

            CRE_VALIDAVALORESDEBITO_P (
                            AI_IDGAF        => AI_OPERACIONSAC,
                            AI_IDREGISTRO   => AI_IDREGISTRO,
                            AI_CODSOLAFI    => NULL,
                            AI_CODTIPSOLAFI    => NULL,
                            AO_ERROR          => AO_ERROR,
                            AO_MENSAJEERROR => AO_MENSAJEERROR);    
            IF AO_ERROR = '0'
            THEN
                RAISE X_REVERSOPROCESO;
            END IF;

        END IF;

        --------- 12 INSERTAMOS REGISTRO EN LA TABLA KSAFITDEBCUECES ------------------
        INSERT INTO IESS_OWNER.KSAFITDEBCUECES (CODTIPDEB,
               VALTOTDEB,
               FECDEB,
               NUMAFI,
               CODEST)
        VALUES ('DEAUPQCE',
                L_VALDEBITO,
                G_FECHADEBITO, 
                AI_NUMAFI,
                'GEN')
                RETURNING CODDEB
        INTO L_CODDEB;        


        INSERT INTO IESS_OWNER.KSCRETDOCJUSDEBQUIMORCES (NUMAFI,
                FECDEB,
                CODTIPDEB,
                VALTOTDIV,
                VALINTMOR,
                VALCESGENUSA,
                VALCESADIUSA,
                CODDEB,
                SALCESANTDEB,
                SALCESLUEDEB)
        VALUES (AI_NUMAFI,
               G_FECHADEBITO,
               'DEAUPQCE',
               L_SUMDIVTOT,
               L_SUMINTMOR,
               L_CESGENUSA,
               L_CESADIUSA,
               L_CODDEB,
               L_CAPITALDISPONIBLE,
               L_CAPITALDISPONIBLE - L_VALDEBITO);


        --------- 14 ACTUALIZAMOS SOLICITUD A ESTADO DEB Y VALORES DEBITADOS ----------
        -- TOTAL CESANTIA GENERAL USADA
        L_CESANTIAGENUSADA :=
                            L_CAPITALGEN
                            + L_APORTEGEN
                            + L_RENCAPGENALAFECHA
                            + L_RENAPOGENALAFECHA
                            + L_RESDEB
                            + L_RENRESALAFECHA;
                            
        -- TOTAL CESANTIA ADICIONAL USADA
        L_CESANTIAADIUSADA :=
                            L_CAPITALADI
                            + L_APORTEADI
                            + L_RENCAPADIALAFECHA
                            + L_RENAPOADIALAFECHA;

        UPDATE IESS_OWNER.KSCESTSOLDEBQUIRO
        SET CODEST = 'DEB',
            FECDEB = G_FECHADEBITO,    
            CESGENCONEXT = L_CESANTIAGENUSADA,
            CESADICONEXT = L_CESANTIAADIUSADA,
            CAPINIGENCONEXT = L_CAPITALGEN,
            CAPINIADICONEXT = L_CAPITALADI,
            RENDCAPGENCONEXT = L_RENCAPGENALAFECHA,
            RENDCAPADICONEXT = L_RENCAPADIALAFECHA,
            SUMAPOGENCONEXT = L_APORTEGEN,
            SUMAPOADICONEXT = L_APORTEADI,
            RENDAPOGENCONEXT = L_RENAPOGENALAFECHA,
            RENDAPOADICONEXT = L_RENAPOADIALAFECHA,
            CODDEB = L_CODDEB,
            RENDCAPGENFECLIQ = L_RENCAPGENALAFECHA,
            RENDCAPADIFECLIQ = L_RENCAPADIALAFECHA,
            RENDAPOGENFECLIQ = L_RENAPOGENALAFECHA,
            RENDAPOADIFECLIQ = L_RENAPOADIALAFECHA
        WHERE CODSOLDEB = L_CODSOLDEB;
        IF SQL%NOTFOUND
        THEN
            AO_ERROR := '0';
            AO_MENSAJEERROR := 'ERROR AL ACTUALIZAR SOLICITUD DE CESANTIAS. ';
            RAISE X_REVERSOPROCESO;
        END IF;
        
        COMMIT;
        AO_ERROR         := '1';
        AO_MENSAJEERROR := NULL;
        SYS.DBMS_APPLICATION_INFO.SET_MODULE (NULL, NULL);        

    EXCEPTION
    WHEN X_ERRORPROCESO
    THEN
        SYS.DBMS_APPLICATION_INFO.SET_MODULE (NULL, NULL);

    WHEN X_REVERSOPROCESO
    THEN
        ROLLBACK;
        SYS.DBMS_APPLICATION_INFO.SET_MODULE (NULL, NULL);
        
    WHEN OTHERS
    THEN
        ROLLBACK;
        AO_ERROR := '0';
        AO_MENSAJEERROR := SUBSTR(AI_OPERACIONSAC || ' ERROR CRE_EJECUTADEBITOFCE_P: ' || SQLERRM, 1, 1024);
        SYS.DBMS_APPLICATION_INFO.SET_MODULE (NULL, NULL);
        
    END CRE_EJECUTADEBITOFCE_P;



    PROCEDURE CRE_GENERADEBITOFCE_P (
        AI_KSCRETCREDITOS   IN  IESS_OWNER.KSCRETCREDITOS%ROWTYPE,
        AI_VALSOL              IN  IESS_OWNER.CRE_CREDITOSDEBITOSAC_T.CD_VALORLIQUIDACIONSAC%TYPE,
        AI_IDREGISTRO          IN  IESS_OWNER.CRE_CREDITOSDEBITOSAC_T.CD_IDREGISTRO%TYPE,
        AI_OPERACIONSAC        IN  IESS_OWNER.CRE_CREDITOSDEBITOSAC_T.CD_OPERACIONSAC%TYPE,
        AI_NUT                 IN  IESS_OWNER.CRE_CREDITOSDEBITOSAC_T.CD_NUT%TYPE,
        AI_FECHASACEFEC        IN  IESS_OWNER.CRE_CREDITOSDEBITOSAC_T.CD_FECEJECUCION%TYPE,
        AI_VALLIQSAC        IN     IESS_OWNER.CRE_CREDITOSDEBITOSAC_T.CD_VALORLIQUIDACIONSAC%TYPE,
        AI_ESTADOCES        IN     IESS_OWNER.CRE_ACTUALIZACESANTIAS_TBL.AC_ESTADO%TYPE,
        AO_ERROR               IN OUT VARCHAR2,
        AO_MENSAJEERROR     IN OUT VARCHAR2)
    IS
        L_OBSERVACIONSAC       IESS_OWNER.CRE_CREDITOSDEBITOSAC_T.CD_OBSERVACION%TYPE;
        
        R_BITACORAS         IESS_OWNER.CRE_BITACORAS_TBL%ROWTYPE;
        X_ERRORACTUALIZA    EXCEPTION;

    BEGIN

        SYS.DBMS_APPLICATION_INFO.SET_MODULE (
        MODULE_NAME   => 'CRE_GENERADEBITOFCE_P',
        ACTION_NAME   => 'VALIDA QUE LA CUENTA DE CESANTIA ESTA ACTUALIZADA PARA LA EJECUCION DEL DEBITO');


        --INICIALIZA BITACORA
        R_BITACORAS                 := NULL;
        R_BITACORAS.ID                := G_ID;
        R_BITACORAS.CODPROC            := G_CODPROCESOBIT;
        R_BITACORAS.MO_MODULO        := 'CRE';
        R_BITACORAS.CODPRETIP        := AI_KSCRETCREDITOS.CODPRETIP;
        R_BITACORAS.ORDPREAFI        := AI_KSCRETCREDITOS.ORDPREAFI;
        R_BITACORAS.NUMPREAFI        := AI_KSCRETCREDITOS.NUMPREAFI;
        R_BITACORAS.CODPRECLA        := AI_KSCRETCREDITOS.CODPRECLA;
        R_BITACORAS.RUCEMP            := AI_KSCRETCREDITOS.RUCEMP;
        R_BITACORAS.NUMAFI            := AI_KSCRETCREDITOS.NUMAFI;

        
        IF AI_ESTADOCES <> 'ACT' THEN

            R_BITACORAS.TE_ID_TIPO_ERROR:= G_NIDERROR_GENDEBCES;
            R_BITACORAS.BI_OBSERVACION    := AI_OPERACIONSAC || ' LA CUENTA DE CESANTIAS NO SE ENCUENTRA ACTUALIZADA.';

            CRE_INSERTABITACORAS_P (
                AI_BITACORAS     => R_BITACORAS,
                AO_ERROR         => AO_ERROR,
                AO_MENSAJEERROR => AO_MENSAJEERROR);

            CRE_ACTUALIZADEBITOREC_P (
                AI_MENSAJEERROR    => 'DA-18 LA CUENTA DE CESANTIAS NO SE ENCUENTRA ACTUALIZADA.',
                AI_IDGAF          => AI_OPERACIONSAC,
                AI_IDREGISTRO     => AI_IDREGISTRO,
                AO_ERROR          => AO_ERROR,
                AO_MENSAJEERROR => AO_MENSAJEERROR);

            AO_ERROR := '0';
            AO_MENSAJEERROR    := NULL;
            RAISE X_ERRORACTUALIZA;
            
        END IF;
        
        CRE_EJECUTADEBITOFCE_P (
                AI_NUMAFI         => AI_KSCRETCREDITOS.NUMAFI,
                AI_NUMPREAFI    => AI_KSCRETCREDITOS.NUMPREAFI,
                AI_ORDPREAFI    => AI_KSCRETCREDITOS.ORDPREAFI,
                AI_CODPRETIP    => AI_KSCRETCREDITOS.CODPRETIP,
                AI_CODPRECLA    => AI_KSCRETCREDITOS.CODPRECLA,
                AI_CODTIPSOLSER => AI_KSCRETCREDITOS.CODTIPSOLSER,
                AI_NUMSOLSER    => AI_KSCRETCREDITOS.NUMSOLSER,
                AI_CODESTPRE    => AI_KSCRETCREDITOS.CODESTPRE,    
                AI_CODIVPOL     => AI_KSCRETCREDITOS.CODDIVPOL,
                AI_VALORSOL     => AI_VALSOL,
                AI_IDREGISTRO   => AI_IDREGISTRO,
                AI_OPERACIONSAC => AI_OPERACIONSAC,
                AI_NUT          => AI_NUT,
                AI_FECHASACEFEC => AI_FECHASACEFEC,
                AI_VALLIQSAC    => AI_VALLIQSAC,
                AO_ERROR        => AO_ERROR,
                AO_MENSAJEERROR => AO_MENSAJEERROR);
        
        L_OBSERVACIONSAC := SUBSTR(AO_MENSAJEERROR, 1, 100);

        
        IF AO_ERROR = '0'
        THEN
            
            R_BITACORAS.TE_ID_TIPO_ERROR:= G_NIDERROR_GENDEBCES;
            R_BITACORAS.BI_OBSERVACION    := SUBSTR(AI_OPERACIONSAC || ' CRE_GENERADEBITOFCE_P: ' || AO_MENSAJEERROR, 1, 200);
            
            
            CRE_INSERTABITACORAS_P (
                AI_BITACORAS     => R_BITACORAS,
                AO_ERROR         => AO_ERROR,
                AO_MENSAJEERROR => AO_MENSAJEERROR);
                                    

            --12/02/2021  MARIO ORLANDO TACO  VALIDAMOS REGISTRO DEL ANEXO EN ESTADO ENV
            CRE_ACTUALIZADEBITOREC_P (
                        AI_MENSAJEERROR    => L_OBSERVACIONSAC,
                        AI_IDGAF          => AI_OPERACIONSAC,
                        AI_IDREGISTRO     => AI_IDREGISTRO,
                        AO_ERROR          => AO_ERROR,
                        AO_MENSAJEERROR => AO_MENSAJEERROR);
        
            AO_ERROR := '0';
            AO_MENSAJEERROR := NULL;
            RAISE X_ERRORACTUALIZA;
            
        ELSE
            
            R_BITACORAS.TE_ID_TIPO_ERROR:= G_NIDDEBITO_EXITOSO;
            R_BITACORAS.BI_OBSERVACION    := AI_OPERACIONSAC || ' DEBITO FCE EXITOSO.';

            CRE_INSERTABITACORAS_P (
                AI_BITACORAS     => R_BITACORAS,
                AO_ERROR         => AO_ERROR,
                AO_MENSAJEERROR => AO_MENSAJEERROR);
            
        END IF;
        
        AO_ERROR := '1';
        AO_MENSAJEERROR := NULL;
        SYS.DBMS_APPLICATION_INFO.SET_MODULE (NULL, NULL);
        
    EXCEPTION
    WHEN X_ERRORACTUALIZA
    THEN
        SYS.DBMS_APPLICATION_INFO.SET_MODULE (NULL, NULL);
        
    WHEN OTHERS
    THEN
        ROLLBACK;
        
        R_BITACORAS.TE_ID_TIPO_ERROR:= G_NIDERROR_GENDEBAUT;
        R_BITACORAS.BI_OBSERVACION    := SUBSTR(AI_OPERACIONSAC || ' CRE_GENERADEBITOFCE_P: ' || SQLERRM, 1, 200);

        CRE_INSERTABITACORAS_P (
            AI_BITACORAS     => R_BITACORAS,
            AO_ERROR         => AO_ERROR,
            AO_MENSAJEERROR => AO_MENSAJEERROR);
        
        AO_ERROR := '0';
        AO_MENSAJEERROR := NULL;
        SYS.DBMS_APPLICATION_INFO.SET_MODULE (NULL, NULL);
        
    END CRE_GENERADEBITOFCE_P;



    PROCEDURE CRE_GENERADEBITOFRS_P (
        AI_KSCRETCREDITOS        IN  IESS_OWNER.KSCRETCREDITOS%ROWTYPE,
        AI_IDREGISTRO           IN  IESS_OWNER.CRE_CREDITOSDEBITOSAC_T.CD_IDREGISTRO%TYPE,
        AI_OPERACIONSAC         IN  IESS_OWNER.CRE_CREDITOSDEBITOSAC_T.CD_OPERACIONSAC%TYPE,
        AI_NUT                  IN  IESS_OWNER.CRE_CREDITOSDEBITOSAC_T.CD_NUT%TYPE,
        AI_FECHASACEFEC         IN  IESS_OWNER.CRE_CREDITOSDEBITOSAC_T.CD_FECEJECUCION%TYPE,
        AI_VALORLIQUIDACIONSAC     IN  IESS_OWNER.CRE_CREDITOSDEBITOSAC_T.CD_VALORLIQUIDACIONSAC%TYPE,
        AI_ESTADOCES            IN  IESS_OWNER.CRE_ACTUALIZACESANTIAS_TBL.AC_ESTADO%TYPE,
        AO_VALORSALDO               OUT IESS_OWNER.CRE_CREDITOSDEBITOSAC_T.CD_VALORLIQUIDACIONSAC%TYPE,
        AO_ESTADOCREDITO        OUT IESS_OWNER.KSCRETCREDITOS.CODESTPRE%TYPE,
        AO_ERROR                  OUT    VARCHAR2,
        AO_MENSAJEERROR            OUT VARCHAR2B)
    IS
        
        L_EXISTE            PLS_INTEGER := 0;
        L_NIDTIPOERROR      PLS_INTEGER    := 0;
        L_PASAVALIDACION    BOOLEAN        := TRUE;    
        L_ERRORVALDISP        BOOLEAN     := TRUE;
        
        L_VALDISPCONEXT      IESS_OWNER.CES_CUENTAINDIVIDUALCAB_TBL.CC_VALORDISPONIBLECONEXT%TYPE;
        L_SALDOCAPITAL      IESS_OWNER.APORTES_PFR2.VALORCOMPROMETIDOFRCAPITAL%TYPE    := 0;
        L_VALORPORAPLICAR   IESS_OWNER.FRSAFITSOLAFI.VALSOLAFI%TYPE        := 0;
        L_SALDOPORAPLICAR   IESS_OWNER.FRSAFITSOLAFI.VALSOLAFI%TYPE        := 0;
        L_VALORLIQUIDAFRS   IESS_OWNER.FRSAFITSOLAFI.VALSOLAFI%TYPE        := 0;
        L_CODSOLICITUD      IESS_OWNER.FRSAFITSOLAFI.CODSOLAFI%TYPE;
        L_CODTIPOSOLI       IESS_OWNER.FRSAFITSOLAFI.CODTIPSOLAFI%TYPE;

        L_OBSERVACIONSAC       IESS_OWNER.CRE_CREDITOSDEBITOSAC_T.CD_OBSERVACION%TYPE;
        L_OBSERVACIONBIT    IESS_OWNER.CRE_BITACORAS_TBL.BI_OBSERVACION%TYPE;
    
        X_APLICADEBITOFRS    EXCEPTION;
        X_APLICADEBITOCES   EXCEPTION;
        X_SALIREJECUCION      EXCEPTION;
        R_BITACORAS         IESS_OWNER.CRE_BITACORAS_TBL%ROWTYPE;
        
    BEGIN

        SYS.DBMS_APPLICATION_INFO.SET_MODULE (
        MODULE_NAME   => 'CRE_GENERADEBITOFRS_P',
        ACTION_NAME   => 'VALIDA TODAS LAS CONDICIONES PARA LA EJECUCION DEL DEBITO CON FRS');
        
        
        --INICIALIZA VALOR TOAL DE LIQUIDACION
        L_VALORPORAPLICAR     := AI_VALORLIQUIDACIONSAC;
        L_SALDOPORAPLICAR    := AI_VALORLIQUIDACIONSAC;
        AO_ESTADOCREDITO    := AI_KSCRETCREDITOS.CODESTPRE;
        
        --INICIALIZA BITACORAS
        R_BITACORAS                 := NULL;
        R_BITACORAS.ID                := G_ID;
        R_BITACORAS.CODPROC            := G_CODPROCESOBIT;
        R_BITACORAS.MO_MODULO        := 'CRE';
        R_BITACORAS.CODPRETIP        := AI_KSCRETCREDITOS.CODPRETIP;
        R_BITACORAS.ORDPREAFI        := AI_KSCRETCREDITOS.ORDPREAFI;
        R_BITACORAS.NUMPREAFI        := AI_KSCRETCREDITOS.NUMPREAFI;
        R_BITACORAS.CODPRECLA        := AI_KSCRETCREDITOS.CODPRECLA;
        R_BITACORAS.RUCEMP            := AI_KSCRETCREDITOS.RUCEMP;
        R_BITACORAS.NUMAFI            := AI_KSCRETCREDITOS.NUMAFI;
        
        
        --VALIDO SI TIENE CARGOS REGISTRADOS O PROCESADOS PARCIALMENTE
        L_EXISTE := 0;
        L_EXISTE := FRO.FR_PROCESOSGENERICOS_PKG.FR_VALEXISTECARGOSREG_FUN (AINNUMAFI =>  AI_KSCRETCREDITOS.NUMAFI);
        IF NVL(L_EXISTE, 0) > 0
        THEN
            L_OBSERVACIONBIT     := AI_OPERACIONSAC || ' EL ASEGURADO POSEE CARGOS FRS.';
            L_NIDTIPOERROR         := G_NIDCARGOS_FRS;
            L_OBSERVACIONSAC    := 'DA-02 EL ASEGURADO POSEE CARGOS FRS.';
            
            RAISE X_APLICADEBITOCES;
            
        END IF;


        --VALIDO SI TIENE BLOQUEOS TOTALES.
        L_EXISTE := 0;
        L_EXISTE := FRO.FR_PROCESOSGENERICOS_PKG.FR_VALEXISTEBLOQUEO_FUN (AINNUMAFI => AI_KSCRETCREDITOS.NUMAFI);
        IF NVL(L_EXISTE, 0) > 0
        THEN
            L_OBSERVACIONBIT     := AI_OPERACIONSAC || ' EL ASEGURADO POSEE BLOQUEOS FRS.';
            L_NIDTIPOERROR         := G_NIDBLOQUEOS_FRS;
            L_OBSERVACIONSAC    := 'DA-02 EL ASEGURADO POSEE BLOQUEOS FRS.';
            
            RAISE X_APLICADEBITOCES;
            
        END IF;


        --VALIDO SI EL AFILIADO TIENE UNA SOLICITUD DE DEVOLUCION DE FR.
        L_EXISTE := 0;
        L_EXISTE := FRO.FR_PROCESOSGENERICOS_PKG.FR_VALEXISTESOLDEVFR_FUN (AINNUMAFI => AI_KSCRETCREDITOS.NUMAFI);
        IF NVL(L_EXISTE, 0) > 0
        THEN
            L_OBSERVACIONBIT     := AI_OPERACIONSAC || ' EL ASEGURADO POSEE SOLICITUDES FRS EN TRAMITE.';
            L_NIDTIPOERROR         := G_NIDSOLICITUD_FRS; 
            L_OBSERVACIONSAC    := 'DA-01 EL ASEGURADO POSEE SOLICITUDES FRS EN TRAMITE.';
            
            RAISE X_APLICADEBITOCES;

        END IF;


        --VALIDO SI UN AFILIADO YA FALLECIDO TIENE TRAMITES PENDIENTES EN PROCESO.
        L_EXISTE := 0;
        L_EXISTE := FRO.FR_PROCESOSGENERICOS_PKG.FR_VALEXISTRAMPENDAFIFALLE_FUN (AINNUMAFI => AI_KSCRETCREDITOS.NUMAFI);
        IF NVL(L_EXISTE, 0) > 0
        THEN
            
            R_BITACORAS.TE_ID_TIPO_ERROR:= G_NIDTRAMITES_FRS;
            R_BITACORAS.BI_OBSERVACION    := AI_OPERACIONSAC || ' FALLECIDO CON TRAMITES PENDIENTES.';

            CRE_INSERTABITACORAS_P (
                        AI_BITACORAS     => R_BITACORAS,
                        AO_ERROR         => AO_ERROR,
                        AO_MENSAJEERROR => AO_MENSAJEERROR);

            CRE_ACTUALIZADEBITOREC_P (
                        AI_MENSAJEERROR    => 'DA-16 FALLECIDO CON TRAMITES PENDIENTES',
                        AI_IDGAF          => AI_OPERACIONSAC,
                        AI_IDREGISTRO     => AI_IDREGISTRO,
                        AO_ERROR          => AO_ERROR,
                        AO_MENSAJEERROR => AO_MENSAJEERROR);
            
            AO_ERROR := '0';
            AO_MENSAJEERROR := NULL;
            
            RAISE X_SALIREJECUCION;
            
        END IF;


        --VALIDO SI SON CORRECTOS CAPITAL DISPONIBLE Y SALDO DISPONIBLE Y OBTENGO EL VALOR APROXIMADO DE FONDOS DE RESERVA
        CRE_VALORAPROXIMADOFRS_P (
                        AI_KSCRETCREDITOS            => AI_KSCRETCREDITOS,
                        AO_VALORTOTALAPROXIMADOFR     => L_SALDOCAPITAL,
                        AO_ERROR                      => AO_ERROR,
                        AO_MENSAJEERROR             => AO_MENSAJEERROR);
        IF AO_ERROR = '0'
        THEN
            L_OBSERVACIONBIT     := SUBSTR(AI_OPERACIONSAC || ' CRE_GENERADEBITOFRS_P: ' || AO_MENSAJEERROR, 1, 200);
            L_NIDTIPOERROR        := G_NIDNODISPONIBLE_FRS;
            L_OBSERVACIONSAC    := 'DA-19 ERROR EN CALCULO VALOR APROXIMADO FRS.';
            
            RAISE X_APLICADEBITOCES;

        END IF;
        

        IF NVL(L_SALDOCAPITAL, 0) <= 0 THEN
            L_OBSERVACIONBIT     := AI_OPERACIONSAC || ' NO POSEE VALORES DE FRS DISPONIBLES.';
            L_NIDTIPOERROR        := G_NIDNODISPONIBLE_FRS;
            L_OBSERVACIONSAC    := 'DA-19 NO POSEE VALORES DE FRS DISPONIBLES.';
            
            RAISE X_APLICADEBITOCES;
        
        END IF;
        
        
        --CAMBIA ESTADO DEL CREDIOT A ELF
        CRE_ACTUALIZAESTADOCRE_P (
                    AI_NUMPREAFI       => AI_KSCRETCREDITOS.NUMPREAFI,
                    AI_ORDPREAFI       => AI_KSCRETCREDITOS.ORDPREAFI,
                    AI_CODPRETIP       => AI_KSCRETCREDITOS.CODPRETIP,
                    AI_CODPRECLA       => AI_KSCRETCREDITOS.CODPRECLA,
                    AI_ESTADOANTES    => AI_KSCRETCREDITOS.CODESTPRE,
                    AI_ESTADONUEVO    => 'ELF',
                    AO_ERROR          => AO_ERROR,
                    AO_MENSAJEERROR    => AO_MENSAJEERROR);
        IF AO_ERROR = '0'
        THEN
            ROLLBACK;
            
            L_OBSERVACIONBIT     := SUBSTR(AI_OPERACIONSAC || ' CRE_GENERADEBITOFRS_P: ' || AO_MENSAJEERROR, 1, 200);
            L_NIDTIPOERROR        := G_NIDERROR_GENDEBFRS;
            L_OBSERVACIONSAC    := 'ERROR CAMBIO ESTADDO CREDITO ELF.';
            AO_ESTADOCREDITO    := 'VIG';
            
            RAISE X_APLICADEBITOCES;
        ELSE
            AO_ESTADOCREDITO    := 'ELF';
        END IF;
            
            
        --VALIDACION DE EXISTENCIA DE DATOS.
        L_PASAVALIDACION := IESS_OWNER.CRE_DEBITO_AUTOMATICO_PKG.CRE_VALIDADATOSDEBAUT_FUN (
                    AI_NUMAFI      => AI_KSCRETCREDITOS.NUMAFI,
                    AI_TIPOSOLI    => 'CRE', 
                    AI_NUMPREAFI   => AI_KSCRETCREDITOS.NUMPREAFI,
                    AI_ORDPREAFI   => AI_KSCRETCREDITOS.ORDPREAFI,
                    AI_CODPRETIP   => AI_KSCRETCREDITOS.CODPRETIP,
                    AI_CODPRECLA   => AI_KSCRETCREDITOS.CODPRECLA,
                    AI_CODDIVPOL   => AI_KSCRETCREDITOS.CODDIVPOL,
                    AO_RESPRO      => AO_ERROR,
                    AO_MENERR      => AO_MENSAJEERROR);

        IF NOT L_PASAVALIDACION 
        THEN
            ROLLBACK;
            
            L_OBSERVACIONBIT     := SUBSTR(AI_OPERACIONSAC || ' CRE_GENERADEBITOFRS_P: DATOSDEBAUT_FUN: ' || AO_MENSAJEERROR, 1, 200);
            L_NIDTIPOERROR        := G_NIDERROR_GENDEBFRS;
            L_OBSERVACIONSAC    := 'ERROR VALIDA DATOS SOLICITUD FRS.';
            AO_ESTADOCREDITO    := 'VIG';
            
            RAISE X_APLICADEBITOCES;

        END IF;
        
            
        --CREACION DE LA SOLICITUD DE FONDOS DE RESERVA
        IESS_OWNER.CRE_DEBITO_AUTOMATICO_PKG.CRE_CREASOLICDEBITOAUTOM_PRC (
                    AI_NUMPREAFI       => AI_KSCRETCREDITOS.NUMPREAFI,
                    AI_ORDPREAFI       => AI_KSCRETCREDITOS.ORDPREAFI,
                    AI_CODPRETIP       => AI_KSCRETCREDITOS.CODPRETIP,
                    AI_CODPRECLA       => AI_KSCRETCREDITOS.CODPRECLA,
                    AI_NUMAFI          => AI_KSCRETCREDITOS.NUMAFI,
                    AI_VALSOLI         => 0,
                    AI_VALDISPFR       => L_SALDOCAPITAL,
                    AI_CODTIPSOLIAFI   => 'CRE',
                    AI_CODDIVPOL       => AI_KSCRETCREDITOS.CODDIVPOL,
                    AO_CODSOLIAFI      => L_CODSOLICITUD,
                    AO_CODTIPSOLIAFI   => L_CODTIPOSOLI,
                    AO_RESPRO          => AO_ERROR,
                    AO_MENERR          => AO_MENSAJEERROR);
        IF AO_ERROR = '0'
        THEN
            ROLLBACK;
            
            L_OBSERVACIONBIT     := SUBSTR(AI_OPERACIONSAC || ' CRE_GENERADEBITOFRS_P: SOLICDEBITOAUTOM_PRC: ' || AO_MENSAJEERROR, 1, 200);
            L_NIDTIPOERROR        := G_NIDERROR_GENDEBFRS;
            L_OBSERVACIONSAC    := 'ERROR AL CREAR SOLICITUD FRS.';
            AO_ESTADOCREDITO    := 'VIG';
            
            RAISE X_APLICADEBITOCES;
            
        END IF;

    
        --AFECTACION CUENTA INDIVIDUAL
        CRE_AFECTACUENTAFRS_P (
                    AI_NUMPREAFI           => AI_KSCRETCREDITOS.NUMPREAFI,
                    AI_ORDPREAFI           => AI_KSCRETCREDITOS.ORDPREAFI,
                    AI_CODPRETIP           => AI_KSCRETCREDITOS.CODPRETIP,
                    AI_CODPRECLA           => AI_KSCRETCREDITOS.CODPRECLA,
                    AI_NUMAFI              => AI_KSCRETCREDITOS.NUMAFI,
                    AI_CODTIPSOLSER        => AI_KSCRETCREDITOS.CODTIPSOLSER,
                    AI_NUMSOLSER           => AI_KSCRETCREDITOS.NUMSOLSER,
                    AI_VALORLIQUIDACION => L_VALORPORAPLICAR, --VALOR LIQUIDACION ENVIADO POR GAF              
                    AI_CODSOLIAFI          => L_CODSOLICITUD,
                    AI_CODTIPSOLIAFI       => L_CODTIPOSOLI,
                    AI_CODDIVPOL           => AI_KSCRETCREDITOS.CODDIVPOL,
                    AI_IDREGISTRO          => AI_IDREGISTRO,
                    AI_FECSOLAFI        => G_FECHADEBITO,    
                    AI_OPERACIONSAC        => AI_OPERACIONSAC,
                    AI_NUT              => AI_NUT,
                    AI_FECHASACEFEC        => AI_FECHASACEFEC,
                    AO_LIQUIPQ           => L_VALORLIQUIDAFRS,  --VALOR LIQUIDADO EN SOLICITUD DE FRS
                    AO_ERROR            => AO_ERROR,
                    AO_MENSAJEERROR        => AO_MENSAJEERROR);
        
        
        IF AO_ERROR = '0'
        THEN
            ROLLBACK;
            
            L_OBSERVACIONBIT     := SUBSTR(AI_OPERACIONSAC || ' CRE_GENERADEBITOFRS_P: ' || AO_MENSAJEERROR, 1, 200);
            L_NIDTIPOERROR        := G_NIDERROR_GENDEBFRS;
            L_OBSERVACIONSAC    := 'ERROR AL AFECTAR LA CUENTA INDIVIDUAL FRS.';
            AO_ESTADOCREDITO    := 'VIG';

            RAISE X_APLICADEBITOCES;

        END IF;



        R_BITACORAS.TE_ID_TIPO_ERROR:= G_NIDDEBITO_EXITOSO;
        R_BITACORAS.BI_OBSERVACION    := AI_OPERACIONSAC || ' ' || 'DEBITO FRS EXITOSO.';

        CRE_INSERTABITACORAS_P (
                    AI_BITACORAS     => R_BITACORAS,
                    AO_ERROR         => AO_ERROR,
                    AO_MENSAJEERROR => AO_MENSAJEERROR);

        --VALIDA SALDO PARA LIQUIDAR LA OPERACION
        L_SALDOPORAPLICAR := ROUND (NVL(L_VALORPORAPLICAR, 0) - NVL(L_VALORLIQUIDAFRS, 0), 2);
        
        IF NVL(L_SALDOPORAPLICAR, 0) > 0
        THEN       
            COMMIT;
            
            L_OBSERVACIONBIT     := AI_OPERACIONSAC || ' LA OPERACION NO SE LIQUIDO COMPLETAMENTE CON FRS.';
            L_NIDTIPOERROR        := G_NIDDEBITO_EXITOSO;
            L_OBSERVACIONSAC    := ' ';

            RAISE X_APLICADEBITOCES;
            
        END IF;    

        
        IF AI_ESTADOCES = 'NAC' THEN
            
            R_BITACORAS.TE_ID_TIPO_ERROR:= L_NIDTIPOERROR;
            R_BITACORAS.BI_OBSERVACION    := AI_OPERACIONSAC || ' CESANTIA NO PUDO SER ACTUALIZADA (NAC), LUEGO DEL DEBITO.';

            CRE_INSERTABITACORAS_P (
                        AI_BITACORAS     => R_BITACORAS,
                        AO_ERROR         => AO_ERROR,
                        AO_MENSAJEERROR => AO_MENSAJEERROR);

            AO_ERROR := '1';
            AO_MENSAJEERROR    := NULL;
            
            RAISE X_APLICADEBITOFRS;
            
        END IF;
        

        <<VALORDISPONILE>>
        BEGIN
            --RECUPERO EL VALOR DISPONIBLE DE CESANTIAS
            SELECT NVL(CC_VALORDISPONIBLECONEXT, 0)
            INTO L_VALDISPCONEXT
            FROM IESS_OWNER.CES_CUENTAINDIVIDUALCAB_TBL
            WHERE CC_CEDULAID = AI_KSCRETCREDITOS.NUMAFI;
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            L_ERRORVALDISP := FALSE;
        WHEN TOO_MANY_ROWS THEN
            L_ERRORVALDISP := FALSE;  
        WHEN OTHERS THEN
            L_ERRORVALDISP := FALSE;
        END VALORDISPONILE;
        
        IF NOT L_ERRORVALDISP
        THEN

            L_NIDTIPOERROR                 := G_NIDERROR_GENDEBAUT;
            R_BITACORAS.BI_OBSERVACION    := AI_OPERACIONSAC || ' CESANTIA NO PUDO SER ACTUALIZADA (CAB), LUEGO DEL DEBITO.';

            CRE_INSERTABITACORAS_P (
                        AI_BITACORAS     => R_BITACORAS,
                        AO_ERROR         => AO_ERROR,
                        AO_MENSAJEERROR => AO_MENSAJEERROR);

            AO_ERROR := '1';
            AO_MENSAJEERROR    := NULL;
            
            RAISE X_APLICADEBITOFRS;
        
        END IF;
            
        <<ACTUALIZACESANTIAS>>
        BEGIN
            CRE_ACTUALIZACESANTIAS_P (
                        AI_NUMAFI              => AI_KSCRETCREDITOS.NUMAFI,
                        AI_DISPONIBLECTAIND => L_VALDISPCONEXT,
                        AO_ERROR              => AO_ERROR,
                        AO_MENSAJEERROR        => AO_MENSAJEERROR);

            IF AO_ERROR = '0'
            THEN
                L_NIDTIPOERROR                 := G_NIDERROR_GENDEBAUT;
                R_BITACORAS.BI_OBSERVACION    := SUBSTR(AI_OPERACIONSAC || ' CRE_GENERADEBITOFRS_P: CRE_ACTUALIZACESANTIAS_P: ' || AO_MENSAJEERROR, 1, 200);
            ELSE
                L_NIDTIPOERROR                 := G_NIDERROR_GENDEBAUT;
                R_BITACORAS.BI_OBSERVACION    := AI_OPERACIONSAC || ' CESANTIA ACTUALIZA CORRECTAMENTE';
            END IF;

            CRE_INSERTABITACORAS_P (
                        AI_BITACORAS     => R_BITACORAS,
                        AO_ERROR         => AO_ERROR,
                        AO_MENSAJEERROR => AO_MENSAJEERROR);
        
        END ACTUALIZACESANTIAS;
        
        
        COMMIT;
        AO_ERROR := '1';
        AO_MENSAJEERROR    := NULL;
        
        
    EXCEPTION
    WHEN X_SALIREJECUCION
    THEN
        --SALE CON ERROR EN LA EJECUCION
        SYS.DBMS_APPLICATION_INFO.SET_MODULE (NULL, NULL);

    WHEN X_APLICADEBITOFRS
    THEN
        --SALE CON EXITO EN LA EJECUCION Y ASIENTA EL DEBITO DE FONDOS DE RESERVA
        COMMIT;
        SYS.DBMS_APPLICATION_INFO.SET_MODULE (NULL, NULL);
        
    WHEN X_APLICADEBITOCES
    THEN
        --NO PASA VALIDACION DE FRS Y CONTINUA CON EJECUCION DE FCE
        R_BITACORAS.TE_ID_TIPO_ERROR:= L_NIDTIPOERROR;
        R_BITACORAS.BI_OBSERVACION    := SUBSTR(L_OBSERVACIONBIT, 1, 200);

        CRE_INSERTABITACORAS_P (
                    AI_BITACORAS     => R_BITACORAS,
                    AO_ERROR         => AO_ERROR,
                    AO_MENSAJEERROR => AO_MENSAJEERROR);
        
        CRE_ACTUALIZADEBITOOBS_P (
                    AI_MENSAJEERROR       => L_OBSERVACIONSAC,
                    AI_IDGAF               => AI_OPERACIONSAC,
                    AI_IDREGISTRO       => AI_IDREGISTRO,
                    AO_ERROR             => AO_ERROR,
                    AO_MENSAJEERROR      => AO_MENSAJEERROR);
        
        AO_VALORSALDO    := L_SALDOPORAPLICAR;
        AO_ERROR         := '1';
        AO_MENSAJEERROR    := NULL;
        SYS.DBMS_APPLICATION_INFO.SET_MODULE (NULL, NULL);

    WHEN OTHERS
    THEN
        ROLLBACK;

        R_BITACORAS.TE_ID_TIPO_ERROR:= G_NIDERROR_GENDEBFRS;
        R_BITACORAS.BI_OBSERVACION    := SUBSTR(AI_OPERACIONSAC || ' CRE_GENERADEBITOFRS_P: ' || SQLERRM, 1, 200);

        CRE_INSERTABITACORAS_P (
                    AI_BITACORAS     => R_BITACORAS,
                    AO_ERROR         => AO_ERROR,
                    AO_MENSAJEERROR => AO_MENSAJEERROR);
        
        CRE_ACTUALIZADEBITOOBS_P (
                    AI_MENSAJEERROR       => AI_OPERACIONSAC || ' NO SE PUDO EJECUTAR EL DEBITO FRS.',
                    AI_IDGAF               => AI_OPERACIONSAC,
                    AI_IDREGISTRO       => AI_IDREGISTRO,
                    AO_ERROR             => AO_ERROR,
                    AO_MENSAJEERROR      => AO_MENSAJEERROR);

        AO_VALORSALDO    := 0;
        AO_ERROR         := '1';
        AO_MENSAJEERROR := NULL;
        SYS.DBMS_APPLICATION_INFO.SET_MODULE (NULL, NULL);
        
    END CRE_GENERADEBITOFRS_P;



    PROCEDURE CRE_VALIDATIPODEBITO_P (
        AI_KSCRETCREDITOS   IN IESS_OWNER.KSCRETCREDITOS%ROWTYPE,
        AI_FECRESOL         IN VARCHAR2,
        AO_VALIDACREDITO    OUT PLS_INTEGER,
        AO_ERROR               OUT VARCHAR2,
        AO_MENSAJEERROR      OUT VARCHAR2)
    IS
        L_VALCOMFONRES  IESS_OWNER.THLCRT_GARANTIAS.VALCOMFONRES%TYPE;
    BEGIN
        
        SYS.DBMS_APPLICATION_INFO.SET_MODULE (
        MODULE_NAME   => 'CRE_VALIDATIPODEBITO_P',
        ACTION_NAME   => 'VALIDA EL TIPO DE EJECUCION DEL DEBITO');
        
        -- AO_VALIDACREDITO := 2;   CESANTIAS
        -- AO_VALIDACREDITO := 1;   FONDOS DE RESERVA 
        -- AO_VALIDACREDITO := 0;   ERROR..
        AO_VALIDACREDITO := 0;  
        
        --VERIFICO RESOLUCION
        IF AI_KSCRETCREDITOS.FECPREAFI >= TO_DATE (AI_FECRESOL, 'FXDDMMYYYY') THEN   -- RESOLUCION 171
            
            <<BUSCAVALOR>>
            BEGIN
                SELECT VALCOMFONRES
                INTO L_VALCOMFONRES
                FROM IESS_OWNER.THLCRT_GARANTIAS
                WHERE NUMPREAFI = AI_KSCRETCREDITOS.NUMPREAFI
                AND ORDPREAFI     = AI_KSCRETCREDITOS.ORDPREAFI
                AND CODPRETIP     = AI_KSCRETCREDITOS.CODPRETIP
                AND CODPRECLA     = AI_KSCRETCREDITOS.CODPRECLA;
            EXCEPTION
            WHEN NO_DATA_FOUND THEN
                L_VALCOMFONRES := 0;
            WHEN TOO_MANY_ROWS THEN
                L_VALCOMFONRES := 0;
            WHEN OTHERS THEN
                L_VALCOMFONRES := 0;
            END BUSCAVALOR;
    
            
            IF NVL(L_VALCOMFONRES, 0) = 0 THEN
                --'DEBITO CESANTIAS'
                AO_VALIDACREDITO := 2;                                      
            ELSE
                AO_VALIDACREDITO := 1;
            END IF;
            
        ELSIF AI_KSCRETCREDITOS.FECPREAFI < TO_DATE (AI_FECRESOL, 'FXDDMMYYYY') THEN  -- RESOLUCION 144
            --'DEBITO CESANTIAS'
            AO_VALIDACREDITO := 2;                                         
        END IF;
    
        AO_ERROR := '1';
        AO_MENSAJEERROR    := NULL;
        SYS.DBMS_APPLICATION_INFO.SET_MODULE (NULL, NULL);

        
    EXCEPTION
    WHEN OTHERS
    THEN
        AO_VALIDACREDITO := 0;
         AO_ERROR := '0';
        AO_MENSAJEERROR := SUBSTR(AI_KSCRETCREDITOS.CR_OPERACIONSAC || ' ERROR : CRE_VALIDATIPODEBITO_P: ' || SQLERRM, 1, 1024);
        SYS.DBMS_APPLICATION_INFO.SET_MODULE (NULL, NULL);
        
    END CRE_VALIDATIPODEBITO_P;


    PROCEDURE CRE_EJECUTADEBITO_P (
        AI_TIPOPROCESO         IN VARCHAR2,
        AI_FECHACARGA          IN DATE,    
        AO_ERROR               OUT VARCHAR2,
        AO_MENSAJEERROR       OUT VARCHAR2)
    IS
        CURSOR C_PQENMORA
        IS
            SELECT CRE.NUMAFI NUMAFI,
            CRE.NUMPREAFI NUMPREAFI,
            CRE.ORDPREAFI ORDPREAFI,
            CRE.CODPRETIP CODPRETIP,
            CRE.CODPRECLA CODPRECLA,
            CRE.CODDIVPOL CODDIVPOL,
            CRE.FECPREAFI FECPREAFI,
            CRE.CODTIPSOLSER CODTIPSOLSER,
            CRE.NUMSOLSER NUMSOLSER,
            SAC.CD_IDREGISTRO,
            CRE.CR_OPERACIONSAC,
            CRE.RUCEMP RUCEMP,
            SAC.CD_NUT,
            SAC.CD_FECHAEFECTIVASAC,
            SAC.CD_VALORLIQUIDACIONSAC,
            (SELECT A.APENOMAFI FROM IESS_OWNER.KSPCOTAFILIADOS A WHERE A.NUMAFI = CRE.NUMAFI) APENOMAFI,
            AC.AC_ESTADO ESTADOCES,
            CRE.CODESTPRE CODESTPRE
            FROM IESS_OWNER.KSCRETCREDITOS CRE
            INNER JOIN PQ_OWNER.CRE_CREDITOSDEBITOSAC_T SAC
            ON SAC.CD_NUMAFI = CRE.NUMAFI 
            AND SAC.CD_OPERACIONSAC = CRE.CR_OPERACIONSAC 
            INNER JOIN PQ_OWNER.CRE_ACTUALIZACESANTIAS_TBL AC
            ON AC.AC_NUMAFI = CRE.NUMAFI
            WHERE 
            SAC.CD_ESTADOAFECOPE = 'ENV'
            AND SAC.CD_ESTADOPROCESO = 'SDE'
            AND SAC.CD_FECHACARGA = AI_FECHACARGA                            ------------------------------------------------------PRUEBAS DE GASTOS ADM
            AND CRE.CODESTPRE = 'VIG'
            AND AC.AC_TIPO = 'MENSUAL' 
            --AND SAC.CD_NUMAFI = '0917863458'                            
            ORDER BY CRE.FECPREAFI;
        
        
        CURSOR C_TOTALAPROCESAR IS
            SELECT COUNT(1) APROCESAR
            FROM PQ_OWNER.CRE_CREDITOSDEBITOSAC_T SAC
            WHERE SAC.CD_ESTADOAFECOPE = 'ENV'
            AND   SAC.CD_ESTADOPROCESO = 'SDE'
            AND   SAC.CD_FECHACARGA = AI_FECHACARGA;
            
            
        CURSOR C_RESUMENPROCESADOS
        IS
            SELECT 'REGISTROS PROCESADOS: ' MENSAJE, COUNT(1) VALOR
            FROM PQ_OWNER.CRE_CREDITOSDEBITOSAC_T
            WHERE TRUNC(CD_FECHACARGA) = AI_FECHACARGA
            AND NVL(CD_ESTADOPROCESO, '-') IN ('EJE', 'PRO')
            AND NVL(CD_ESTADOAFECOPE, '-') IN ('ADA', 'CDA')
            UNION ALL
            SELECT 'REGISTROS NO PROCESADOS: ' MENSAJE, COUNT(1) VALOR
            FROM PQ_OWNER.CRE_CREDITOSDEBITOSAC_T
            WHERE TRUNC(CD_FECHACARGA) = AI_FECHACARGA
            AND NVL(CD_ESTADOPROCESO, '-') NOT IN ('EJE', 'PRO')
            AND NVL(CD_ESTADOAFECOPE, '-') NOT IN ('ADA', 'CDA')
            UNION ALL
            SELECT 'TOTAL REGISTROS: ' MENSAJE, COUNT(1) VALOR
            FROM PQ_OWNER.CRE_CREDITOSDEBITOSAC_T
            WHERE TRUNC(CD_FECHACARGA) = AI_FECHACARGA;    
        

        TYPE T_PQENMORA IS TABLE OF C_PQENMORA%ROWTYPE INDEX BY PLS_INTEGER;
        L_PQENMORA    T_PQENMORA;


        TYPE T_TOTALAPROCESAR     IS TABLE OF C_TOTALAPROCESAR%ROWTYPE INDEX BY PLS_INTEGER;
        L_TOTALAPROCESAR          T_TOTALAPROCESAR;
        
        
        TYPE T_RESUMENPROCESADOS IS TABLE OF C_RESUMENPROCESADOS%ROWTYPE INDEX BY PLS_INTEGER;
        L_RESUMENPROCESADOS      T_RESUMENPROCESADOS;
        
        L_INICIOPROCESO     DATE;
        L_FINPROCESO        DATE;
        L_DURACIONPROCESO   VARCHAR2(200);
        L_NOMBREARCHIVO        VARCHAR2(200);
        L_EMAILMENSAJE      VARCHAR2(2000);
        
        L_PROCESADOS        PLS_INTEGER := 0;
        L_TIPODEBITO        PLS_INTEGER := 0;
        L_NUMEROLINEAS        PLS_INTEGER := 0;
        
        L_ESTADOCREDITO        IESS_OWNER.KSCRETCREDITOS.CODESTPRE%TYPE;
        L_VALORSALDO        IESS_OWNER.CRE_CREDITOSDEBITOSAC_T.CD_VALORLIQUIDACIONSAC%TYPE;
        L_OBSERVACIONSAC       IESS_OWNER.CRE_CREDITOSDEBITOSAC_T.CD_OBSERVACION%TYPE;
        L_OBSERVACIONBIT    IESS_OWNER.CRE_BITACORAS_TBL.BI_OBSERVACION%TYPE;
        
        R_BITACORAS            IESS_OWNER.CRE_BITACORAS_TBL%ROWTYPE;
        R_KSCRETBITPRO      IESS_OWNER.KSCRETBITPRO%ROWTYPE;
        R_KSCRETCREDITOS      IESS_OWNER.KSCRETCREDITOS%ROWTYPE;
        
        X_SALIREJECUCION       EXCEPTION;
        
        --FECHA DE PRESTAMO, PARA VERIFICAR RESOLUCION
        K_FECPREAFI         CONSTANT VARCHAR2 (8) := '01082007';
        
    BEGIN
    
        SYS.DBMS_APPLICATION_INFO.SET_MODULE (
        MODULE_NAME   => 'CRE_EJECUTADEBITO_P',
        ACTION_NAME   => 'ORQUESTA PROCESOS PARA EJECUCION DEL DEBITO AUTOMATICO');

        
        --BIRACORA INICIO PROCESO
        L_INICIOPROCESO                := SYSDATE;
        R_KSCRETBITPRO.CODPRO         := K_CODPRO;
        R_KSCRETBITPRO.TOTREGCOM     := NULL;
        R_KSCRETBITPRO.FECPRO         := SYSDATE;
        R_KSCRETBITPRO.OBSERV         := 'INICIO CRE_EJECUTADEBITO_P';
        IESS_OWNER.HLCREKPROGEN.PROREGBITPRO(AICCODPRO => R_KSCRETBITPRO.CODPRO, AICOBSERV => R_KSCRETBITPRO.OBSERV);


        --BITACORA REGISTROS A PROCESAR
        OPEN C_TOTALAPROCESAR;
            FETCH C_TOTALAPROCESAR BULK COLLECT INTO L_TOTALAPROCESAR; 
            
            IF L_TOTALAPROCESAR(1).APROCESAR = 0 THEN
                R_KSCRETBITPRO.OBSERV := 'NO EXISTEN REGISTROS PARA PROCESAR';
                IESS_OWNER.HLCREKPROGEN.PROREGBITPRO (AICCODPRO => R_KSCRETBITPRO.CODPRO, AICOBSERV => R_KSCRETBITPRO.OBSERV);
                RAISE X_SALIREJECUCION;
            END IF;
        CLOSE C_TOTALAPROCESAR;


        R_KSCRETBITPRO.OBSERV := 'NUMERO TOTAL DE REGISTROS A PROCESAR: ' || L_TOTALAPROCESAR(1).APROCESAR;
        IESS_OWNER.HLCREKPROGEN.PROREGBITPRO (AICCODPRO => R_KSCRETBITPRO.CODPRO, AICOBSERV => R_KSCRETBITPRO.OBSERV);
        
        
        OPEN C_PQENMORA;
        
        <<FOR_LOOP_CREDITOS>>
        LOOP
            FETCH C_PQENMORA BULK COLLECT INTO L_PQENMORA LIMIT K_LIMITEBULKCOLLECT; 
            
            <<FOR_LOOP_PQENMORA>>
            FOR I IN 1 ..L_PQENMORA.COUNT LOOP
                
                BEGIN
                    --INICIALIZA BITACORAS
                    R_BITACORAS                 := NULL;
                    R_BITACORAS.ID                := G_ID;
                    R_BITACORAS.CODPROC            := G_CODPROCESOBIT;
                    R_BITACORAS.MO_MODULO        := 'CRE';
                    R_BITACORAS.TE_ID_TIPO_ERROR:= G_NIDERROR_GENDEBAUT;
                    R_BITACORAS.CODPRETIP        := L_PQENMORA(I).CODPRETIP;
                    R_BITACORAS.ORDPREAFI        := L_PQENMORA(I).ORDPREAFI;
                    R_BITACORAS.NUMPREAFI        := L_PQENMORA(I).NUMPREAFI;
                    R_BITACORAS.CODPRECLA        := L_PQENMORA(I).CODPRECLA;
                    R_BITACORAS.RUCEMP            := L_PQENMORA(I).RUCEMP;
                    R_BITACORAS.NUMAFI            := L_PQENMORA(I).NUMAFI;
    
                    --INICIALIZA CREDITO
                    R_KSCRETCREDITOS                 :=NULL;      
                    R_KSCRETCREDITOS.NUMAFI          := L_PQENMORA(I).NUMAFI;
                    R_KSCRETCREDITOS.NUMPREAFI       := L_PQENMORA(I).NUMPREAFI;      
                    R_KSCRETCREDITOS.ORDPREAFI       := L_PQENMORA(I).ORDPREAFI;     
                    R_KSCRETCREDITOS.CODPRETIP       := L_PQENMORA(I).CODPRETIP;     
                    R_KSCRETCREDITOS.CODPRECLA       := L_PQENMORA(I).CODPRECLA;     
                    R_KSCRETCREDITOS.CODDIVPOL       := L_PQENMORA(I).CODDIVPOL;     
                    R_KSCRETCREDITOS.FECPREAFI       := L_PQENMORA(I).FECPREAFI;  
                    R_KSCRETCREDITOS.CODTIPSOLSER    := L_PQENMORA(I).CODTIPSOLSER;   
                    R_KSCRETCREDITOS.NUMSOLSER       := L_PQENMORA(I).NUMSOLSER;     
                    R_KSCRETCREDITOS.CR_OPERACIONSAC := L_PQENMORA(I).CR_OPERACIONSAC;
                    R_KSCRETCREDITOS.RUCEMP          := L_PQENMORA(I).RUCEMP;
                    R_KSCRETCREDITOS.CODESTPRE       := L_PQENMORA(I).CODESTPRE;
                    
                    <<BUSCATIPODEBITO>>
                    BEGIN
                    
                        CRE_VALIDATIPODEBITO_P (
                                        AI_KSCRETCREDITOS      => R_KSCRETCREDITOS,
                                        AI_FECRESOL         => K_FECPREAFI,
                                        AO_VALIDACREDITO    => L_TIPODEBITO,
                                        AO_ERROR            => AO_ERROR,
                                        AO_MENSAJEERROR        => AO_MENSAJEERROR);
                        
                        L_TIPODEBITO := NVL(L_TIPODEBITO, 0);
                        
                    END BUSCATIPODEBITO;
                    
                    
                    --NO PUDO ENCONTRAR EL TIPO
                    IF L_TIPODEBITO = 0
                    THEN
                    
                        L_OBSERVACIONBIT     := R_KSCRETCREDITOS.CR_OPERACIONSAC || ' NO SE PUDO DETERMINAR EL TIPO DE DEBITO.';
                        L_OBSERVACIONSAC    := 'DA-17 NO SE PUDO DETERMINAR EL TIPO DE DEBITO.';
                        R_BITACORAS.BI_OBSERVACION    := SUBSTR(L_OBSERVACIONBIT, 1, 200);

                        CRE_INSERTABITACORAS_P (
                                    AI_BITACORAS     => R_BITACORAS,
                                    AO_ERROR         => AO_ERROR,
                                    AO_MENSAJEERROR => AO_MENSAJEERROR);

                        CRE_ACTUALIZADEBITOREC_P (
                                    AI_MENSAJEERROR    => L_OBSERVACIONSAC,
                                    AI_IDGAF          => R_KSCRETCREDITOS.CR_OPERACIONSAC,
                                    AI_IDREGISTRO     => L_PQENMORA(I).CD_IDREGISTRO,
                                    AO_ERROR          => AO_ERROR,
                                    AO_MENSAJEERROR => AO_MENSAJEERROR);
                    END IF;
                        

                    --100% FONDOS DE RESERVA Y MIXTOS
                    IF L_TIPODEBITO = 1 
                    THEN
                        -- 11 RESOLUCION 171
                        --  CC-RFCA-17
                        CRE_GENERADEBITOFRS_P (
                                    AI_KSCRETCREDITOS        => R_KSCRETCREDITOS,
                                    AI_IDREGISTRO           => L_PQENMORA(I).CD_IDREGISTRO,
                                    AI_OPERACIONSAC         => L_PQENMORA(I).CR_OPERACIONSAC,
                                    AI_NUT                  => L_PQENMORA(I).CD_NUT,
                                    AI_FECHASACEFEC         => L_PQENMORA(I).CD_FECHAEFECTIVASAC,
                                    AI_VALORLIQUIDACIONSAC     => L_PQENMORA(I).CD_VALORLIQUIDACIONSAC,
                                    AI_ESTADOCES            => L_PQENMORA(I).ESTADOCES,
                                    AO_VALORSALDO           => L_VALORSALDO,
                                    AO_ESTADOCREDITO        => L_ESTADOCREDITO,
                                    AO_ERROR                  => AO_ERROR,
                                    AO_MENSAJEERROR            => AO_MENSAJEERROR);
                        
                        IF NVL(L_VALORSALDO, 0) > 0 
                        THEN
                            --ESTADO DESPUS DE LA SOLICITUD DE FRS
                            R_KSCRETCREDITOS.CODESTPRE := L_ESTADOCREDITO;
                            CRE_GENERADEBITOFCE_P (
                                        AI_KSCRETCREDITOS    => R_KSCRETCREDITOS,
                                        AI_VALSOL              => L_VALORSALDO,
                                        AI_IDREGISTRO          => L_PQENMORA(I).CD_IDREGISTRO,
                                        AI_OPERACIONSAC        => L_PQENMORA(I).CR_OPERACIONSAC,
                                        AI_NUT                 => L_PQENMORA(I).CD_NUT,
                                        AI_FECHASACEFEC        => L_PQENMORA(I).CD_FECHAEFECTIVASAC,
                                        AI_VALLIQSAC        => L_PQENMORA(I).CD_VALORLIQUIDACIONSAC,
                                        AI_ESTADOCES        => L_PQENMORA(I).ESTADOCES,
                                        AO_ERROR               => AO_ERROR,
                                        AO_MENSAJEERROR     => AO_MENSAJEERROR);
                            
                        END IF;
                    
                    END IF;--L_TIPODEBITO = 1 
                    
                    
                    --100% CESANTIAS Y CD 144
                    IF L_TIPODEBITO = 2 THEN
                        --EL ESTADO ENVIADO ES VIG. ESTADO DEL CREDITO DE LA CONSULTA PRINCIPAL.
                        CRE_GENERADEBITOFCE_P (
                                    AI_KSCRETCREDITOS    => R_KSCRETCREDITOS,
                                    AI_VALSOL              => L_PQENMORA(I).CD_VALORLIQUIDACIONSAC,
                                    AI_IDREGISTRO          => L_PQENMORA(I).CD_IDREGISTRO,
                                    AI_OPERACIONSAC        => L_PQENMORA(I).CR_OPERACIONSAC,
                                    AI_NUT                 => L_PQENMORA(I).CD_NUT,
                                    AI_FECHASACEFEC        => L_PQENMORA(I).CD_FECHAEFECTIVASAC,
                                    AI_VALLIQSAC        => L_PQENMORA(I).CD_VALORLIQUIDACIONSAC,
                                    AI_ESTADOCES        => L_PQENMORA(I).ESTADOCES,
                                    AO_ERROR               => AO_ERROR,
                                    AO_MENSAJEERROR     => AO_MENSAJEERROR);
                        
                    END IF;--L_TIPODEBITO = 2
                    
                EXCEPTION
                WHEN OTHERS
                THEN
                    ROLLBACK;
                    
                    R_BITACORAS.BI_OBSERVACION    := SUBSTR(L_PQENMORA(I).CR_OPERACIONSAC || ' ERROR FOR_LOOP_PQENMORA ' || SQLERRM, 1, 200);

                    CRE_INSERTABITACORAS_P (
                            AI_BITACORAS     => R_BITACORAS,
                            AO_ERROR         => AO_ERROR,
                            AO_MENSAJEERROR => AO_MENSAJEERROR);

                    CRE_ACTUALIZADEBITOREC_P (
                            AI_MENSAJEERROR    => SUBSTR(L_PQENMORA(I).CR_OPERACIONSAC || ' ERROR FOR_LOOP_PQENMORA ' || SQLERRM, 1, 1024),
                            AI_IDGAF          => L_PQENMORA(I).CR_OPERACIONSAC,
                            AI_IDREGISTRO     => L_PQENMORA(I).CD_IDREGISTRO,
                            AO_ERROR          => AO_ERROR,
                            AO_MENSAJEERROR => AO_MENSAJEERROR);
                
                END;

            END LOOP FOR_LOOP_PQENMORA;
            
            
            --BITACORAS
            L_PROCESADOS := L_PROCESADOS + L_PQENMORA.COUNT;
            R_KSCRETBITPRO.OBSERV := L_PROCESADOS || ' REGISTROS PROCESADOS DE: ' || L_TOTALAPROCESAR(1).APROCESAR;
            IESS_OWNER.HLCREKPROGEN.PROREGBITPRO (AICCODPRO => R_KSCRETBITPRO.CODPRO, AICOBSERV => R_KSCRETBITPRO.OBSERV);
            
            
            --ELIMINA LOS REGISTROS DEL ARREGLO POR BLOQUES
            L_PQENMORA.DELETE;
            
            
            EXIT FOR_LOOP_CREDITOS WHEN C_PQENMORA%NOTFOUND;
                
            
        END LOOP FOR_LOOP_CREDITOS;
            
                
        CLOSE C_PQENMORA;
        
            
        --CREACION DEL ARCHIVO
        L_NOMBREARCHIVO := 'DEBITO_AUTOMATICO_PQ' || '_' || TO_CHAR (G_FECHADEBITO, 'FXDDMMYYYY') || '.TXT';
        CRE_ARCHIVODEBITO_P (
                AI_NOMBREARCHIVO    => L_NOMBREARCHIVO,
                AI_NID              => G_ID,
                AO_NUMEROLINEAS        => L_NUMEROLINEAS,
                AO_ERROR              => AO_ERROR,
                AO_MENSAJEERROR        => AO_MENSAJEERROR);
        
        IF AO_ERROR = '0' THEN
            L_OBSERVACIONBIT := 'NOTA: ERROR AL GENERAR EL ARCHIVO CON NOVEDADES EN EL PROCESO DE DEBITO AUTOMATICO';
        END IF;


        --CONSULTA REGISTROS PROCESADOS
        OPEN C_RESUMENPROCESADOS;
            FETCH C_RESUMENPROCESADOS BULK COLLECT INTO L_RESUMENPROCESADOS; 
        CLOSE C_RESUMENPROCESADOS;


        --ENVIO DE NOTIFICACION
        L_FINPROCESO := SYSDATE;
        L_DURACIONPROCESO := IESS_OWNER.GEN_PROCESOSGENERICOS_PKG.GEN_DURACIONPROCESO_FUN(AIFECHAINI => L_INICIOPROCESO, AIFECHAFIN => L_FINPROCESO);
        
        L_EMAILMENSAJE := K_ENTER || K_ENTER
                    || 'RESULTADO DE EJECUCION DE DEBITO AUTOMATICO PQ'
                    || K_ENTER || K_ENTER;

        <<RESUMENPROCESADOS>>                    
        FOR INDX IN 1 .. L_RESUMENPROCESADOS.COUNT
        LOOP
            L_EMAILMENSAJE := L_EMAILMENSAJE || L_RESUMENPROCESADOS(INDX).MENSAJE || ' '|| L_RESUMENPROCESADOS(INDX).VALOR     || K_ENTER;
        END LOOP RESUMENPROCESADOS;
        
        L_EMAILMENSAJE := L_EMAILMENSAJE || K_ENTER || K_ENTER
                    || 'TIEMPOS DE EJECUCION '
                    || K_ENTER
                    || L_DURACIONPROCESO
                    || K_ENTER
                    || K_ENTER
                    || L_OBSERVACIONBIT;

        IESS_OWNER.CRE_PROCESOSGENERICOS_PKG.CRE_ENVIOMAILS_PRC(
                    AIUSERENVMAIL        => G_REMITENTE,
                    AICSUBJECT             => 'RESULTADO EJECUCION DE DEBITO AUTOMATICO PQ ' || TO_CHAR (G_FECHADEBITO, 'FXDDMMYYYY') ,
                    AICMENERRCAB         => NULL,
                    AINCODPRO             => NULL,
                    AICNOMARC             => G_RUTADIRECTORIO || '/' || L_NOMBREARCHIVO,
                    AICMENERRCUE         => NULL,
                    AICDESCRIPCION        => L_EMAILMENSAJE,
                    AINCANTIDADOBS         => L_NUMEROLINEAS,
                    AOCMENERR             => AO_ERROR,
                    AOCRESPRO             => AO_MENSAJEERROR,
                    AITIPRES             => NULL,
                    AICTYPEMAIL         => NULL,
                    AI_DESTINATARIOS     => G_DESTINATARIOS);
                    
        IF AO_ERROR = '0' THEN
            R_KSCRETBITPRO.OBSERV := SUBSTR(AO_MENSAJEERROR,1,1000);
            IESS_OWNER.HLCREKPROGEN.PROREGBITPRO(AICCODPRO => R_KSCRETBITPRO.CODPRO, AICOBSERV => R_KSCRETBITPRO.OBSERV);
        ELSE
            R_KSCRETBITPRO.OBSERV := 'PROCEDIMIENTO CRE_ENVIOMAILS_PRC EJECUTADO CORRECTAMENTE';
            IESS_OWNER.HLCREKPROGEN.PROREGBITPRO (AICCODPRO => R_KSCRETBITPRO.CODPRO, AICOBSERV => R_KSCRETBITPRO.OBSERV);
        END IF;
        
        AO_ERROR := '1';
        AO_MENSAJEERROR := 'FIN PROCEDIMIENTO CRE_EJECUTADEBITO_P';
        
        R_KSCRETBITPRO.OBSERV := AO_MENSAJEERROR;
        IESS_OWNER.HLCREKPROGEN.PROREGBITPRO(AICCODPRO => R_KSCRETBITPRO.CODPRO, AICOBSERV => R_KSCRETBITPRO.OBSERV);
        SYS.DBMS_APPLICATION_INFO.SET_MODULE (NULL, NULL);    
        

    EXCEPTION
    WHEN X_SALIREJECUCION THEN
        AO_ERROR := '1';
        AO_MENSAJEERROR := 'FIN PROCEDIMIENTO CRE_EJECUTADEBITO_P';
        
        R_KSCRETBITPRO.OBSERV := AO_MENSAJEERROR;
        IESS_OWNER.HLCREKPROGEN.PROREGBITPRO (AICCODPRO => R_KSCRETBITPRO.CODPRO, AICOBSERV => R_KSCRETBITPRO.OBSERV);
        
        SYS.DBMS_APPLICATION_INFO.SET_MODULE (NULL, NULL);
        
    WHEN OTHERS
    THEN
        AO_ERROR := '0';
        AO_MENSAJEERROR := SUBSTR('ERROR INESPERADO (CRE_EJECUTADEBITO_P): ' || SQLERRM, 1, 1024);

        R_KSCRETBITPRO.OBSERV := SUBSTR ('ERROR CRE_EJECUTADEBITO_P: ' || SQLERRM, 1024);
        IESS_OWNER.HLCREKPROGEN.PROREGBITPRO(AICCODPRO => R_KSCRETBITPRO.CODPRO, AICOBSERV => R_KSCRETBITPRO.OBSERV);
        
        SYS.DBMS_APPLICATION_INFO.SET_MODULE (NULL, NULL);
        
    END CRE_EJECUTADEBITO_P;
    


    PROCEDURE CRE_VALIDAEJECUTADEB_P (
        AI_TIPOPROCESO         IN VARCHAR2,
        AI_FECHACARGA          IN DATE,
        AO_ERROR              IN OUT VARCHAR2,
        AO_MENSAJEERROR        IN OUT VARCHAR2)
    IS
        L_DIAHOY            IESS_OWNER.CRE_DETCATALOGOPQ_TBL.DP_VALNUMDETCATALOGO%TYPE;
        L_VALNUMDETCATALOGO    IESS_OWNER.CRE_DETCATALOGOPQ_TBL.DP_VALNUMDETCATALOGO%TYPE;
        L_VALCARDETCATALOGO    IESS_OWNER.CRE_DETCATALOGOPQ_TBL.DP_VALCARDETCATALOGO%TYPE;
        L_VALFECDETCATALOGO    IESS_OWNER.CRE_DETCATALOGOPQ_TBL.DP_VALFECDETCATALOGO%TYPE;
        L_CODPROBITPRO        IESS_OWNER.HLPROTTIPOPE.CODPRO%TYPE;
        L_USRENVMAIL        IESS_OWNER.HLPROTTIPOPE.USRENVMAIL%TYPE;
        R_KSCRETBITPRO        IESS_OWNER.KSCRETBITPRO%ROWTYPE;
        
        X_BLOQUERECAUDACION     EXCEPTION;
        X_BANDERARECAUDACION     EXCEPTION;
        X_BANDERAPLANILLA          EXCEPTION;
        X_EJECUTADEBITO          EXCEPTION;
        X_CODIGOPROCESOBIT        EXCEPTION;
        X_CODIGOPROCESOOPE        EXCEPTION;
        
    BEGIN

        SYS.DBMS_APPLICATION_INFO.SET_MODULE (
        MODULE_NAME   => 'CRE_VALIDAEJECUTADEB_P',
        ACTION_NAME   => 'VALIDA LA EJECUCION DEL DEBITO AUTOMATICO');

        R_KSCRETBITPRO.CODPRO         := K_CODPRO;
        R_KSCRETBITPRO.TOTREGCOM     := NULL;
        R_KSCRETBITPRO.FECPRO         := SYSDATE;
        R_KSCRETBITPRO.OBSERV         := 'INICIO PROCEDIMIENTO CRE_VALIDAEJECUTADEB_P';
        IESS_OWNER.HLCREKPROGEN.PROREGBITPRO(AICCODPRO => R_KSCRETBITPRO.CODPRO, AICOBSERV => R_KSCRETBITPRO.OBSERV);
        

        <<VALIDAEJECUCION>>
        BEGIN    

            --VARIABLES USADAS EN EL PAQUETE PRINCIPAL
            UPDATE IESS_OWNER.KSPCOTPOLCOR
            SET VALFECPOL = G_FECHADEBITO
            WHERE CODPOL = 'CREFECDA' AND TIPVALPOL = 'F';
            
            R_KSCRETBITPRO.OBSERV := 'PARAMETRIZA PROCESO CREFECDA: ' || G_FECHADEBITO;
            IESS_OWNER.HLCREKPROGEN.PROREGBITPRO (AICCODPRO => R_KSCRETBITPRO.CODPRO, AICOBSERV => R_KSCRETBITPRO.OBSERV);
            
            UPDATE IESS_OWNER.KSPCOTPOLCOR
            SET VALFECPOL = G_FECHADEBITO
            WHERE CODPOL = 'FECEJE';
            COMMIT;
            
            R_KSCRETBITPRO.OBSERV := 'PARAMETRIZA PROCESO FECEJE: ' || G_FECHADEBITO;
            IESS_OWNER.HLCREKPROGEN.PROREGBITPRO (AICCODPRO => R_KSCRETBITPRO.CODPRO, AICOBSERV => R_KSCRETBITPRO.OBSERV);
            
            
            --CONSULTO BANDERA DE RECAUDACION
            --SI ESTA EN 1 QUIERE DECIR QUE OTRO PROCESO ESTA EN EJECUCION Y NO DEBE CONTINUAR
            --SI ESTA EN 0, DEBE CONTINUAR COLOCANDO 1 PARA BLOQUEAR OTRO PROCESO
            CRE_CONSULTACATALOGO_P (AI_CODCATALOGO => 'PROCACTCES', AI_CODDETCATALOGO => 'FLAGPLA', 
                        AO_VALNUMDETCATALOGO => L_VALNUMDETCATALOGO, AO_VALCARDETCATALOGO => L_VALCARDETCATALOGO, AO_VALFECDETCATALOGO => L_VALFECDETCATALOGO,
                        AO_ERROR => AO_ERROR, AO_MENSAJEERROR => AO_MENSAJEERROR);
            
            IF NVL(AO_ERROR, '0') = '0' THEN
                RAISE X_BANDERARECAUDACION;
            END IF;
            
            IF NVL(L_VALNUMDETCATALOGO, 0) = 1 THEN
                RAISE X_BANDERAPLANILLA;
            END IF;

            
            --BLOQUEO DE LA RECAUDACION
            G_BANDERAPLANILLAS    := 1;            
            CRE_ACTUALIZACATALOGO_P (AI_VALNUMDETCATALOGO => G_BANDERAPLANILLAS,  AI_VALCARDETCATALOGO => 'MENSUAL', AI_VALFECDETCATALOGO => NULL,
                                AI_CODDETCATALOGO => 'FLAGPLA', AO_ERROR => AO_ERROR, AO_MENSAJEERROR => AO_MENSAJEERROR);
            IF AO_ERROR = '0'
            THEN
                AO_MENSAJEERROR := SUBSTR('ERROR PARAMETRIZA PROCESO BLOQUEO RECAUDACION: ' || AO_MENSAJEERROR, 1, 1024);
                RAISE X_BLOQUERECAUDACION;
            ELSE
                R_KSCRETBITPRO.OBSERV := 'PARAMETRIZA PROCESO BLOQUEO RECAUDACION: ' || G_BANDERAPLANILLAS;
                IESS_OWNER.HLCREKPROGEN.PROREGBITPRO (AICCODPRO => R_KSCRETBITPRO.CODPRO, AICOBSERV => R_KSCRETBITPRO.OBSERV);
            END IF;
            
            
            --VALIDA QUE LA FECHA DE DEBITO ESTE PARAMETRIZADA PARA EL SYSDATE DE EJECUCION
            L_DIAHOY := TO_NUMBER (TO_CHAR (SYSDATE, 'DD'),'9999','NLS_NUMERIC_CHARACTERS=''.,''');
            CRE_CONSULTACATALOGO_P (AI_CODCATALOGO => 'TIPODEBITO', AI_CODDETCATALOGO => 'DEBITO', 
                        AO_VALNUMDETCATALOGO => L_VALNUMDETCATALOGO, AO_VALCARDETCATALOGO => L_VALCARDETCATALOGO, AO_VALFECDETCATALOGO => G_FECHADEBITO,
                        AO_ERROR => AO_ERROR, AO_MENSAJEERROR => AO_MENSAJEERROR);
            IF NVL(L_VALNUMDETCATALOGO, 0) <> L_DIAHOY OR NVL(L_VALCARDETCATALOGO, '-') <> 'MENSUAL' THEN
                RAISE X_EJECUTADEBITO;
            END IF;
            
            
            --RECUPERA EL CODIGO DEL PROCESO PARA BITACORAS
            G_CODPROCESOBIT     := IESS_OWNER.GEN_PROCESOSGENERICOS_PKG.GEN_OBT_CODIGOPROC_FUN (
                        PMODULO  => 'CRE',
                        PNOMPACK => 'CRE_DEBITO_AUTOMATICO_PKG',
                        PNOMPROC => 'CRE_DEBITO_AUTOMATICO_PKG');
            IF G_CODPROCESOBIT = 0
            THEN
                RAISE X_CODIGOPROCESOBIT;
            END IF;
            
             --RECUPERA CODIGO PROCESO DE LA OPERACION PARA OBTENER SECUENCIA DE BITACORAS
            IESS_OWNER.CRE_PROCESOSGENERICOS_PKG.CRE_CODPROUSRENVMAIL_PRC (
                        AICNOMPRO     => 'PROCESO DE DEBITO AUTOMATICO',
                        AONCODPRO     => L_CODPROBITPRO,
                        AOCUSRENVMAIL => L_USRENVMAIL,
                        AOCRESPRO     => AO_ERROR,
                        AOCMENERR     => AO_MENSAJEERROR);
            IF NVL(L_CODPROBITPRO,0)=0
            THEN
                RAISE X_CODIGOPROCESOOPE;
            END IF;
    
            --RECUPERA LA SECUENCIA DEL PROCESO PARA LAS BITACORAS
            CRE_GENERACODIGOPROCESO_P(
                            AI_CODPRO       => L_CODPROBITPRO,
                            AI_CODESTPRO    => 0,
                            AI_EXTARC       => 'TXT',
                            AI_NOMARC       => NULL,
                            AI_TIPOPE       => 'I',
                            AI_NID             => G_ID,
                            AO_ERROR          => AO_ERROR,
                            AO_MENSAJEERROR => AO_MENSAJEERROR);

            IF NVL(AO_ERROR, '0') = '0'
            THEN
                AO_MENSAJEERROR := SUBSTR('NO SE PUDO OBTENER LA SECUENCIA DEL PROCESO PARA BITACORAS1.' || AO_MENSAJEERROR, 1, 100);
                R_KSCRETBITPRO.OBSERV := AO_MENSAJEERROR;
                IESS_OWNER.HLCREKPROGEN.PROREGBITPRO (AICCODPRO => R_KSCRETBITPRO.CODPRO, AICOBSERV => R_KSCRETBITPRO.OBSERV);
            END IF;

            IF NVL(G_ID, 0) = 0 THEN
                G_ID := 3303195;
            END IF;
    
        END VALIDAEJECUCION;


        --INVOCAR EJECUCION DEBITO
        --------------------------
        <<EJECUTA>>
        BEGIN
        
            CRE_EJECUTADEBITO_P (
                        AI_TIPOPROCESO     => AI_TIPOPROCESO,
                        AI_FECHACARGA      => AI_FECHACARGA,
                        AO_ERROR        => AO_ERROR,
                        AO_MENSAJEERROR    => AO_MENSAJEERROR);


            IF AO_ERROR = '0'
            THEN
                R_KSCRETBITPRO.OBSERV := AO_MENSAJEERROR;
                IESS_OWNER.HLCREKPROGEN.PROREGBITPRO (AICCODPRO => R_KSCRETBITPRO.CODPRO, AICOBSERV => R_KSCRETBITPRO.OBSERV);            
            ELSE
                AO_ERROR := '1';
                AO_MENSAJEERROR := 'FIN PROCEDIMIENTO CRE_VALIDAEJECUTADEB_P';
                
                R_KSCRETBITPRO.OBSERV := AO_MENSAJEERROR;
                IESS_OWNER.HLCREKPROGEN.PROREGBITPRO (AICCODPRO => R_KSCRETBITPRO.CODPRO, AICOBSERV => R_KSCRETBITPRO.OBSERV);    

                --CAMBIA BANDERA DE EJECUCION EXITOSA
                UPDATE PQ_OWNER.CRE_DETCATALOGOPQ_TBL
                SET DP_VALNUMDETCATALOGO = 1
                WHERE DP_CODDETCATALOGO = '2EJEDEB'
                AND DP_VALCARDETCATALOGO = 'CRE_VALIDAEJECUTADEB_P'
                AND DP_VALNUMDETCATALOGO = 0
                AND DP_VALCARDETCATALOGO IS NOT NULL
                AND DP_ESTADODETCATALOGO = 'A'
                AND DP_TIPVALDETCATALOGO = 'V';                        
                COMMIT;
            END IF;

        END EJECUTA;
        
        
        --FIN AUDITORIA TABLA GENERAL
        IESS_OWNER.GEN_PROCESOSGENERICOS_PKG.GEN_INSUPDHLPROTBITOPE_PRC (
                    AICCODPRO      => G_CODPROCESOBIT,
                    AINCODESTPRO   => 1,
                    AICEXTARC      => 'TXT',
                    AINOMARC       => NULL,
                    AITIPOPE       => 'U',
                    AIONID         => G_ID,
                    AOCRESPRO      => AO_ERROR,
                    AOCMENERR      => AO_MENSAJEERROR);
        
        
        AO_ERROR := '1';
        AO_MENSAJEERROR := 'FIN PROCEDIMIENTO CRE_VALIDAEJECUTADEB_P';
        
        R_KSCRETBITPRO.OBSERV := AO_MENSAJEERROR;
        IESS_OWNER.HLCREKPROGEN.PROREGBITPRO (AICCODPRO => R_KSCRETBITPRO.CODPRO, AICOBSERV => R_KSCRETBITPRO.OBSERV);
        SYS.DBMS_APPLICATION_INFO.SET_MODULE (NULL, NULL);    
        
        
    EXCEPTION
    WHEN X_CODIGOPROCESOBIT THEN
        AO_ERROR := '0';
        AO_MENSAJEERROR := 'NO SE PUDO OBTENER CODIGO DEL PROCESO CRE_DEBITO_AUTOMATICO_PKG PARA BITACORAS';
         
        R_KSCRETBITPRO.OBSERV := AO_MENSAJEERROR;
        IESS_OWNER.HLCREKPROGEN.PROREGBITPRO (AICCODPRO => R_KSCRETBITPRO.CODPRO, AICOBSERV => R_KSCRETBITPRO.OBSERV);
        SYS.DBMS_APPLICATION_INFO.SET_MODULE (NULL, NULL);
        
    WHEN X_CODIGOPROCESOOPE THEN
        AO_ERROR := '0';
        AO_MENSAJEERROR := 'NO SE PUDO OBTENER CODIGO DEL PROCESO DE LA OPERACION PARA OTENER EL ID DE BITACORA';
         
        R_KSCRETBITPRO.OBSERV := AO_MENSAJEERROR;
        IESS_OWNER.HLCREKPROGEN.PROREGBITPRO (AICCODPRO => R_KSCRETBITPRO.CODPRO, AICOBSERV => R_KSCRETBITPRO.OBSERV);
        SYS.DBMS_APPLICATION_INFO.SET_MODULE (NULL, NULL);    
        
    WHEN X_BANDERARECAUDACION THEN
        AO_ERROR := '0';
        AO_MENSAJEERROR := 'NO SE PUDO OBTENER EL VALOR DE LA BANDERA DE RECAUDACION';
         
        R_KSCRETBITPRO.OBSERV := AO_MENSAJEERROR;
        IESS_OWNER.HLCREKPROGEN.PROREGBITPRO (AICCODPRO => R_KSCRETBITPRO.CODPRO, AICOBSERV => R_KSCRETBITPRO.OBSERV);
        SYS.DBMS_APPLICATION_INFO.SET_MODULE (NULL, NULL);
        
    WHEN X_BLOQUERECAUDACION THEN
        AO_ERROR := '0';
        AO_MENSAJEERROR := 'ERROR AL BLOQUEAR LA RECAUDACION POR DEBITO AUTOMATICO.';
         
        R_KSCRETBITPRO.OBSERV := AO_MENSAJEERROR;
        IESS_OWNER.HLCREKPROGEN.PROREGBITPRO (AICCODPRO => R_KSCRETBITPRO.CODPRO, AICOBSERV => R_KSCRETBITPRO.OBSERV);
        SYS.DBMS_APPLICATION_INFO.SET_MODULE (NULL, NULL);

    WHEN X_BANDERAPLANILLA THEN
        AO_ERROR := '0';
        AO_MENSAJEERROR := 'UN PROCESO DE RECAUDACION ESTA EN EJECUCION.';
         
        R_KSCRETBITPRO.OBSERV := AO_MENSAJEERROR;
        IESS_OWNER.HLCREKPROGEN.PROREGBITPRO (AICCODPRO => R_KSCRETBITPRO.CODPRO, AICOBSERV => R_KSCRETBITPRO.OBSERV);
        SYS.DBMS_APPLICATION_INFO.SET_MODULE (NULL, NULL);
        
    WHEN X_EJECUTADEBITO
    THEN
        AO_ERROR := '0';
        AO_MENSAJEERROR := 'HOY NO ES EL DIA DE EJECUCION DEL PROCESO DE DEBITO AUTOMATICO.';

        R_KSCRETBITPRO.OBSERV := AO_MENSAJEERROR;
        IESS_OWNER.HLCREKPROGEN.PROREGBITPRO (AICCODPRO => R_KSCRETBITPRO.CODPRO, AICOBSERV => R_KSCRETBITPRO.OBSERV);
        SYS.DBMS_APPLICATION_INFO.SET_MODULE (NULL, NULL);    
        
    WHEN OTHERS
    THEN
        AO_ERROR := '0';
        AO_MENSAJEERROR := SUBSTR('ERROR CRE_VALIDAEJECUTADEB_P: ' || SQLERRM, 1, 1024);
         
        R_KSCRETBITPRO.OBSERV := AO_MENSAJEERROR;
        IESS_OWNER.HLCREKPROGEN.PROREGBITPRO (AICCODPRO => R_KSCRETBITPRO.CODPRO, AICOBSERV => R_KSCRETBITPRO.OBSERV);
        SYS.DBMS_APPLICATION_INFO.SET_MODULE (NULL, NULL);
         
    END CRE_VALIDAEJECUTADEB_P;    



    PROCEDURE CRE_ACTUALIZAPARAMETROS_P (
        AO_ERROR               OUT VARCHAR2,
        AO_MENSAJEERROR      OUT VARCHAR2)
    IS
        R_KSCRETBITPRO        IESS_OWNER.KSCRETBITPRO%ROWTYPE;
        
    BEGIN
        
        SYS.DBMS_APPLICATION_INFO.SET_MODULE (
        MODULE_NAME   => 'CRE_ACTUALIZAPARAMETROS_P',
        ACTION_NAME   => 'ACTUALIZA LAS PARAMETRIZACIONES PARA EL SIGUIENTE MES');


        R_KSCRETBITPRO.CODPRO         := K_CODPRO;
        R_KSCRETBITPRO.TOTREGCOM     := NULL;
        R_KSCRETBITPRO.FECPRO         := SYSDATE;
        R_KSCRETBITPRO.OBSERV         := 'INICIO PROCEDIMIENTO CRE_ACTUALIZAPARAMETROS_P';
        IESS_OWNER.HLCREKPROGEN.PROREGBITPRO(AICCODPRO => R_KSCRETBITPRO.CODPRO, AICOBSERV => R_KSCRETBITPRO.OBSERV);

        --FECHAS DE EJECUCION 
        UPDATE PQ_OWNER.CRE_DETCATALOGOPQ_TBL 
        SET DP_VALFECDETCATALOGO = NULL
        WHERE DP_CODDETCATALOGO IN ('ACTCESDEB', 'DEBITO', 'PARAMETROS')
        AND DP_ESTADODETCATALOGO = 'A'
        AND DP_TIPVALDETCATALOGO = 'V';
     
        
        --BANDERA DE RECAUDACION - DESBLOQUEO
        UPDATE PQ_OWNER.CRE_DETCATALOGOPQ_TBL
        SET DP_VALNUMDETCATALOGO = 0
        WHERE     DP_ESTADODETCATALOGO = 'A'
        AND DP_TIPVALDETCATALOGO = 'V'
        AND DP_CODDETCATALOGO = 'FLAGPLA';
        
        
        --PROCESOS DE CESANTIAS
        UPDATE PQ_OWNER.CRE_DETCATALOGOPQ_TBL
        SET DP_VALNUMDETCATALOGO = 0
        WHERE DP_CODDETCATALOGO LIKE ('%EJECES')
        AND DP_VALNUMDETCATALOGO = 1
        AND DP_VALCARDETCATALOGO IS NOT NULL
        AND DP_ESTADODETCATALOGO = 'A'
        AND DP_TIPVALDETCATALOGO = 'V';    
        
        
        --PROCESOS DE DEBITO
        UPDATE PQ_OWNER.CRE_DETCATALOGOPQ_TBL
        SET DP_VALNUMDETCATALOGO = 0
        WHERE DP_CODDETCATALOGO LIKE ('%EJEDEB')
        AND DP_VALNUMDETCATALOGO = 1
        AND DP_VALCARDETCATALOGO IS NOT NULL
        AND DP_ESTADODETCATALOGO = 'A'
        AND DP_TIPVALDETCATALOGO = 'V';    
        
        
        --PARAMETRIZACIONES
        UPDATE PQ_OWNER.CRE_DETCATALOGOPQ_TBL
        SET DP_VALNUMDETCATALOGO = 0
        WHERE DP_CODDETCATALOGO LIKE ('%EJEPARAM')
        AND DP_VALNUMDETCATALOGO = 1
        AND DP_VALCARDETCATALOGO IS NOT NULL
        AND DP_ESTADODETCATALOGO = 'A'
        AND DP_TIPVALDETCATALOGO = 'V';    
        
        COMMIT;
    
        AO_ERROR := '1';
        AO_MENSAJEERROR := 'FIN PROCEDIMIENTO CRE_ACTUALIZAPARAMETROS_P';
        
        R_KSCRETBITPRO.OBSERV := AO_MENSAJEERROR;
        IESS_OWNER.HLCREKPROGEN.PROREGBITPRO (AICCODPRO => R_KSCRETBITPRO.CODPRO, AICOBSERV => R_KSCRETBITPRO.OBSERV);
        SYS.DBMS_APPLICATION_INFO.SET_MODULE (NULL, NULL);    

        
    EXCEPTION
    WHEN OTHERS
    THEN
        AO_ERROR := '0';
        AO_MENSAJEERROR := SUBSTR('ERROR CRE_ACTUALIZAPARAMETROS_P: ' || SQLERRM, 1, 1024);
         
        R_KSCRETBITPRO.OBSERV := AO_MENSAJEERROR;
        IESS_OWNER.HLCREKPROGEN.PROREGBITPRO (AICCODPRO => R_KSCRETBITPRO.CODPRO, AICOBSERV => R_KSCRETBITPRO.OBSERV);
        SYS.DBMS_APPLICATION_INFO.SET_MODULE (NULL, NULL);
        
    END CRE_ACTUALIZAPARAMETROS_P;




---------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------



    PROCEDURE CRE_PARAMETRIZACIONES_P (
        AO_ERROR          IN OUT VARCHAR2,
        AO_MENSAJEERROR    IN OUT VARCHAR2)
    IS
        L_VALNUMDETCATALOGO    IESS_OWNER.CRE_DETCATALOGOPQ_TBL.DP_VALNUMDETCATALOGO%TYPE := 0;
        L_VALFECDETCATALOGO    IESS_OWNER.CRE_DETCATALOGOPQ_TBL.DP_VALFECDETCATALOGO%TYPE;
        L_VALCARDETCATALOGO    IESS_OWNER.CRE_DETCATALOGOPQ_TBL.DP_VALCARDETCATALOGO%TYPE;
        
        R_KSCRETBITPRO        IESS_OWNER.KSCRETBITPRO%ROWTYPE;
        X_SALIREJECUCION    EXCEPTION;
        
    BEGIN

        SYS.DBMS_APPLICATION_INFO.SET_MODULE (
        MODULE_NAME   => 'CRE_PARAMETRIZACIONES_P',
        ACTION_NAME   => 'PARAMERIZACION DE LAS FECHAS Y BANDERAS A USAR EN TODO EL PROCESO');
        
        R_KSCRETBITPRO.CODPRO         := K_CODPRO;
        R_KSCRETBITPRO.FECPRO         := SYSDATE;
        R_KSCRETBITPRO.OBSERV         := '1 INICIO PROCEDIMIENTO CRE_PARAMETRIZACIONES_P';
        IESS_OWNER.HLCREKPROGEN.PROREGBITPRO (AICCODPRO => R_KSCRETBITPRO.CODPRO, AICOBSERV => R_KSCRETBITPRO.OBSERV);
        
        
        --VALIDA SI LA INFORMACION A PROCESAR, YA ESTA CARGADA EN LA BASE DEL IESS
        <<VALIDACARGADATOS>>
        BEGIN

            CRE_CONSULTACATALOGO_P (AI_CODCATALOGO => 'DEBAUTPQ', AI_CODDETCATALOGO => '1EJECES', 
                            AO_VALNUMDETCATALOGO => L_VALNUMDETCATALOGO, AO_VALCARDETCATALOGO => L_VALCARDETCATALOGO, AO_VALFECDETCATALOGO => L_VALFECDETCATALOGO,
                            AO_ERROR => AO_ERROR, AO_MENSAJEERROR => AO_MENSAJEERROR);
            
            IF AO_ERROR = '0' THEN
                AO_MENSAJEERROR := '1 ERROR AL CONSULTAR SI EL PROCESO DE CARGA DE INFORMACION HA CONCLUIDO';
                RAISE X_SALIREJECUCION;
            ELSE
                IF L_VALNUMDETCATALOGO = 0 
                THEN
                    AO_ERROR := '0';
                    AO_MENSAJEERROR := '1 EL PROCESO DE CARGA DE INFORMACION NO HA CONCLUIDO';
 
                    RAISE X_SALIREJECUCION;                
                END IF;
            END IF;
        
        END VALIDACARGADATOS;
        
        
        <<INICIALIZACION>>
        BEGIN
        
            --VALIDA SI YA SE ENCUENTRA PARAMETRIZADA LAS FECHAS DE CARGA Y DE DEBITO
            CRE_CONSULTACATALOGO_P (AI_CODCATALOGO => 'PROCACTCES', AI_CODDETCATALOGO => 'ACTCESDEB', 
                            AO_VALNUMDETCATALOGO => L_VALNUMDETCATALOGO, AO_VALCARDETCATALOGO => L_VALCARDETCATALOGO, AO_VALFECDETCATALOGO => G_FECHACARGA,
                            AO_ERROR => AO_ERROR, AO_MENSAJEERROR => AO_MENSAJEERROR);            
            IF AO_ERROR = '0' THEN
                AO_MENSAJEERROR := '1 ERROR AL CONSULTAR LA FECHA DE CARGA PARAMETRIZADA';
                RAISE X_SALIREJECUCION;
            END IF;
            
            CRE_CONSULTACATALOGO_P (AI_CODCATALOGO => 'TIPODEBITO', AI_CODDETCATALOGO => 'DEBITO', 
                            AO_VALNUMDETCATALOGO => L_VALNUMDETCATALOGO, AO_VALCARDETCATALOGO => L_VALCARDETCATALOGO, AO_VALFECDETCATALOGO => G_FECHADEBITO,
                            AO_ERROR => AO_ERROR, AO_MENSAJEERROR => AO_MENSAJEERROR);            
            IF AO_ERROR = '0' THEN
                AO_MENSAJEERROR := '1 ERROR AL CONSULTAR LA FECHA DE DEBITO PARAMETRIZADA';
                RAISE X_SALIREJECUCION;
            END IF;    
            
            CRE_CONSULTACATALOGO_P (AI_CODCATALOGO => 'TIPODEBITO', AI_CODDETCATALOGO => 'PARAMETROS', 
                            AO_VALNUMDETCATALOGO => L_VALNUMDETCATALOGO, AO_VALCARDETCATALOGO => L_VALCARDETCATALOGO, AO_VALFECDETCATALOGO => G_FECHADESBLOQUEO,
                            AO_ERROR => AO_ERROR, AO_MENSAJEERROR => AO_MENSAJEERROR);            
            IF AO_ERROR = '0' THEN
                AO_MENSAJEERROR := '1 ERROR AL CONSULTAR LA FECHA DE DESBLOQUEO PARAMETRIZADA';
                RAISE X_SALIREJECUCION;
            END IF;    
            
            --CONFIGURA LAS PARAMETRIZACIONES PARA EL PROCESO DE CESANTIAS
            IF G_FECHACARGA IS NULL 
            THEN
                
                --CONSULTA EL NUMERO DE DIAS QUE SE DEBE EJECUTAR EL DEBITO, LUEGO DE LA EJECUCION DEL PROCESO DE ACTUALIAZCION DE CESANTIAS
                CRE_CONSULTACATALOGO_P (AI_CODCATALOGO => 'DEBAUTPQ', AI_CODDETCATALOGO => 'NUMDIAS', 
                                AO_VALNUMDETCATALOGO => L_VALNUMDETCATALOGO, AO_VALCARDETCATALOGO => L_VALCARDETCATALOGO, AO_VALFECDETCATALOGO => L_VALFECDETCATALOGO,
                                AO_ERROR => AO_ERROR, AO_MENSAJEERROR => AO_MENSAJEERROR);            
                IF AO_ERROR = '0' THEN
                    L_VALNUMDETCATALOGO := 0;
                END IF;
                
                G_FECHACARGA        := TRUNC(SYSDATE);                                                                    
                G_FECHADEBITO        := TRUNC(G_FECHACARGA + L_VALNUMDETCATALOGO);
                G_FECHADESBLOQUEO    := TRUNC(G_FECHADEBITO + L_VALNUMDETCATALOGO);
                
                G_DIAACTUALIZACESA         := TO_NUMBER (TO_CHAR (SYSDATE, 'DD'),'9999','NLS_NUMERIC_CHARACTERS=''.,''');            
                G_DIAEJECUTADEBITO         := G_DIAACTUALIZACESA + L_VALNUMDETCATALOGO;
                G_DIAEJECUTADESBLOQUEO    := G_DIAEJECUTADEBITO + L_VALNUMDETCATALOGO;


                --FECHA EJECUCION ACTUALIZACION DE CESANTIAS
                CRE_ACTUALIZACATALOGO_P (AI_VALNUMDETCATALOGO => G_DIAACTUALIZACESA, AI_VALCARDETCATALOGO => 'MENSUAL', AI_VALFECDETCATALOGO => G_FECHACARGA,
                                    AI_CODDETCATALOGO => 'ACTCESDEB', AO_ERROR => AO_ERROR, AO_MENSAJEERROR => AO_MENSAJEERROR);
                IF AO_ERROR = '0'
                THEN
                    AO_MENSAJEERROR := SUBSTR('1 ERROR PARAMETRIZA PROCESO CESANTIAS: ' || AO_MENSAJEERROR, 1, 1024);
                    RAISE X_SALIREJECUCION;
                ELSE
                    R_KSCRETBITPRO.OBSERV := '1 PARAMETRIZA PROCESO CESANTIAS: ' || G_FECHACARGA;    
                    IESS_OWNER.HLCREKPROGEN.PROREGBITPRO (AICCODPRO => R_KSCRETBITPRO.CODPRO, AICOBSERV => R_KSCRETBITPRO.OBSERV);                    
                END IF;

                
                --FECHA EJECUCION DEBITO AUTOMATICO
                CRE_ACTUALIZACATALOGO_P (AI_VALNUMDETCATALOGO => G_DIAEJECUTADEBITO, AI_VALCARDETCATALOGO => 'MENSUAL', AI_VALFECDETCATALOGO => G_FECHADEBITO,
                                    AI_CODDETCATALOGO => 'DEBITO', AO_ERROR => AO_ERROR, AO_MENSAJEERROR => AO_MENSAJEERROR);
                IF AO_ERROR = '0'
                THEN
                    AO_MENSAJEERROR := SUBSTR('1 ERROR PARAMETRIZA PROCESO DEBITO: ' || AO_MENSAJEERROR, 1, 1024);
                    RAISE X_SALIREJECUCION;                
                ELSE
                    R_KSCRETBITPRO.OBSERV := '1 PARAMETRIZA PROCESO DEBITO: ' || G_FECHADEBITO;
                    IESS_OWNER.HLCREKPROGEN.PROREGBITPRO (AICCODPRO => R_KSCRETBITPRO.CODPRO, AICOBSERV => R_KSCRETBITPRO.OBSERV);        
                END IF;
                
                
                --FECHA EJECUCION DESBLOQUEO
                CRE_ACTUALIZACATALOGO_P (AI_VALNUMDETCATALOGO => G_DIAEJECUTADESBLOQUEO, AI_VALCARDETCATALOGO => 'MENSUAL', AI_VALFECDETCATALOGO => G_FECHADESBLOQUEO,
                                    AI_CODDETCATALOGO => 'PARAMETROS', AO_ERROR => AO_ERROR, AO_MENSAJEERROR => AO_MENSAJEERROR);
                IF AO_ERROR = '0'
                THEN
                    AO_MENSAJEERROR := SUBSTR('1 ERROR PARAMETRIZA PROCESO DESBLOQUEO: ' || AO_MENSAJEERROR, 1, 1024);
                    RAISE X_SALIREJECUCION;                
                ELSE
                    R_KSCRETBITPRO.OBSERV := '1 PARAMETRIZA PROCESO DESBLOQUEO: ' || G_FECHADESBLOQUEO;
                    IESS_OWNER.HLCREKPROGEN.PROREGBITPRO (AICCODPRO => R_KSCRETBITPRO.CODPRO, AICOBSERV => R_KSCRETBITPRO.OBSERV);        
                END IF;
                
            ELSE
            
                R_KSCRETBITPRO.OBSERV := '1 FECHA DE CARGA PARAMETRIZADA: ' || G_FECHACARGA;                
                IESS_OWNER.HLCREKPROGEN.PROREGBITPRO (AICCODPRO => R_KSCRETBITPRO.CODPRO, AICOBSERV => R_KSCRETBITPRO.OBSERV);

                R_KSCRETBITPRO.OBSERV := '1 FECHA DE DEBITO PARAMETRIZADA: ' || G_FECHADEBITO;                
                IESS_OWNER.HLCREKPROGEN.PROREGBITPRO (AICCODPRO => R_KSCRETBITPRO.CODPRO, AICOBSERV => R_KSCRETBITPRO.OBSERV);

                R_KSCRETBITPRO.OBSERV := '1 FECHA DE DESBLOQUEO PARAMETRIZADA: ' || G_FECHADESBLOQUEO;                
                IESS_OWNER.HLCREKPROGEN.PROREGBITPRO (AICCODPRO => R_KSCRETBITPRO.CODPRO, AICOBSERV => R_KSCRETBITPRO.OBSERV);
                
            END IF;

            
            --CONFIGURA LAS PARAMETRIZACIONES PARA EL PROCESO DE DEBITO AUTOMATICO
            IF COALESCE(G_FECHADEBITO, TRUNC(SYSDATE-10)) = TRUNC(SYSDATE) 
            THEN

                --CONSULTAR EL TIPO DE ERROR SOLO PARA PROCESO DE DEBITO AUTOMATICO
                IESS_OWNER.CRE_PROCESOSGENERICOS_PKG.CRE_LEERTIPOERRORDEBITO_PRC (
                    AI_CCODPOL => 'CRE', AO_CDESCRIPCION => 'ERROR AL GENERAR DEBITO AUTOMATICO', AO_CTIPERROR => G_NIDERROR_GENDEBAUT);
                
                
                IESS_OWNER.CRE_PROCESOSGENERICOS_PKG.CRE_LEERTIPOERRORDEBITO_PRC (
                    AI_CCODPOL => 'CRE', AO_CDESCRIPCION => 'ERROR AL REALIZAR DEBITO AUTOMATICO CES', AO_CTIPERROR => G_NIDERROR_GENDEBCES); 
        
        
                IESS_OWNER.CRE_PROCESOSGENERICOS_PKG.CRE_LEERTIPOERRORDEBITO_PRC (
                    AI_CCODPOL => 'CRE', AO_CDESCRIPCION => 'ERROR AL REALIZAR DEBITO AUTOMATICO FR', AO_CTIPERROR => G_NIDERROR_GENDEBFRS);


                IESS_OWNER.CRE_PROCESOSGENERICOS_PKG.CRE_LEERTIPOERRORDEBITO_PRC (
                    AI_CCODPOL => 'CRE', AO_CDESCRIPCION => 'CARGO DE FONDOS DE RESERVA', AO_CTIPERROR => G_NIDCARGOS_FRS);


                IESS_OWNER.CRE_PROCESOSGENERICOS_PKG.CRE_LEERTIPOERRORDEBITO_PRC (
                    AI_CCODPOL => 'CRE', AO_CDESCRIPCION => 'BLOQUEO TOTAL FONDOS DE RESERVA', AO_CTIPERROR => G_NIDBLOQUEOS_FRS);


                IESS_OWNER.CRE_PROCESOSGENERICOS_PKG.CRE_LEERTIPOERRORDEBITO_PRC (
                    AI_CCODPOL => 'CRE', AO_CDESCRIPCION => 'SOLICITUD FR PENDIENTE', AO_CTIPERROR => G_NIDSOLICITUD_FRS);
                
                
                IESS_OWNER.CRE_PROCESOSGENERICOS_PKG.CRE_LEERTIPOERRORDEBITO_PRC (
                    AI_CCODPOL => 'CRE', AO_CDESCRIPCION => 'TRAMITES FR PENDIENTES', AO_CTIPERROR => G_NIDTRAMITES_FRS);
            
            
                IESS_OWNER.CRE_PROCESOSGENERICOS_PKG.CRE_LEERTIPOERRORDEBITO_PRC (
                    AI_CCODPOL => 'CRE', AO_CDESCRIPCION => 'FONDOS DE RESERVA NO DISPONIBLE', AO_CTIPERROR => G_NIDNODISPONIBLE_FRS);
        
        
                IESS_OWNER.CRE_PROCESOSGENERICOS_PKG.CRE_LEERTIPOERRORDEBITO_PRC (
                    AI_CCODPOL => 'CRE', AO_CDESCRIPCION => 'DEBITO AUTOMATICO PQ CON EXITO', AO_CTIPERROR => G_NIDDEBITO_EXITOSO);

            END IF;
            
            
            --CONFIGURA LAS PARAMETRIZACIONES PARA AMBOS PROCESOS
            --NUMERO DE DIAS EN MORA
            CRE_CONSULTACATALOGO_P (AI_CODCATALOGO => 'DEBAUTPQ', AI_CODDETCATALOGO => 'DIASMORA', 
                            AO_VALNUMDETCATALOGO => G_DIASENMORA, AO_VALCARDETCATALOGO => L_VALCARDETCATALOGO, AO_VALFECDETCATALOGO => L_VALFECDETCATALOGO,
                            AO_ERROR => AO_ERROR, AO_MENSAJEERROR => AO_MENSAJEERROR);

            IF AO_ERROR = '0' THEN
                AO_MENSAJEERROR := '1 NO SE PUDO OBTENER EL NUMERO DE DIAS DE MORA PARAMETRIZADO PARA EL PROCESO.';
                RAISE X_SALIREJECUCION;
            END IF;            
            
            
            --CUENTA DE CORREO ORIGEN
            CRE_CONSULTACATALOGO_P (AI_CODCATALOGO => 'DEBAUTPQ', AI_CODDETCATALOGO => 'NOTDEBAUTO', 
                            AO_VALNUMDETCATALOGO => L_VALNUMDETCATALOGO, AO_VALCARDETCATALOGO => G_REMITENTE, AO_VALFECDETCATALOGO => L_VALFECDETCATALOGO,
                            AO_ERROR => AO_ERROR, AO_MENSAJEERROR => AO_MENSAJEERROR);            
            IF AO_ERROR = '0' THEN
                G_REMITENTE := 'NOTIFICACIONES@BIESS.FIN.EC';
            END IF;
        
            
            --CUENTA DE CORREO DESTINO
            CRE_CONSULTACATALOGO_P (AI_CODCATALOGO => 'DEBAUTPQ', AI_CODDETCATALOGO => 'NOTDEBAUTD', 
                            AO_VALNUMDETCATALOGO => L_VALNUMDETCATALOGO, AO_VALCARDETCATALOGO => G_DESTINATARIOS, AO_VALFECDETCATALOGO => L_VALFECDETCATALOGO,
                            AO_ERROR => AO_ERROR, AO_MENSAJEERROR => AO_MENSAJEERROR);
            IF AO_ERROR = '0' THEN
                G_DESTINATARIOS := 'NOTIFICACIONES@BIESS.FIN.EC';
            END IF;
            
            
            --DIRECTORIO DE BDD FISICO
            CRE_CONSULTACATALOGO_P (AI_CODCATALOGO => 'DEBAUTPQ', AI_CODDETCATALOGO => 'RUTADIRPQ', 
                            AO_VALNUMDETCATALOGO => L_VALNUMDETCATALOGO, AO_VALCARDETCATALOGO => G_RUTADIRECTORIO, AO_VALFECDETCATALOGO => L_VALFECDETCATALOGO,
                            AO_ERROR => AO_ERROR, AO_MENSAJEERROR => AO_MENSAJEERROR);
            IF AO_ERROR = '0' THEN
                G_RUTADIRECTORIO := '/D4/DATA/EXPORT';
            END IF;


            --DIRECTORIO DE BDD VIRTUAL
            CRE_CONSULTACATALOGO_P (AI_CODCATALOGO => 'DEBAUTPQ', AI_CODDETCATALOGO => 'DIRECTOPQ', 
                            AO_VALNUMDETCATALOGO => L_VALNUMDETCATALOGO, AO_VALCARDETCATALOGO => G_DIRECTORIO, AO_VALFECDETCATALOGO => L_VALFECDETCATALOGO,
                            AO_ERROR => AO_ERROR, AO_MENSAJEERROR => AO_MENSAJEERROR);
            IF AO_ERROR = '0' THEN
                G_DIRECTORIO := 'DIRGENEXP';
            END IF;
            
        END INICIALIZACION; 


        COMMIT;    
        AO_ERROR := '1';
        AO_MENSAJEERROR := '1 FIN PROCEDIMIENTO CRE_PARAMETRIZACIONES_P';

        R_KSCRETBITPRO.OBSERV := AO_MENSAJEERROR;
        IESS_OWNER.HLCREKPROGEN.PROREGBITPRO (AICCODPRO => R_KSCRETBITPRO.CODPRO, AICOBSERV => R_KSCRETBITPRO.OBSERV);
        
        SYS.DBMS_APPLICATION_INFO.SET_MODULE (NULL, NULL);
        
    EXCEPTION
    WHEN X_SALIREJECUCION THEN
        R_KSCRETBITPRO.OBSERV := AO_MENSAJEERROR;
        IESS_OWNER.HLCREKPROGEN.PROREGBITPRO (AICCODPRO => R_KSCRETBITPRO.CODPRO, AICOBSERV => R_KSCRETBITPRO.OBSERV);
        
        SYS.DBMS_APPLICATION_INFO.SET_MODULE (NULL, NULL);
        
    WHEN OTHERS
    THEN
        AO_ERROR := '0';
        AO_MENSAJEERROR := SUBSTR('1 ERROR CRE_PARAMETRIZACIONES_P: ' || SQLERRM, 1, 1024);

        R_KSCRETBITPRO.OBSERV := AO_MENSAJEERROR;
        IESS_OWNER.HLCREKPROGEN.PROREGBITPRO (AICCODPRO => R_KSCRETBITPRO.CODPRO, AICOBSERV => R_KSCRETBITPRO.OBSERV);
        
        SYS.DBMS_APPLICATION_INFO.SET_MODULE (NULL, NULL);
         
    END CRE_PARAMETRIZACIONES_P;


    PROCEDURE CRE_DEBITOAUTOMATICO_P (
        AO_ERROR          IN OUT VARCHAR2,
        AO_MENSAJEERROR    IN OUT VARCHAR2)
    IS

        CURSOR C_PROCESOSAEJECUTARCES 
        IS
            SELECT D.DP_VALNUMDETCATALOGO, D.DP_VALCARDETCATALOGO
            FROM PQ_OWNER.CRE_CATALOGOPQ_TBL C
            INNER JOIN PQ_OWNER.CRE_DETCATALOGOPQ_TBL D
            ON (C.CP_ID_CATALOGO = D.CP_ID_CATALOGO)
            WHERE     
            C.CP_CODCATALOGO = 'DEBAUTPQ'
            AND D.DP_CODDETCATALOGO LIKE ('%EJECES')
            AND D.DP_VALNUMDETCATALOGO = 0
            AND D.DP_VALCARDETCATALOGO IS NOT NULL
            AND C.CP_ESTADOCATALOGO = 'A'
            AND D.DP_ESTADODETCATALOGO = 'A'
            AND D.DP_TIPVALDETCATALOGO = 'V'
            ORDER BY DP_CODDETCATALOGO;
        
        TYPE T_PROCESOSAEJECUTARCES IS TABLE OF C_PROCESOSAEJECUTARCES%ROWTYPE INDEX BY PLS_INTEGER;
        L_PROCESOSAEJECUTARCES    T_PROCESOSAEJECUTARCES;
        
        
        CURSOR C_PROCESOSAEJECUTARDEB
        IS
            SELECT D.DP_VALNUMDETCATALOGO, D.DP_VALCARDETCATALOGO
            FROM PQ_OWNER.CRE_CATALOGOPQ_TBL C
            INNER JOIN PQ_OWNER.CRE_DETCATALOGOPQ_TBL D
            ON (C.CP_ID_CATALOGO = D.CP_ID_CATALOGO)
            WHERE     
            C.CP_CODCATALOGO = 'DEBAUTPQ'
            AND D.DP_CODDETCATALOGO LIKE ('%EJEDEB')
            AND D.DP_VALNUMDETCATALOGO = 0
            AND D.DP_VALCARDETCATALOGO IS NOT NULL
            AND C.CP_ESTADOCATALOGO = 'A'
            AND D.DP_ESTADODETCATALOGO = 'A'
            AND D.DP_TIPVALDETCATALOGO = 'V'
            ORDER BY DP_CODDETCATALOGO;

        TYPE T_PROCESOSAEJECUTARDEB IS TABLE OF C_PROCESOSAEJECUTARDEB%ROWTYPE INDEX BY PLS_INTEGER;
        L_PROCESOSAEJECUTARDEB    T_PROCESOSAEJECUTARDEB;
        
        CURSOR C_PROCESOSAEJECUTARPAR
        IS
            SELECT D.DP_VALNUMDETCATALOGO, D.DP_VALCARDETCATALOGO
            FROM PQ_OWNER.CRE_CATALOGOPQ_TBL C
            INNER JOIN PQ_OWNER.CRE_DETCATALOGOPQ_TBL D
            ON (C.CP_ID_CATALOGO = D.CP_ID_CATALOGO)
            WHERE     
            C.CP_CODCATALOGO = 'DEBAUTPQ'
            AND D.DP_CODDETCATALOGO LIKE ('%EJEPARAM')
            AND D.DP_VALNUMDETCATALOGO = 0
            AND D.DP_VALCARDETCATALOGO IS NOT NULL
            AND C.CP_ESTADOCATALOGO = 'A'
            AND D.DP_ESTADODETCATALOGO = 'A'
            AND D.DP_TIPVALDETCATALOGO = 'V'
            ORDER BY DP_CODDETCATALOGO;
            
        TYPE T_PROCESOSAEJECUTARPAR IS TABLE OF C_PROCESOSAEJECUTARPAR%ROWTYPE INDEX BY PLS_INTEGER;
        L_PROCESOSAEJECUTARPAR    T_PROCESOSAEJECUTARPAR;
    
    
        R_KSCRETBITPRO        IESS_OWNER.KSCRETBITPRO%ROWTYPE;
        X_SALIRPROCESOGEN   EXCEPTION;

    BEGIN

        SYS.DBMS_APPLICATION_INFO.SET_MODULE (
        MODULE_NAME   => 'CRE_DEBITOAUTOMATICO_P',
        ACTION_NAME   => 'INICO DEL PROCESO');
        
        R_KSCRETBITPRO.CODPRO         := K_CODPRO;
        R_KSCRETBITPRO.FECPRO         := SYSDATE;
        R_KSCRETBITPRO.OBSERV         := '0 INICIO PROCEDIMIENTO CRE_DEBITOAUTOMATICO_P';
        IESS_OWNER.HLCREKPROGEN.PROREGBITPRO (AICCODPRO => R_KSCRETBITPRO.CODPRO, AICOBSERV => R_KSCRETBITPRO.OBSERV);
        
        
        --------------------------PARAMETRIZACION DE BANDERAS
        
        AO_ERROR := NULL;
        AO_MENSAJEERROR := NULL;    
        CRE_PARAMETRIZACIONES_P (
                        AO_ERROR          => AO_ERROR,
                        AO_MENSAJEERROR    => AO_MENSAJEERROR);
        IF AO_ERROR = '0' THEN
            RAISE X_SALIRPROCESOGEN;
        END IF;
                    
        ---------------------------EJECUCION CESANTIAS (EXCLUSIONES Y ACTUALIZACION)
        
        
        IF COALESCE(G_FECHACARGA, TRUNC(SYSDATE)) = TRUNC(SYSDATE) 
        THEN

            OPEN C_PROCESOSAEJECUTARCES;
                FETCH C_PROCESOSAEJECUTARCES BULK COLLECT INTO L_PROCESOSAEJECUTARCES;
                
                IF L_PROCESOSAEJECUTARCES.COUNT = 0 THEN
                    R_KSCRETBITPRO.OBSERV := '2 NO EXISTEN PROCESOS DE CESANTIAS PENDIENTES DE EJECUCION PARA EL DIA DE HOY.';
                    IESS_OWNER.HLCREKPROGEN.PROREGBITPRO (AICCODPRO => R_KSCRETBITPRO.CODPRO, AICOBSERV => R_KSCRETBITPRO.OBSERV);
                END IF;
            CLOSE C_PROCESOSAEJECUTARCES;
            
            <<PROCESOSCESANTIAS>>
            FOR I IN 1 .. L_PROCESOSAEJECUTARCES.COUNT LOOP
                AO_ERROR := NULL;
                AO_MENSAJEERROR := NULL;
                    
                IF AO_ERROR IS NULL AND L_PROCESOSAEJECUTARCES(I).DP_VALCARDETCATALOGO = 'CRE_VALIDAEXCLUSIONESCES_P' THEN
                    
                    CRE_VALIDAEXCLUSIONESCES_P (
                            AO_ERROR         => AO_ERROR, 
                            AO_MENSAJEERROR => AO_MENSAJEERROR);
                    
                    IF AO_ERROR = '0' THEN
                        RAISE X_SALIRPROCESOGEN;
                    END IF;
                
                    IF AO_ERROR = '1' THEN
                        AO_ERROR := NULL;
                        AO_MENSAJEERROR := NULL;
                    END IF;
                    
                END IF;
                
                IF AO_ERROR IS NULL AND L_PROCESOSAEJECUTARCES(I).DP_VALCARDETCATALOGO = 'CRE_VALIDAEJECUTACES_P' THEN
                    
                    CRE_VALIDAEJECUTACES_P(
                            AI_FECHACARGA     => G_FECHACARGA,
                            AO_ERROR          => AO_ERROR,
                            AO_MENSAJEERROR    => AO_MENSAJEERROR);
                            
                    IF AO_ERROR = '0' THEN
                        RAISE X_SALIRPROCESOGEN;
                    END IF;
                    
                END IF;

            END LOOP PROCESOSCESANTIAS;

        END IF;
        
        
        ---------------------------EJECUCION DEBITO AUTOMATICO (EXCLUSIONES - LIQUIDACION)
        
        IF COALESCE(G_FECHADEBITO, TRUNC(SYSDATE-10)) = TRUNC(SYSDATE) 
        THEN
            
            OPEN C_PROCESOSAEJECUTARDEB;
                FETCH C_PROCESOSAEJECUTARDEB BULK COLLECT INTO L_PROCESOSAEJECUTARDEB;
                
                IF L_PROCESOSAEJECUTARDEB.COUNT = 0 THEN
                    R_KSCRETBITPRO.OBSERV := '2 NO EXISTEN PROCESOS DE DEBITO PENDIENTES DE EJECUCION PARA EL DIA DE HOY.';
                    IESS_OWNER.HLCREKPROGEN.PROREGBITPRO (AICCODPRO => R_KSCRETBITPRO.CODPRO, AICOBSERV => R_KSCRETBITPRO.OBSERV);
                END IF;
            CLOSE C_PROCESOSAEJECUTARDEB;
            
            <<PROCESOSDEBITO>>
            FOR I IN 1 .. L_PROCESOSAEJECUTARDEB.COUNT LOOP
                AO_ERROR := NULL;
                AO_MENSAJEERROR := NULL;
                    
                IF AO_ERROR IS NULL AND L_PROCESOSAEJECUTARDEB(I).DP_VALCARDETCATALOGO = 'CRE_VALIDAEXCLUSIONESDEB_P' THEN
                    
                    CRE_VALIDAEXCLUSIONESDEB_P (
                            AO_ERROR         => AO_ERROR, 
                            AO_MENSAJEERROR => AO_MENSAJEERROR);
                    
                    IF AO_ERROR = '0' THEN
                        RAISE X_SALIRPROCESOGEN;
                    END IF;

                    IF AO_ERROR = '1' THEN
                        AO_ERROR := NULL;
                        AO_MENSAJEERROR := NULL;
                    END IF;
                    
                END IF;

                IF AO_ERROR IS NULL AND L_PROCESOSAEJECUTARDEB(I).DP_VALCARDETCATALOGO = 'CRE_VALIDAEJECUTADEB_P' THEN
                    
                    CRE_VALIDAEJECUTADEB_P (
                            AI_TIPOPROCESO    => 'MENSUAL', 
                            AI_FECHACARGA     => G_FECHACARGA, 
                            AO_ERROR         => AO_ERROR, 
                            AO_MENSAJEERROR => AO_MENSAJEERROR);
                    
                    IF AO_ERROR = '0' THEN
                        RAISE X_SALIRPROCESOGEN;
                    END IF;
                    
                END IF;
                
            END LOOP PROCESOSDEBITO;

        END IF;        



        ---------------------------EJECUCION DESBLOQUEO RECAUDACION (BANDERAS)
        
        IF COALESCE(G_FECHADESBLOQUEO, TRUNC(SYSDATE-10)) = TRUNC(SYSDATE) 
        THEN
            
            OPEN C_PROCESOSAEJECUTARPAR;
                FETCH C_PROCESOSAEJECUTARPAR BULK COLLECT INTO L_PROCESOSAEJECUTARPAR;
                
                IF L_PROCESOSAEJECUTARPAR.COUNT = 0 THEN
                    R_KSCRETBITPRO.OBSERV := '2 NO EXISTEN PROCESOS DE PARAMETROS PENDIENTES DE EJECUCION PARA EL DIA DE HOY.';
                    IESS_OWNER.HLCREKPROGEN.PROREGBITPRO (AICCODPRO => R_KSCRETBITPRO.CODPRO, AICOBSERV => R_KSCRETBITPRO.OBSERV);
                END IF;
            CLOSE C_PROCESOSAEJECUTARPAR;
            
            <<PROCESOSPARAMETRO>>
            FOR I IN 1 .. L_PROCESOSAEJECUTARPAR.COUNT LOOP
                AO_ERROR := NULL;
                AO_MENSAJEERROR := NULL;
                    
                IF AO_ERROR IS NULL AND L_PROCESOSAEJECUTARPAR(I).DP_VALCARDETCATALOGO = 'CRE_ACTUALIZAPARAMETROS_P' THEN
                    
                    CRE_ACTUALIZAPARAMETROS_P (
                            AO_ERROR         => AO_ERROR, 
                            AO_MENSAJEERROR => AO_MENSAJEERROR);
                    
                    IF AO_ERROR = '0' THEN
                        RAISE X_SALIRPROCESOGEN;
                    END IF;
                
                END IF;
                
            END LOOP PROCESOSPARAMETRO;

        END IF;        


    F
        AO_ERROR := '1';
        AO_MENSAJEERROR := '0 FIN PROCEDIMIENTO CRE_DEBITOAUTOMATICO_P';F

        R_KSCRETBITPRO.OBSERV := AO_MENSAJEERROR;
        IESS_OWNER.HLCREKPROGEN.PROREGBITPRO (AICCODPRO => R_KSCRETBITPRO.CODPRO, AICOBSERV => R_KSCRETBITPRO.OBSERV);
        
        SYS.DBMS_APPLICATION_INFO.SET_MODULE (NULL, NULL);
        
    EXCEPTION
    WHEN X_SALIRPROCESOGEN
    THEN
        R_KSCRETBITPRO.OBSERV := SUBSTR(AO_MENSAJEERROR, 1, 1024);
        IESS_OWNER.HLCREKPROGEN.PROREGBITPRO (AICCODPRO => R_KSCRETBITPRO.CODPRO, AICOBSERV => R_KSCRETBITPRO.OBSERV);
            
        SYS.DBMS_APPLICATION_INFO.SET_MODULE (NULL, NULL);
        
    WHEN OTHERS
    THEN
        AO_ERROR := '0';
        AO_MENSAJEERROR := SUBSTR('0 ERROR CRE_DEBITOAUTOMATICO_P: ' || SQLERRM, 1, 1024);

        R_KSCRETBITPRO.OBSERV := AO_MENSAJEERROR;
        IESS_OWNER.HLCREKPROGEN.PROREGBITPRO (AICCODPRO => R_KSCRETBITPRO.CODPRO, AICOBSERV => R_KSCRETBITPRO.OBSERV);
        
        SYS.DBMS_APPLICATION_INFO.SET_MODULE (NULL, NULL);
         
    END CRE_DEBITOAUTOMATICO_P;

   PROCEDURE sal_replicaaudimed_p(
 ao_mensajesalida OUT VARCHAR2,
 ao_registros OUT NUMBER
)IS
   --<b>Version:</b> 1.0.0
   --<br><b>Descripcion:</b>  Proceso de replica desde la base replica hacia la base de produccion
   --<br><b>Autor:</b>  Manuel Vera 
   --<br><b>Parametros de entrada:</b> N/A
   --<br><b>Parametros de salida:</b> 
   --                 ao_mensajesalida: Mensaje con el detalle de la ejecucion de la replica 
   --                 ao_registros: cantidad de registros procesados durante la replica
   --<br><b>Historial de Cambios</b>
   --<hr>
   --Fecha          Autor            Version      Descripcion
   --<hr>
   --21/07/2023     Manuel Vera      1.0.0          Creacion.

   l_fechaini      DATE;
   l_fechafin      DATE;
   l_menerr        VARCHAR2(4000);
   l_tramites      aud_tramites_t.id_tramite@dbk_audimed_dbreplica%TYPE;
   l_expedientes   aud_tramites_t.id_tramite@dbk_audimed_dbreplica%TYPE;
   l_servicios     aud_tramites_t.id_tramite@dbk_audimed_dbreplica%TYPE;
   l_trazabilidad  aud_tramites_t.id_tramite@dbk_audimed_dbreplica%TYPE;
   l_ip            aud_visor_parametros_t.valor@dbk_audimed_dbreplica%TYPE;

BEGIN
   SYS.DBMS_APPLICATION_INFO.set_module (module_name=> 'SAL',action_name => 'SAL_REPLICAAUDIMED_P');

   l_fechaini := SYSDATE;
   l_ip := SYS_CONTEXT('USERENV','IP_ADDRESS');

   INSERT INTO aud_visor_log_usuarios_t@dbk_audimed_dbreplica (id_log_usuario, accion,resultado,detalle,usu_creacion,fec_creacion,ip_equipo,tabla)
   VALUES(AUD_VISOR_LOG_USUARIOS_S.nextval@dbk_audimed_dbreplica, 'REPLICA', 'exito', 'INICIO DEL PROCESO', 'system', SYSDATE, l_ip,null );

   /*
    TRAMITES
   */
   INSERT INTO AUD_TRAMITES_T@dbk_audimed_dbreplica /*+ append */
                                     nologging (id_tramite,
    codi_tramite,
    coordinacion_provincial,
    val_solicitado,
    val_iva,
    codi_prestador,
    des_prestador,
    usu_creacion,
    fec_creacion,
    ip_equipo,
    val_aprobado_fin,
    val_aprobado_ini,
    val_noacuerdo,
    val_noconciliable,
    codi_tipo_aten,
    codtramite1,
    caja,
    obs_objecion,
    obs_conciliacion,
    obs_noacuerdo,
    obs_noconciliable,
    fec_recepcion,
    fec_auditoria_pertinencia,
    usu_auditoria_pertinencia,
    fec_auditoria_liquidacion,
    usu_auditoria_liquidacion,
    fec_notificacion,
    fec_conciliacion,
    usu_conciliacion,
    fec_cierre,
    fec_calidad,
    usu_calidad,
    lote_archivo_iess,
    codigo_archivo_iess,
    descarga_planilla,
    nume_factura,
    valor_iva_aprobado,
    cod_coordinacion) 
      SELECT /*+ parallel(b,9) */
            t.id_tramite,
    codi_tramite,
    coordinacion_provincial,
    val_solicitado,
    val_iva,
    codi_prestador,
    des_prestador,
    usu_creacion,
    fec_creacion,
    ip_equipo,
    val_aprobado_fin,
    val_aprobado_ini,
    val_noacuerdo,
    val_noconciliable,
    codi_tipo_aten,
    codtramite1,
    caja,
    obs_objecion,
    obs_conciliacion,
    obs_noacuerdo,
    obs_noconciliable,
    fec_recepcion,
    fec_auditoria_pertinencia,
    usu_auditoria_pertinencia,
    fec_auditoria_liquidacion,
    usu_auditoria_liquidacion,
    fec_notificacion,
    fec_conciliacion,
    usu_conciliacion,
    fec_cierre,
    fec_calidad,
    usu_calidad,
    lote_archivo_iess,
    codigo_archivo_iess,
    descarga_planilla,
    nume_factura,
    valor_iva_aprobado,
    cod_coordinacion
        FROM AUD_TRAMITES_T t

        WHERE NOT EXISTS (SELECT 'x' FROM aud_tramites_t@dbk_audimed_dbreplica x WHERE x.id_tramite = t.id_tramite);

   l_tramites := sql%rowcount;
   INSERT INTO aud_visor_log_usuarios_t@dbk_audimed_dbreplica (id_log_usuario, accion,resultado,detalle,usu_creacion,fec_creacion,ip_equipo,tabla)
   VALUES(AUD_VISOR_LOG_USUARIOS_S.nextval@dbk_audimed_dbreplica, 'REPLICA', 'exito', 'REPLICA DE TRAMITES. Registros:' ||to_char(l_tramites) , 'system', SYSDATE, l_ip,'aud_tramites_t' );

   COMMIT;

   /*
   EXPEDIENTES
   */
   INSERT INTO AUD_EXPEDIENTES_T@dbk_audimed_dbreplica/*+ append */
                                     nologging(id_expediente,
    id_tramite,
    expediente,
    valor_total,
    val_iva,
    codi_dependencia,
    codi_afiliado,
    nombre,
    codi_beneficiario,
    nombre_beneficiario,
    cantidad_servicio,
    descripcion_objecion,
    cantidad_objecion,
    val_unitario_objecion,
    val_total_objecion,
    val_iva_objecion,
    observacion_objecion,
    observacion_conciliacion,
    observacion_no_acuerdo,
    observacion_no_conciliabilidad,
    val_aprobado_ini,
    val_levantado,
    val_no_acuerdo,
    val_no_conciliable,
    fec_radicacion,
    fec_auditoria_pertinencia,
    usuario_auditoria_pertinencia,
    fec_auditoria_liquidacion,
    usuario_auditoria_liquidacion,
    fec_notificacion,
    fec_conciliacion,
    usuario_conciliacion,
    fec_cierre,
    fec_calidad,
    usuario_calidad,
    usuario_creacion,
    fec_creacion,
    ip_equipo,
    val_iva_aprobado,
    tipo_beneficiario,
    codi_tipo_aten,
    codi_estado,
    fech_recepcion,
    parentesco,
    fec_servicio,
    val_aprobado_apelacion,
    val_objetado_final,
    val_iva_aprobado_final,
    val_aprobado_final,
    val_issfa,
    val_isspol,
    val_iess)
      SELECT /*+parallel(ser,8) */
            e.id_expediente,
    id_tramite,
    expediente,
    valor_total,
    val_iva,
    codi_dependencia,
    codi_afiliado,
    nombre,
    codi_beneficiario,
    nombre_beneficiario,
    cantidad_servicio,
    descripcion_objecion,
    cantidad_objecion,
    val_unitario_objecion,
    val_total_objecion,
    val_iva_objecion,
    observacion_objecion,
    observacion_conciliacion,
    observacion_no_acuerdo,
    observacion_no_conciliabilidad,
    val_aprobado_ini,
    val_levantado,
    val_no_acuerdo,
    val_no_conciliable,
    fec_radicacion,
    fec_auditoria_pertinencia,
    usuario_auditoria_pertinencia,
    fec_auditoria_liquidacion,
    usuario_auditoria_liquidacion,
    fec_notificacion,
    fec_conciliacion,
    usuario_conciliacion,
    fec_cierre,
    fec_calidad,
    usuario_calidad,
    usuario_creacion,
    fec_creacion,
    ip_equipo,
    val_iva_aprobado,
    tipo_beneficiario,
    codi_tipo_aten,
    codi_estado,
    fech_recepcion,
    parentesco,
    fec_servicio,
    val_aprobado_apelacion,
    val_objetado_final,
    val_iva_aprobado_final,
    val_aprobado_final,
    val_issfa,
    val_isspol,
    val_iess
        FROM AUD_EXPEDIENTES_T e 

        WHERE NOT EXISTS (SELECT 'x' FROM aud_expedientes_t@dbk_audimed_dbreplica x WHERE x.id_expediente = e.id_expediente);

   l_expedientes := sql%rowcount;
   INSERT INTO aud_visor_log_usuarios_t@dbk_audimed_dbreplica (id_log_usuario, accion,resultado,detalle,usu_creacion,fec_creacion,ip_equipo,tabla)
   VALUES(AUD_VISOR_LOG_USUARIOS_S.nextval@dbk_audimed_dbreplica, 'REPLICA', 'exito', 'REPLICA DE EXPEDIENTES. Registros:' ||to_char(l_expedientes), 'system', SYSDATE, l_ip,'aud_expedientes_t' );

   COMMIT;


 /*
   SERVICIOS
   */
   INSERT INTO AUD_SERVICIOS_T@dbk_audimed_dbreplica/*+ append */
                                     nologging(id_servicio,
    id_expediente,
    id_tramite,
    fec_inicio_servicio,
    fec_fin_servicio,
    fec_atencion,
    dependencia,
    codi_procedimiento,
    nombre_sin_tari,
    num_validacion,
    examen,
    derivacion,
    contingencia,
    medico_tratante,
    val_unitario,
    valor_total,
    valor_iva,
    usu_creacion,
    fec_creacion,
    ip_equipo,
    cantidad,
    cantidad_objecion,
    valor_unitario_objecion,
    valor_total_objecion,
    valor_iva_objecion,
    obs_objecion,
    obs_conciliacion,
    obs_noacuerdo,
    obs_noconciliable,
    valor_aceptado,
    valor_levantado,
    valor_noacuerdo,
    valor_noconciliable,
    fech_radicacion,
    fech_auditoria_pertinencia,
    usu_auditoria_pertinencia,
    fech_auditoria_liquidacion,
    usu_auditoria_liquidacion,
    fech_notificacion,
    fech_conciliacion,
    usu_conciliacion,
    fech_cierre,
    fech_calidad,
    usu_calidad,
    diagnostico,
    diagnostico_1,
    diagnostico_2,
    diagnostico_3,
    diagnostico_4,
    diagnostico_5)
      SELECT /*+parallel(ser,8) */
            s.id_servicio,
    id_expediente,
    id_tramite,
    fec_inicio_servicio,
    fec_fin_servicio,
    fec_atencion,
    dependencia,
    codi_procedimiento,
    nombre_sin_tari,
    num_validacion,
    examen,
    derivacion,
    contingencia,
    medico_tratante,
    val_unitario,
    valor_total,
    valor_iva,
    usu_creacion,
    fec_creacion,
    ip_equipo,
    cantidad,
    cantidad_objecion,
    valor_unitario_objecion,
    valor_total_objecion,
    valor_iva_objecion,
    obs_objecion,
    obs_conciliacion,
    obs_noacuerdo,
    obs_noconciliable,
    valor_aceptado,
    valor_levantado,
    valor_noacuerdo,
    valor_noconciliable,
    fech_radicacion,
    fech_auditoria_pertinencia,
    usu_auditoria_pertinencia,
    fech_auditoria_liquidacion,
    usu_auditoria_liquidacion,
    fech_notificacion,
    fech_conciliacion,
    usu_conciliacion,
    fech_cierre,
    fech_calidad,
    usu_calidad,
    diagnostico,
    diagnostico_1,
    diagnostico_2,
    diagnostico_3,
    diagnostico_4,
    diagnostico_5
        FROM AUD_SERVICIOS_T s 
        WHERE NOT EXISTS (SELECT 'x' FROM aud_servicios_t@dbk_audimed_dbreplica x WHERE x.id_servicio = s.id_servicio);

   l_servicios := sql%rowcount;
   INSERT INTO aud_visor_log_usuarios_t@dbk_audimed_dbreplica (id_log_usuario, accion,resultado,detalle,usu_creacion,fec_creacion,ip_equipo,tabla)
   VALUES(AUD_VISOR_LOG_USUARIOS_S.nextval@dbk_audimed_dbreplica, 'REPLICA', 'exito', 'REPLICA DE SERVICIOS DE EXPEDIENTES. Registros:' ||to_char(l_servicios), 'system', SYSDATE, l_ip,'aud_servicios_t' );

   COMMIT;

   /*
   TRAZABILIDAD
   */
   INSERT INTO AUD_TRAZA_ACCIONES_T@dbk_audimed_dbreplica/*+ append */
                                     nologging(id_traza,
    accion,
    id_tramite,
    id_expediente,
    id_servicio,
    modulo,
    detalle,
    usu_creacion,
    fec_creacion,
    ip_equipo,
    tabla,
    campo,
    val_anterior,
    val_nuevo)
      SELECT t.id_traza,
    accion,
    id_tramite,
    id_expediente,
    id_servicio,
    modulo,
    detalle,
    usu_creacion,
    fec_creacion,
    ip_equipo,
    tabla,
    campo,
    val_anterior,
    val_nuevo
        FROM AUD_TRAZA_ACCIONES_T t --@dbk_dbreplica_audimed t 
                WHERE NOT EXISTS (SELECT 'x' FROM aud_traza_acciones_t@dbk_audimed_dbreplica x WHERE x.id_traza = t.id_traza);
    l_trazabilidad := sql%rowcount;
    INSERT INTO aud_visor_log_usuarios_t@dbk_audimed_dbreplica (id_log_usuario, accion,resultado,detalle,usu_creacion,fec_creacion,ip_equipo,tabla)
    VALUES(AUD_VISOR_LOG_USUARIOS_S.nextval@dbk_audimed_dbreplica, 'REPLICA', 'exito', 'REPLICA DE TRAZABILIDAD. Registros:' ||to_char(l_trazabilidad), 'system', SYSDATE, l_ip,'aud_traza_acciones_t' );

    COMMIT;

   INSERT INTO aud_visor_log_usuarios_t@dbk_audimed_dbreplica (id_log_usuario, accion,resultado,detalle,usu_creacion,fec_creacion,ip_equipo,tabla)
   VALUES(AUD_VISOR_LOG_USUARIOS_S.nextval@dbk_audimed_dbreplica, 'REPLICA', 'exito', 'ENVIO DE NOTIFICACION', 'system', SYSDATE, l_ip, null );

   /*
   NOTIFICACION
   */
   l_fechafin := SYSDATE;
   l_menerr := 'RESUMEN DEL PROCESO DE REPLICA '
      || CHR (13)
      || 'Proceso de replica de Auditorias Medicas Audimed ejecutado con exito.'
      || CHR (13)
      || 'Tramites procesados:' || to_char(l_tramites) 
      || CHR (13)
      || 'Expedientes procesados:' || to_char(l_expedientes) 
      || CHR (13)
      || 'Servicios procesados:' || to_char(l_servicios) 
      || CHR (13)
      || 'Trazabilidad procesados:' || to_char(l_trazabilidad) 
      || CHR (13)
      || 'Total de Registros procesados:' || to_char(l_tramites + l_expedientes + l_servicios + l_trazabilidad)
      || CHR (13)
      || 'Inicio de ejecucion:' || to_char(l_fechaini,'YYYY-MM-DD HH24:MI:SS')
      || CHR (13)
      || 'Fin de ejecucion:' || to_char(l_fechafin,'YYYY-MM-DD HH24:MI:SS');

   ao_mensajesalida := l_menerr;
   ao_registros := l_tramites + l_expedientes + l_servicios + l_trazabilidad;
   SYS.dbms_output.put_line(l_menerr);

   INSERT INTO aud_visor_log_usuarios_t@dbk_audimed_dbreplica (id_log_usuario, accion,resultado,detalle,usu_creacion,fec_creacion,ip_equipo,tabla)
   VALUES(AUD_VISOR_LOG_USUARIOS_S.nextval@dbk_audimed_dbreplica, 'REPLICA', 'exito', 'FIN DEL PROCESO', 'system', SYSDATE, l_ip,null );
   COMMIT;
   SYS.DBMS_APPLICATION_INFO.set_module (NULL, NULL);

EXCEPTION
   WHEN OTHERS
   THEN
      ROLLBACK;

      l_menerr := 'Error General: ' || SUBSTR (SQLERRM, 1, 4000);
      INSERT INTO aud_visor_log_usuarios_t@dbk_audimed_dbreplica (id_log_usuario, accion,resultado,detalle,usu_creacion,fec_creacion,ip_equipo,tabla)
      VALUES(AUD_VISOR_LOG_USUARIOS_S.nextval@dbk_audimed_dbreplica, 'REPLICA', 'error', SUBSTR(l_menerr,1,1000), 'system', SYSDATE, l_ip,null );

      ao_mensajesalida := l_menerr;
      SYS.DBMS_APPLICATION_INFO.set_module (NULL, NULL);
END sal_replicaaudimed_p;

PROCEDURE sal_notificar_mail_p(
 ai_mailobservacion IN VARCHAR2 DEFAULT NULL,
 ai_registros IN NUMBER DEFAULT 0,
 ao_resultado OUT NUMBER
) IS
   --<b>Version:</b> 1.0.0
   --<br><b>Descripcion:</b>  Procedimiento para el envio de la notificacion de ejecucion de la replica
   --<br><b>Autor:</b>  Manuel Vera 
   --<br><b>Parametros de entrada:</b>
   --                 ai_mailobservacion: Cuerpo del mensaje que se envia
   --                 ai_registros: cantidad de registros procesados durante la replica
   --<br><b>Parametros de salida:</b> 
   --                 ao_resultado: Resultado del envio de correo generado por el procedimeinto SendMail
   --<br><b>Historial de Cambios</b>
   --<hr>
   --Fecha          Autor            Version      Descripcion
   --<hr>
   --21/07/2023     Manuel Vera      1.0.0          Creacion.

   l_maildestino   VARCHAR2(1000);
   l_mailorigen    aud_visor_log_usuarios_t.valor@dbk_audimed_dbreplica%TYPE;
   l_mailservidor  aud_visor_log_usuarios_t.valor@dbk_audimed_dbreplica%TYPE;
   l_mailasunto    aud_visor_log_usuarios_t.valor@dbk_audimed_dbreplica%TYPE;
   l_mailerror     VARCHAR2(100);
   l_ip            aud_visor_log_usuarios_t.valor@dbk_audimed_dbreplica%TYPE;
BEGIN
   l_ip := SYS_CONTEXT('USERENV','IP_ADDRESS');
   INSERT INTO aud_visor_log_usuarios_t@dbk_audimed_dbreplica (id_log_usuario, accion,resultado,detalle,usu_creacion,fec_creacion,ip_equipo,tabla)
   VALUES(AUD_VISOR_LOG_USUARIOS_S.nextval@dbk_audimed_dbreplica, 'REPLICA', 'exito', 'OBTENER PARAMETROS', 'system', SYSDATE, l_ip,'aud_visor_parametros_t' );

   SELECT valor INTO l_mailorigen 
   FROM aud_visor_parametros_t@dbk_audimed_dbreplica p
   WHERE p.catalogo = 'REPLICA_MAIL'
   AND p.parametro = 'MAIL_ORIGEN'
   AND p.estado = 'ACTIVO';

   <<obtener_correosdestino>>
   FOR c IN (
   SELECT valor 
   FROM aud_visor_parametros_t@dbk_audimed_dbreplica p
   WHERE p.catalogo = 'REPLICA_MAIL'
   AND p.parametro = 'MAIL_DESTINO'
   AND p.estado = 'ACTIVO') LOOP
        l_maildestino := l_maildestino || c.valor || ',';
   END LOOP obtener_correosdestino;

   SELECT valor INTO l_mailservidor 
   FROM aud_visor_parametros_t@dbk_audimed_dbreplica p
   WHERE p.catalogo = 'REPLICA_MAIL'
   AND p.parametro = 'MAIL_SERVIDOR'
   AND p.estado = 'ACTIVO';

   SELECT valor INTO l_mailasunto 
   FROM aud_visor_parametros_t@dbk_audimed_dbreplica p
   WHERE p.catalogo = 'REPLICA_MAIL'
   AND p.parametro = 'MAIL_ASUNTO'
   AND p.estado = 'ACTIVO';

   IF ( ai_registros > 0 ) THEN
       ao_resultado := AUDIMED_OWNER.SendMailJPkg.SendMail(SMTPServerName => l_mailservidor,
                         Sender => l_mailorigen,
                         Recipient => l_maildestino,
                         CcRecipient => null, 
                         BccRecipient => null,
                         Subject => l_mailasunto,
                         Body => ai_mailobservacion,
                         ErrorMessage => l_mailerror,
                         Attachments => null);
   END IF;

   EXCEPTION 
        when no_data_found then
            ao_resultado := 0;
        when too_many_rows then
            ao_resultado := 0;

END sal_notificar_mail_p;
END CRE_DEBITOAUTOMATICOPQ_PKG;
/